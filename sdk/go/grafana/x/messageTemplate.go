// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Grafana Alerting message templates.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/alerting/manage-notifications/template-notifications/create-notification-templates/)
// * [HTTP API](https://grafana.com/docs/grafana/next/developers/http_api/alerting_provisioning/#templates)
//
// This resource requires Grafana 9.1.0 or later.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewMessageTemplate(ctx, "myTemplate", &grafana.MessageTemplateArgs{
//				Template: pulumi.String("{{define \"My Reusable Template\" }}\n template content\n{{ end }}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/messageTemplate:MessageTemplate message_template_name {{message_template_name}}
//
// ```
type MessageTemplate struct {
	pulumi.CustomResourceState

	// The name of the message template.
	Name pulumix.Output[string] `pulumi:"name"`
	// The content of the message template.
	Template pulumix.Output[string] `pulumi:"template"`
}

// NewMessageTemplate registers a new resource with the given unique name, arguments, and options.
func NewMessageTemplate(ctx *pulumi.Context,
	name string, args *MessageTemplateArgs, opts ...pulumi.ResourceOption) (*MessageTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MessageTemplate
	err := ctx.RegisterResource("grafana:index/messageTemplate:MessageTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMessageTemplate gets an existing MessageTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMessageTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MessageTemplateState, opts ...pulumi.ResourceOption) (*MessageTemplate, error) {
	var resource MessageTemplate
	err := ctx.ReadResource("grafana:index/messageTemplate:MessageTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MessageTemplate resources.
type messageTemplateState struct {
	// The name of the message template.
	Name *string `pulumi:"name"`
	// The content of the message template.
	Template *string `pulumi:"template"`
}

type MessageTemplateState struct {
	// The name of the message template.
	Name pulumix.Input[*string]
	// The content of the message template.
	Template pulumix.Input[*string]
}

func (MessageTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*messageTemplateState)(nil)).Elem()
}

type messageTemplateArgs struct {
	// The name of the message template.
	Name *string `pulumi:"name"`
	// The content of the message template.
	Template string `pulumi:"template"`
}

// The set of arguments for constructing a MessageTemplate resource.
type MessageTemplateArgs struct {
	// The name of the message template.
	Name pulumix.Input[*string]
	// The content of the message template.
	Template pulumix.Input[string]
}

func (MessageTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*messageTemplateArgs)(nil)).Elem()
}

type MessageTemplateOutput struct{ *pulumi.OutputState }

func (MessageTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageTemplate)(nil)).Elem()
}

func (o MessageTemplateOutput) ToMessageTemplateOutput() MessageTemplateOutput {
	return o
}

func (o MessageTemplateOutput) ToMessageTemplateOutputWithContext(ctx context.Context) MessageTemplateOutput {
	return o
}

func (o MessageTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[MessageTemplate] {
	return pulumix.Output[MessageTemplate]{
		OutputState: o.OutputState,
	}
}

// The name of the message template.
func (o MessageTemplateOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MessageTemplate](o, func(v MessageTemplate) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The content of the message template.
func (o MessageTemplateOutput) Template() pulumix.Output[string] {
	value := pulumix.Apply[MessageTemplate](o, func(v MessageTemplate) pulumix.Output[string] { return v.Template })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MessageTemplateOutput{})
}
