// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSlackChannel, err := grafana.GetOnCallSlackChannel(ctx, &grafana.GetOnCallSlackChannelArgs{
//				Name: "example_slack_channel",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUserGroup, err := grafana.GetOncallUserGroup(ctx, &grafana.GetOncallUserGroupArgs{
//				SlackHandle: "example_slack_handle",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallSchedule(ctx, "exampleScheduleOncallSchedule", &grafana.OncallScheduleArgs{
//				Type:             pulumi.String("ical"),
//				IcalUrlPrimary:   pulumi.String("https://example.com/example_ical.ics"),
//				IcalUrlOverrides: pulumi.String("https://example.com/example_overrides_ical.ics"),
//				Slack: &grafana.OncallScheduleSlackArgs{
//					ChannelId:   *pulumi.String(exampleSlackChannel.SlackId),
//					UserGroupId: *pulumi.String(exampleUserGroup.SlackId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallSchedule(ctx, "exampleScheduleIndex/oncallScheduleOncallSchedule", &grafana.OncallScheduleArgs{
//				Type:             pulumi.String("calendar"),
//				TimeZone:         pulumi.String("America/New_York"),
//				Shifts:           pulumi.StringArray{},
//				IcalUrlOverrides: pulumi.String("https://example.com/example_overrides_ical.ics"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/oncallSchedule:OncallSchedule schedule_name {{schedule_id}}
//
// ```
type OncallSchedule struct {
	pulumi.CustomResourceState

	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides pulumix.Output[*string] `pulumi:"icalUrlOverrides"`
	// The URL of the external calendar iCal file.
	IcalUrlPrimary pulumix.Output[*string] `pulumi:"icalUrlPrimary"`
	// The schedule's name.
	Name pulumix.Output[string] `pulumi:"name"`
	// The list of ID's of on-call shifts.
	Shifts pulumix.ArrayOutput[string] `pulumi:"shifts"`
	// The Slack-specific settings for a schedule.
	Slack pulumix.GPtrOutput[OncallScheduleSlack, OncallScheduleSlackOutput] `pulumi:"slack"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Output[*string] `pulumi:"teamId"`
	// The schedule's time zone.
	TimeZone pulumix.Output[*string] `pulumi:"timeZone"`
	// The schedule's type.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewOncallSchedule registers a new resource with the given unique name, arguments, and options.
func NewOncallSchedule(ctx *pulumi.Context,
	name string, args *OncallScheduleArgs, opts ...pulumi.ResourceOption) (*OncallSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallSchedule
	err := ctx.RegisterResource("grafana:index/oncallSchedule:OncallSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallSchedule gets an existing OncallSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallScheduleState, opts ...pulumi.ResourceOption) (*OncallSchedule, error) {
	var resource OncallSchedule
	err := ctx.ReadResource("grafana:index/oncallSchedule:OncallSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallSchedule resources.
type oncallScheduleState struct {
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides *string `pulumi:"icalUrlOverrides"`
	// The URL of the external calendar iCal file.
	IcalUrlPrimary *string `pulumi:"icalUrlPrimary"`
	// The schedule's name.
	Name *string `pulumi:"name"`
	// The list of ID's of on-call shifts.
	Shifts []string `pulumi:"shifts"`
	// The Slack-specific settings for a schedule.
	Slack *OncallScheduleSlack `pulumi:"slack"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The schedule's time zone.
	TimeZone *string `pulumi:"timeZone"`
	// The schedule's type.
	Type *string `pulumi:"type"`
}

type OncallScheduleState struct {
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides pulumix.Input[*string]
	// The URL of the external calendar iCal file.
	IcalUrlPrimary pulumix.Input[*string]
	// The schedule's name.
	Name pulumix.Input[*string]
	// The list of ID's of on-call shifts.
	Shifts pulumix.Input[[]string]
	// The Slack-specific settings for a schedule.
	Slack pulumix.Input[*OncallScheduleSlackArgs]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// The schedule's time zone.
	TimeZone pulumix.Input[*string]
	// The schedule's type.
	Type pulumix.Input[*string]
}

func (OncallScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallScheduleState)(nil)).Elem()
}

type oncallScheduleArgs struct {
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides *string `pulumi:"icalUrlOverrides"`
	// The URL of the external calendar iCal file.
	IcalUrlPrimary *string `pulumi:"icalUrlPrimary"`
	// The schedule's name.
	Name *string `pulumi:"name"`
	// The list of ID's of on-call shifts.
	Shifts []string `pulumi:"shifts"`
	// The Slack-specific settings for a schedule.
	Slack *OncallScheduleSlack `pulumi:"slack"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The schedule's time zone.
	TimeZone *string `pulumi:"timeZone"`
	// The schedule's type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a OncallSchedule resource.
type OncallScheduleArgs struct {
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides pulumix.Input[*string]
	// The URL of the external calendar iCal file.
	IcalUrlPrimary pulumix.Input[*string]
	// The schedule's name.
	Name pulumix.Input[*string]
	// The list of ID's of on-call shifts.
	Shifts pulumix.Input[[]string]
	// The Slack-specific settings for a schedule.
	Slack pulumix.Input[*OncallScheduleSlackArgs]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// The schedule's time zone.
	TimeZone pulumix.Input[*string]
	// The schedule's type.
	Type pulumix.Input[string]
}

func (OncallScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallScheduleArgs)(nil)).Elem()
}

type OncallScheduleOutput struct{ *pulumi.OutputState }

func (OncallScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallSchedule)(nil)).Elem()
}

func (o OncallScheduleOutput) ToOncallScheduleOutput() OncallScheduleOutput {
	return o
}

func (o OncallScheduleOutput) ToOncallScheduleOutputWithContext(ctx context.Context) OncallScheduleOutput {
	return o
}

func (o OncallScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[OncallSchedule] {
	return pulumix.Output[OncallSchedule]{
		OutputState: o.OutputState,
	}
}

// The URL of external iCal calendar which override primary events.
func (o OncallScheduleOutput) IcalUrlOverrides() pulumix.Output[*string] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.Output[*string] { return v.IcalUrlOverrides })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The URL of the external calendar iCal file.
func (o OncallScheduleOutput) IcalUrlPrimary() pulumix.Output[*string] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.Output[*string] { return v.IcalUrlPrimary })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The schedule's name.
func (o OncallScheduleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of ID's of on-call shifts.
func (o OncallScheduleOutput) Shifts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.ArrayOutput[string] { return v.Shifts })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The Slack-specific settings for a schedule.
func (o OncallScheduleOutput) Slack() pulumix.GPtrOutput[OncallScheduleSlack, OncallScheduleSlackOutput] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.GPtrOutput[OncallScheduleSlack, OncallScheduleSlackOutput] {
		return v.Slack
	})
	unwrapped := pulumix.Flatten[*OncallScheduleSlack, pulumix.GPtrOutput[OncallScheduleSlack, OncallScheduleSlackOutput]](value)
	return pulumix.GPtrOutput[OncallScheduleSlack, OncallScheduleSlackOutput]{OutputState: unwrapped.OutputState}
}

// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
func (o OncallScheduleOutput) TeamId() pulumix.Output[*string] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.Output[*string] { return v.TeamId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The schedule's time zone.
func (o OncallScheduleOutput) TimeZone() pulumix.Output[*string] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.Output[*string] { return v.TimeZone })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The schedule's type.
func (o OncallScheduleOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[OncallSchedule](o, func(v OncallSchedule) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(OncallScheduleOutput{})
}
