// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A job defines the queries and model parameters for a machine learning task.
type MachineLearningJob struct {
	pulumi.CustomResourceState

	// An object representing the custom labels added on the forecast.
	CustomLabels pulumix.MapOutput[any] `pulumi:"customLabels"`
	// The id of the datasource to query.
	DatasourceId pulumix.Output[*int] `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumix.Output[string] `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid pulumix.Output[*string] `pulumi:"datasourceUid"`
	// A description of the job.
	Description pulumix.Output[*string] `pulumi:"description"`
	// A list of holiday IDs or names to take into account when training the model.
	Holidays pulumix.ArrayOutput[string] `pulumi:"holidays"`
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.
	HyperParams pulumix.MapOutput[any] `pulumi:"hyperParams"`
	// The data interval in seconds to train the data on. Defaults to `300`.
	Interval pulumix.Output[*int] `pulumi:"interval"`
	// The metric used to query the job results.
	Metric pulumix.Output[string] `pulumi:"metric"`
	// The name of the job.
	Name pulumix.Output[string] `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams pulumix.MapOutput[any] `pulumi:"queryParams"`
	// The data interval in seconds to train the data on. Defaults to `7776000`.
	TrainingWindow pulumix.Output[*int] `pulumi:"trainingWindow"`
}

// NewMachineLearningJob registers a new resource with the given unique name, arguments, and options.
func NewMachineLearningJob(ctx *pulumi.Context,
	name string, args *MachineLearningJobArgs, opts ...pulumi.ResourceOption) (*MachineLearningJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasourceType == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceType'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.QueryParams == nil {
		return nil, errors.New("invalid value for required argument 'QueryParams'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MachineLearningJob
	err := ctx.RegisterResource("grafana:index/machineLearningJob:MachineLearningJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineLearningJob gets an existing MachineLearningJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineLearningJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineLearningJobState, opts ...pulumi.ResourceOption) (*MachineLearningJob, error) {
	var resource MachineLearningJob
	err := ctx.ReadResource("grafana:index/machineLearningJob:MachineLearningJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineLearningJob resources.
type machineLearningJobState struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels map[string]interface{} `pulumi:"customLabels"`
	// The id of the datasource to query.
	DatasourceId *int `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType *string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// A description of the job.
	Description *string `pulumi:"description"`
	// A list of holiday IDs or names to take into account when training the model.
	Holidays []string `pulumi:"holidays"`
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.
	HyperParams map[string]interface{} `pulumi:"hyperParams"`
	// The data interval in seconds to train the data on. Defaults to `300`.
	Interval *int `pulumi:"interval"`
	// The metric used to query the job results.
	Metric *string `pulumi:"metric"`
	// The name of the job.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]interface{} `pulumi:"queryParams"`
	// The data interval in seconds to train the data on. Defaults to `7776000`.
	TrainingWindow *int `pulumi:"trainingWindow"`
}

type MachineLearningJobState struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels pulumix.Input[map[string]any]
	// The id of the datasource to query.
	DatasourceId pulumix.Input[*int]
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumix.Input[*string]
	// The uid of the datasource to query.
	DatasourceUid pulumix.Input[*string]
	// A description of the job.
	Description pulumix.Input[*string]
	// A list of holiday IDs or names to take into account when training the model.
	Holidays pulumix.Input[[]string]
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.
	HyperParams pulumix.Input[map[string]any]
	// The data interval in seconds to train the data on. Defaults to `300`.
	Interval pulumix.Input[*int]
	// The metric used to query the job results.
	Metric pulumix.Input[*string]
	// The name of the job.
	Name pulumix.Input[*string]
	// An object representing the query params to query Grafana with.
	QueryParams pulumix.Input[map[string]any]
	// The data interval in seconds to train the data on. Defaults to `7776000`.
	TrainingWindow pulumix.Input[*int]
}

func (MachineLearningJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningJobState)(nil)).Elem()
}

type machineLearningJobArgs struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels map[string]interface{} `pulumi:"customLabels"`
	// The id of the datasource to query.
	DatasourceId *int `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// A description of the job.
	Description *string `pulumi:"description"`
	// A list of holiday IDs or names to take into account when training the model.
	Holidays []string `pulumi:"holidays"`
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.
	HyperParams map[string]interface{} `pulumi:"hyperParams"`
	// The data interval in seconds to train the data on. Defaults to `300`.
	Interval *int `pulumi:"interval"`
	// The metric used to query the job results.
	Metric string `pulumi:"metric"`
	// The name of the job.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]interface{} `pulumi:"queryParams"`
	// The data interval in seconds to train the data on. Defaults to `7776000`.
	TrainingWindow *int `pulumi:"trainingWindow"`
}

// The set of arguments for constructing a MachineLearningJob resource.
type MachineLearningJobArgs struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels pulumix.Input[map[string]any]
	// The id of the datasource to query.
	DatasourceId pulumix.Input[*int]
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumix.Input[string]
	// The uid of the datasource to query.
	DatasourceUid pulumix.Input[*string]
	// A description of the job.
	Description pulumix.Input[*string]
	// A list of holiday IDs or names to take into account when training the model.
	Holidays pulumix.Input[[]string]
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.
	HyperParams pulumix.Input[map[string]any]
	// The data interval in seconds to train the data on. Defaults to `300`.
	Interval pulumix.Input[*int]
	// The metric used to query the job results.
	Metric pulumix.Input[string]
	// The name of the job.
	Name pulumix.Input[*string]
	// An object representing the query params to query Grafana with.
	QueryParams pulumix.Input[map[string]any]
	// The data interval in seconds to train the data on. Defaults to `7776000`.
	TrainingWindow pulumix.Input[*int]
}

func (MachineLearningJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningJobArgs)(nil)).Elem()
}

type MachineLearningJobOutput struct{ *pulumi.OutputState }

func (MachineLearningJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningJob)(nil)).Elem()
}

func (o MachineLearningJobOutput) ToMachineLearningJobOutput() MachineLearningJobOutput {
	return o
}

func (o MachineLearningJobOutput) ToMachineLearningJobOutputWithContext(ctx context.Context) MachineLearningJobOutput {
	return o
}

func (o MachineLearningJobOutput) ToOutput(ctx context.Context) pulumix.Output[MachineLearningJob] {
	return pulumix.Output[MachineLearningJob]{
		OutputState: o.OutputState,
	}
}

// An object representing the custom labels added on the forecast.
func (o MachineLearningJobOutput) CustomLabels() pulumix.MapOutput[any] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.MapOutput[any] { return v.CustomLabels })
	unwrapped := pulumix.Flatten[map[string]interface{}, pulumix.MapOutput[any]](value)
	return pulumix.MapOutput[any]{OutputState: unwrapped.OutputState}
}

// The id of the datasource to query.
func (o MachineLearningJobOutput) DatasourceId() pulumix.Output[*int] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[*int] { return v.DatasourceId })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
func (o MachineLearningJobOutput) DatasourceType() pulumix.Output[string] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[string] { return v.DatasourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The uid of the datasource to query.
func (o MachineLearningJobOutput) DatasourceUid() pulumix.Output[*string] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[*string] { return v.DatasourceUid })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A description of the job.
func (o MachineLearningJobOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of holiday IDs or names to take into account when training the model.
func (o MachineLearningJobOutput) Holidays() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.ArrayOutput[string] { return v.Holidays })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/ for the full list of available hyperparameters. Defaults to `map[]`.
func (o MachineLearningJobOutput) HyperParams() pulumix.MapOutput[any] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.MapOutput[any] { return v.HyperParams })
	unwrapped := pulumix.Flatten[map[string]interface{}, pulumix.MapOutput[any]](value)
	return pulumix.MapOutput[any]{OutputState: unwrapped.OutputState}
}

// The data interval in seconds to train the data on. Defaults to `300`.
func (o MachineLearningJobOutput) Interval() pulumix.Output[*int] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[*int] { return v.Interval })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The metric used to query the job results.
func (o MachineLearningJobOutput) Metric() pulumix.Output[string] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[string] { return v.Metric })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the job.
func (o MachineLearningJobOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An object representing the query params to query Grafana with.
func (o MachineLearningJobOutput) QueryParams() pulumix.MapOutput[any] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.MapOutput[any] { return v.QueryParams })
	unwrapped := pulumix.Flatten[map[string]interface{}, pulumix.MapOutput[any]](value)
	return pulumix.MapOutput[any]{OutputState: unwrapped.OutputState}
}

// The data interval in seconds to train the data on. Defaults to `7776000`.
func (o MachineLearningJobOutput) TrainingWindow() pulumix.Output[*int] {
	value := pulumix.Apply[MachineLearningJob](o, func(v MachineLearningJob) pulumix.Output[*int] { return v.TrainingWindow })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(MachineLearningJobOutput{})
}
