// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewOncallOutgoingWebhook(ctx, "test-acc-outgoingWebhook", &grafana.OncallOutgoingWebhookArgs{
//				Url: pulumi.String("https://example.com/"),
//			}, pulumi.Provider(grafana.Oncall))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook outgoing_webhook_name {{outgoing_webhook_id}}
//
// ```
type OncallOutgoingWebhook struct {
	pulumi.CustomResourceState

	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader pulumix.Output[*string] `pulumi:"authorizationHeader"`
	// The data of the webhook.
	Data pulumix.Output[*string] `pulumi:"data"`
	// Forwards whole payload of the alert to the webhook's url as POST data.
	ForwardWholePayload pulumix.Output[*bool] `pulumi:"forwardWholePayload"`
	// The name of the outgoing webhook.
	Name pulumix.Output[string] `pulumi:"name"`
	// The auth data of the webhook. Used for Basic authentication
	Password pulumix.Output[*string] `pulumi:"password"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Output[*string] `pulumi:"teamId"`
	// The webhook URL.
	Url pulumix.Output[string] `pulumi:"url"`
	// The auth data of the webhook. Used for Basic authentication.
	User pulumix.Output[*string] `pulumi:"user"`
}

// NewOncallOutgoingWebhook registers a new resource with the given unique name, arguments, and options.
func NewOncallOutgoingWebhook(ctx *pulumi.Context,
	name string, args *OncallOutgoingWebhookArgs, opts ...pulumi.ResourceOption) (*OncallOutgoingWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.AuthorizationHeader != nil {
		untypedSecretValue := pulumi.ToSecret(args.AuthorizationHeader.ToOutput(ctx.Context()).Untyped())
		args.AuthorizationHeader = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.Password != nil {
		untypedSecretValue := pulumi.ToSecret(args.Password.ToOutput(ctx.Context()).Untyped())
		args.Password = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authorizationHeader",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallOutgoingWebhook
	err := ctx.RegisterResource("grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallOutgoingWebhook gets an existing OncallOutgoingWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallOutgoingWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallOutgoingWebhookState, opts ...pulumi.ResourceOption) (*OncallOutgoingWebhook, error) {
	var resource OncallOutgoingWebhook
	err := ctx.ReadResource("grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallOutgoingWebhook resources.
type oncallOutgoingWebhookState struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader *string `pulumi:"authorizationHeader"`
	// The data of the webhook.
	Data *string `pulumi:"data"`
	// Forwards whole payload of the alert to the webhook's url as POST data.
	ForwardWholePayload *bool `pulumi:"forwardWholePayload"`
	// The name of the outgoing webhook.
	Name *string `pulumi:"name"`
	// The auth data of the webhook. Used for Basic authentication
	Password *string `pulumi:"password"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The webhook URL.
	Url *string `pulumi:"url"`
	// The auth data of the webhook. Used for Basic authentication.
	User *string `pulumi:"user"`
}

type OncallOutgoingWebhookState struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader pulumix.Input[*string]
	// The data of the webhook.
	Data pulumix.Input[*string]
	// Forwards whole payload of the alert to the webhook's url as POST data.
	ForwardWholePayload pulumix.Input[*bool]
	// The name of the outgoing webhook.
	Name pulumix.Input[*string]
	// The auth data of the webhook. Used for Basic authentication
	Password pulumix.Input[*string]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// The webhook URL.
	Url pulumix.Input[*string]
	// The auth data of the webhook. Used for Basic authentication.
	User pulumix.Input[*string]
}

func (OncallOutgoingWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallOutgoingWebhookState)(nil)).Elem()
}

type oncallOutgoingWebhookArgs struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader *string `pulumi:"authorizationHeader"`
	// The data of the webhook.
	Data *string `pulumi:"data"`
	// Forwards whole payload of the alert to the webhook's url as POST data.
	ForwardWholePayload *bool `pulumi:"forwardWholePayload"`
	// The name of the outgoing webhook.
	Name *string `pulumi:"name"`
	// The auth data of the webhook. Used for Basic authentication
	Password *string `pulumi:"password"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The webhook URL.
	Url string `pulumi:"url"`
	// The auth data of the webhook. Used for Basic authentication.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a OncallOutgoingWebhook resource.
type OncallOutgoingWebhookArgs struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader pulumix.Input[*string]
	// The data of the webhook.
	Data pulumix.Input[*string]
	// Forwards whole payload of the alert to the webhook's url as POST data.
	ForwardWholePayload pulumix.Input[*bool]
	// The name of the outgoing webhook.
	Name pulumix.Input[*string]
	// The auth data of the webhook. Used for Basic authentication
	Password pulumix.Input[*string]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// The webhook URL.
	Url pulumix.Input[string]
	// The auth data of the webhook. Used for Basic authentication.
	User pulumix.Input[*string]
}

func (OncallOutgoingWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallOutgoingWebhookArgs)(nil)).Elem()
}

type OncallOutgoingWebhookOutput struct{ *pulumi.OutputState }

func (OncallOutgoingWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallOutgoingWebhook)(nil)).Elem()
}

func (o OncallOutgoingWebhookOutput) ToOncallOutgoingWebhookOutput() OncallOutgoingWebhookOutput {
	return o
}

func (o OncallOutgoingWebhookOutput) ToOncallOutgoingWebhookOutputWithContext(ctx context.Context) OncallOutgoingWebhookOutput {
	return o
}

func (o OncallOutgoingWebhookOutput) ToOutput(ctx context.Context) pulumix.Output[OncallOutgoingWebhook] {
	return pulumix.Output[OncallOutgoingWebhook]{
		OutputState: o.OutputState,
	}
}

// The auth data of the webhook. Used in Authorization header instead of user/password auth.
func (o OncallOutgoingWebhookOutput) AuthorizationHeader() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[*string] { return v.AuthorizationHeader })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The data of the webhook.
func (o OncallOutgoingWebhookOutput) Data() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[*string] { return v.Data })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Forwards whole payload of the alert to the webhook's url as POST data.
func (o OncallOutgoingWebhookOutput) ForwardWholePayload() pulumix.Output[*bool] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[*bool] { return v.ForwardWholePayload })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the outgoing webhook.
func (o OncallOutgoingWebhookOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The auth data of the webhook. Used for Basic authentication
func (o OncallOutgoingWebhookOutput) Password() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[*string] { return v.Password })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
func (o OncallOutgoingWebhookOutput) TeamId() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[*string] { return v.TeamId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The webhook URL.
func (o OncallOutgoingWebhookOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The auth data of the webhook. Used for Basic authentication.
func (o OncallOutgoingWebhookOutput) User() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOutgoingWebhook](o, func(v OncallOutgoingWebhook) pulumix.Output[*string] { return v.User })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(OncallOutgoingWebhookOutput{})
}
