// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Grafana dashboards.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewDashboard(ctx, "metrics", &grafana.DashboardArgs{
//				ConfigJson: readFileOrPanic("grafana-dashboard.json"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/dashboard:Dashboard dashboard_name {{dashboard_uid}} # To use the default provider org
//
// ```
//
// ```sh
//
//	$ pulumi import grafana:index/dashboard:Dashboard dashboard_name {{org_id}}:{{dashboard_uid}} # When "org_id" is set on the resource
//
// ```
type Dashboard struct {
	pulumi.CustomResourceState

	// The complete dashboard model JSON.
	ConfigJson pulumix.Output[string] `pulumi:"configJson"`
	// The numeric ID of the dashboard computed by Grafana.
	DashboardId pulumix.Output[int] `pulumi:"dashboardId"`
	// The id or UID of the folder to save the dashboard in.
	Folder pulumix.Output[*string] `pulumi:"folder"`
	// Set a commit message for the version history.
	Message pulumix.Output[*string] `pulumi:"message"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
	Overwrite pulumix.Output[*bool] `pulumi:"overwrite"`
	// The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
	Uid pulumix.Output[string] `pulumi:"uid"`
	// The full URL of the dashboard.
	Url pulumix.Output[string] `pulumi:"url"`
	// Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigJson == nil {
		return nil, errors.New("invalid value for required argument 'ConfigJson'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dashboard
	err := ctx.RegisterResource("grafana:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("grafana:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	// The complete dashboard model JSON.
	ConfigJson *string `pulumi:"configJson"`
	// The numeric ID of the dashboard computed by Grafana.
	DashboardId *int `pulumi:"dashboardId"`
	// The id or UID of the folder to save the dashboard in.
	Folder *string `pulumi:"folder"`
	// Set a commit message for the version history.
	Message *string `pulumi:"message"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
	Overwrite *bool `pulumi:"overwrite"`
	// The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
	Uid *string `pulumi:"uid"`
	// The full URL of the dashboard.
	Url *string `pulumi:"url"`
	// Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
	Version *int `pulumi:"version"`
}

type DashboardState struct {
	// The complete dashboard model JSON.
	ConfigJson pulumix.Input[*string]
	// The numeric ID of the dashboard computed by Grafana.
	DashboardId pulumix.Input[*int]
	// The id or UID of the folder to save the dashboard in.
	Folder pulumix.Input[*string]
	// Set a commit message for the version history.
	Message pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
	Overwrite pulumix.Input[*bool]
	// The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
	Uid pulumix.Input[*string]
	// The full URL of the dashboard.
	Url pulumix.Input[*string]
	// Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
	Version pulumix.Input[*int]
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// The complete dashboard model JSON.
	ConfigJson string `pulumi:"configJson"`
	// The id or UID of the folder to save the dashboard in.
	Folder *string `pulumi:"folder"`
	// Set a commit message for the version history.
	Message *string `pulumi:"message"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
	Overwrite *bool `pulumi:"overwrite"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The complete dashboard model JSON.
	ConfigJson pulumix.Input[string]
	// The id or UID of the folder to save the dashboard in.
	Folder pulumix.Input[*string]
	// Set a commit message for the version history.
	Message pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
	Overwrite pulumix.Input[*bool]
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func (o DashboardOutput) ToOutput(ctx context.Context) pulumix.Output[Dashboard] {
	return pulumix.Output[Dashboard]{
		OutputState: o.OutputState,
	}
}

// The complete dashboard model JSON.
func (o DashboardOutput) ConfigJson() pulumix.Output[string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[string] { return v.ConfigJson })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The numeric ID of the dashboard computed by Grafana.
func (o DashboardOutput) DashboardId() pulumix.Output[int] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[int] { return v.DashboardId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The id or UID of the folder to save the dashboard in.
func (o DashboardOutput) Folder() pulumix.Output[*string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[*string] { return v.Folder })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Set a commit message for the version history.
func (o DashboardOutput) Message() pulumix.Output[*string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[*string] { return v.Message })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o DashboardOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
func (o DashboardOutput) Overwrite() pulumix.Output[*bool] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[*bool] { return v.Overwrite })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
func (o DashboardOutput) Uid() pulumix.Output[string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[string] { return v.Uid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The full URL of the dashboard.
func (o DashboardOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
func (o DashboardOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[Dashboard](o, func(v Dashboard) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(DashboardOutput{})
}
