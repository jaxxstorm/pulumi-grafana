// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/team-management/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := grafana.NewTeam(ctx, "test", &grafana.TeamArgs{
//				Email: pulumi.String("test-team-email@test.com"),
//				Preferences: &grafana.TeamPreferencesArgs{
//					Theme:    pulumi.String("dark"),
//					Timezone: pulumi.String("utc"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = grafana.LookupTeamOutput(ctx, grafana.GetTeamOutputArgs{
//				Name: test.Name,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupTeam(ctx *pulumi.Context, args *LookupTeamArgs, opts ...pulumi.InvokeOption) (*LookupTeamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeamResult
	err := ctx.Invoke("grafana:index/getTeam:getTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeam.
type LookupTeamArgs struct {
	Name         string  `pulumi:"name"`
	OrgId        *string `pulumi:"orgId"`
	ReadTeamSync *bool   `pulumi:"readTeamSync"`
}

// A collection of values returned by getTeam.
type LookupTeamResult struct {
	Email string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id           string              `pulumi:"id"`
	Members      []string            `pulumi:"members"`
	Name         string              `pulumi:"name"`
	OrgId        *string             `pulumi:"orgId"`
	Preferences  []GetTeamPreference `pulumi:"preferences"`
	ReadTeamSync *bool               `pulumi:"readTeamSync"`
	TeamId       int                 `pulumi:"teamId"`
	TeamSyncs    []GetTeamTeamSync   `pulumi:"teamSyncs"`
}

func LookupTeamOutput(ctx *pulumi.Context, args LookupTeamOutputArgs, opts ...pulumi.InvokeOption) LookupTeamResultOutput {
	outputResult := pulumix.ApplyErr[*LookupTeamArgs](args.ToOutput(), func(plainArgs *LookupTeamArgs) (*LookupTeamResult, error) {
		return LookupTeam(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupTeamResultOutput, *LookupTeamResult](outputResult)
}

// A collection of arguments for invoking getTeam.
type LookupTeamOutputArgs struct {
	Name         pulumix.Input[string]  `pulumi:"name"`
	OrgId        pulumix.Input[*string] `pulumi:"orgId"`
	ReadTeamSync pulumix.Input[*bool]   `pulumi:"readTeamSync"`
}

func (args LookupTeamOutputArgs) ToOutput() pulumix.Output[*LookupTeamArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.OrgId.ToOutput(context.Background()).AsAny(),
		args.ReadTeamSync.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupTeamArgs {
		return &LookupTeamArgs{
			Name:         resolvedArgs[0].(string),
			OrgId:        resolvedArgs[1].(*string),
			ReadTeamSync: resolvedArgs[2].(*bool),
		}
	})
}

type LookupTeamResultOutput struct{ *pulumi.OutputState }

func (LookupTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamResult)(nil)).Elem()
}

func (o LookupTeamResultOutput) ToOutput(context.Context) pulumix.Output[*LookupTeamResult] {
	return pulumix.Output[*LookupTeamResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupTeamResultOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) string { return v.Email })
}

func (o LookupTeamResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) string { return v.Id })
}

func (o LookupTeamResultOutput) Members() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) []string { return v.Members })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupTeamResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) string { return v.Name })
}

func (o LookupTeamResultOutput) OrgId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) *string { return v.OrgId })
}

func (o LookupTeamResultOutput) Preferences() pulumix.GArrayOutput[GetTeamPreference, GetTeamPreferenceOutput] {
	value := pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) []GetTeamPreference { return v.Preferences })
	return pulumix.GArrayOutput[GetTeamPreference, GetTeamPreferenceOutput]{
		OutputState: value.OutputState,
	}
}

func (o LookupTeamResultOutput) ReadTeamSync() pulumix.Output[*bool] {
	return pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) *bool { return v.ReadTeamSync })
}

func (o LookupTeamResultOutput) TeamId() pulumix.Output[int] {
	return pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) int { return v.TeamId })
}

func (o LookupTeamResultOutput) TeamSyncs() pulumix.GArrayOutput[GetTeamTeamSync, GetTeamTeamSyncOutput] {
	value := pulumix.Apply[*LookupTeamResult](o, func(v *LookupTeamResult) []GetTeamTeamSync { return v.TeamSyncs })
	return pulumix.GArrayOutput[GetTeamTeamSync, GetTeamTeamSyncOutput]{
		OutputState: value.OutputState,
	}
}
