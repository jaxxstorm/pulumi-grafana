// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get details about a Grafana Datasource querying by either name, uid or ID
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"httpMethod":        "POST",
//				"prometheusType":    "Mimir",
//				"prometheusVersion": "2.4.0",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"basicAuthPassword": "password",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			prometheus, err := grafana.NewDataSource(ctx, "prometheus", &grafana.DataSourceArgs{
//				Type:                  pulumi.String("prometheus"),
//				Uid:                   pulumi.String("prometheus-ds-test-uid"),
//				Url:                   pulumi.String("https://my-instance.com"),
//				BasicAuthEnabled:      pulumi.Bool(true),
//				BasicAuthUsername:     pulumi.String("username"),
//				JsonDataEncoded:       pulumi.String(json0),
//				SecureJsonDataEncoded: pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			_ = grafana.LookupDataSourceOutput(ctx, grafana.GetDataSourceOutputArgs{
//				Name: prometheus.Name,
//			}, nil)
//			_ = grafana.LookupDataSourceOutput(ctx, grafana.GetDataSourceOutputArgs{
//				Id: prometheus.ID(),
//			}, nil)
//			_ = grafana.LookupDataSourceOutput(ctx, grafana.GetDataSourceOutputArgs{
//				Uid: prometheus.Uid,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupDataSource(ctx *pulumi.Context, args *LookupDataSourceArgs, opts ...pulumi.InvokeOption) (*LookupDataSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDataSourceResult
	err := ctx.Invoke("grafana:index/getDataSource:getDataSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataSource.
type LookupDataSourceArgs struct {
	// The ID of this resource.
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	Uid   *string `pulumi:"uid"`
}

// A collection of values returned by getDataSource.
type LookupDataSourceResult struct {
	// The method by which Grafana will access the data source: `proxy` or `direct`.
	AccessMode string `pulumi:"accessMode"`
	// Whether to enable basic auth for the data source.
	BasicAuthEnabled bool `pulumi:"basicAuthEnabled"`
	// Basic auth username.
	BasicAuthUsername string `pulumi:"basicAuthUsername"`
	// (Required by some data source types) The name of the database to use on the selected data source server.
	DatabaseName string `pulumi:"databaseName"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Whether to set the data source as default. This should only be `true` to a single data source.
	IsDefault bool `pulumi:"isDefault"`
	// Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data source. To figure out what options a datasource has available, see its docs or inspect the network data when saving it from the Grafana UI. Note that keys in this map are usually camelCased.
	JsonDataEncoded string `pulumi:"jsonDataEncoded"`
	Name            string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The data source type. Must be one of the supported data source keywords.
	Type string `pulumi:"type"`
	Uid  string `pulumi:"uid"`
	// The URL for the data source. The type of URL required varies depending on the chosen data source type.
	Url string `pulumi:"url"`
	// (Required by some data source types) The username to use to authenticate to the data source.
	Username string `pulumi:"username"`
}

func LookupDataSourceOutput(ctx *pulumi.Context, args LookupDataSourceOutputArgs, opts ...pulumi.InvokeOption) LookupDataSourceResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDataSourceArgs](args.ToOutput(), func(plainArgs *LookupDataSourceArgs) (*LookupDataSourceResult, error) {
		return LookupDataSource(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDataSourceResultOutput, *LookupDataSourceResult](outputResult)
}

// A collection of arguments for invoking getDataSource.
type LookupDataSourceOutputArgs struct {
	// The ID of this resource.
	Id   pulumix.Input[*string] `pulumi:"id"`
	Name pulumix.Input[*string] `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string] `pulumi:"orgId"`
	Uid   pulumix.Input[*string] `pulumi:"uid"`
}

func (args LookupDataSourceOutputArgs) ToOutput() pulumix.Output[*LookupDataSourceArgs] {
	allArgs := pulumix.All(
		args.Id.ToOutput(context.Background()).AsAny(),
		args.Name.ToOutput(context.Background()).AsAny(),
		args.OrgId.ToOutput(context.Background()).AsAny(),
		args.Uid.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDataSourceArgs {
		return &LookupDataSourceArgs{
			Id:    resolvedArgs[0].(*string),
			Name:  resolvedArgs[1].(*string),
			OrgId: resolvedArgs[2].(*string),
			Uid:   resolvedArgs[3].(*string),
		}
	})
}

type LookupDataSourceResultOutput struct{ *pulumi.OutputState }

func (LookupDataSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataSourceResult)(nil)).Elem()
}

func (o LookupDataSourceResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDataSourceResult] {
	return pulumix.Output[*LookupDataSourceResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDataSourceResultOutput) AccessMode() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.AccessMode })
}

func (o LookupDataSourceResultOutput) BasicAuthEnabled() pulumix.Output[bool] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) bool { return v.BasicAuthEnabled })
}

func (o LookupDataSourceResultOutput) BasicAuthUsername() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.BasicAuthUsername })
}

func (o LookupDataSourceResultOutput) DatabaseName() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.DatabaseName })
}

func (o LookupDataSourceResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.Id })
}

func (o LookupDataSourceResultOutput) IsDefault() pulumix.Output[bool] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) bool { return v.IsDefault })
}

func (o LookupDataSourceResultOutput) JsonDataEncoded() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.JsonDataEncoded })
}

func (o LookupDataSourceResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.Name })
}

func (o LookupDataSourceResultOutput) OrgId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) *string { return v.OrgId })
}

func (o LookupDataSourceResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.Type })
}

func (o LookupDataSourceResultOutput) Uid() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.Uid })
}

func (o LookupDataSourceResultOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.Url })
}

func (o LookupDataSourceResultOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[*LookupDataSourceResult](o, func(v *LookupDataSourceResult) string { return v.Username })
}
