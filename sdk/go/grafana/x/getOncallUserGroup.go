// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/user_groups/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.GetOncallUserGroup(ctx, &grafana.GetOncallUserGroupArgs{
//				SlackHandle: "example_slack_handle",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetOncallUserGroup(ctx *pulumi.Context, args *GetOncallUserGroupArgs, opts ...pulumi.InvokeOption) (*GetOncallUserGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOncallUserGroupResult
	err := ctx.Invoke("grafana:index/getOncallUserGroup:getOncallUserGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOncallUserGroup.
type GetOncallUserGroupArgs struct {
	SlackHandle string `pulumi:"slackHandle"`
}

// A collection of values returned by getOncallUserGroup.
type GetOncallUserGroupResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	SlackHandle string `pulumi:"slackHandle"`
	SlackId     string `pulumi:"slackId"`
}

func GetOncallUserGroupOutput(ctx *pulumi.Context, args GetOncallUserGroupOutputArgs, opts ...pulumi.InvokeOption) GetOncallUserGroupResultOutput {
	outputResult := pulumix.ApplyErr[*GetOncallUserGroupArgs](args.ToOutput(), func(plainArgs *GetOncallUserGroupArgs) (*GetOncallUserGroupResult, error) {
		return GetOncallUserGroup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetOncallUserGroupResultOutput, *GetOncallUserGroupResult](outputResult)
}

// A collection of arguments for invoking getOncallUserGroup.
type GetOncallUserGroupOutputArgs struct {
	SlackHandle pulumix.Input[string] `pulumi:"slackHandle"`
}

func (args GetOncallUserGroupOutputArgs) ToOutput() pulumix.Output[*GetOncallUserGroupArgs] {
	allArgs := pulumix.All(
		args.SlackHandle.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetOncallUserGroupArgs {
		return &GetOncallUserGroupArgs{
			SlackHandle: resolvedArgs[0].(string),
		}
	})
}

type GetOncallUserGroupResultOutput struct{ *pulumi.OutputState }

func (GetOncallUserGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOncallUserGroupResult)(nil)).Elem()
}

func (o GetOncallUserGroupResultOutput) ToOutput(context.Context) pulumix.Output[*GetOncallUserGroupResult] {
	return pulumix.Output[*GetOncallUserGroupResult]{
		OutputState: o.OutputState,
	}
}

func (o GetOncallUserGroupResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallUserGroupResult](o, func(v *GetOncallUserGroupResult) string { return v.Id })
}

func (o GetOncallUserGroupResultOutput) SlackHandle() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallUserGroupResult](o, func(v *GetOncallUserGroupResult) string { return v.SlackHandle })
}

func (o GetOncallUserGroupResultOutput) SlackId() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallUserGroupResult](o, func(v *GetOncallUserGroupResult) string { return v.SlackId })
}
