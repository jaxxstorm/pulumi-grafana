// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CloudStackApiKey struct {
	pulumi.CustomResourceState

	Expiration    pulumix.Output[string] `pulumi:"expiration"`
	Key           pulumix.Output[string] `pulumi:"key"`
	Name          pulumix.Output[string] `pulumi:"name"`
	Role          pulumix.Output[string] `pulumi:"role"`
	SecondsToLive pulumix.Output[*int]   `pulumi:"secondsToLive"`
	StackSlug     pulumix.Output[string] `pulumi:"stackSlug"`
}

// NewCloudStackApiKey registers a new resource with the given unique name, arguments, and options.
func NewCloudStackApiKey(ctx *pulumi.Context,
	name string, args *CloudStackApiKeyArgs, opts ...pulumi.ResourceOption) (*CloudStackApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.StackSlug == nil {
		return nil, errors.New("invalid value for required argument 'StackSlug'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudStackApiKey
	err := ctx.RegisterResource("grafana:index/cloudStackApiKey:CloudStackApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudStackApiKey gets an existing CloudStackApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudStackApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudStackApiKeyState, opts ...pulumi.ResourceOption) (*CloudStackApiKey, error) {
	var resource CloudStackApiKey
	err := ctx.ReadResource("grafana:index/cloudStackApiKey:CloudStackApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudStackApiKey resources.
type cloudStackApiKeyState struct {
	Expiration    *string `pulumi:"expiration"`
	Key           *string `pulumi:"key"`
	Name          *string `pulumi:"name"`
	Role          *string `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
	StackSlug     *string `pulumi:"stackSlug"`
}

type CloudStackApiKeyState struct {
	Expiration    pulumix.Input[*string]
	Key           pulumix.Input[*string]
	Name          pulumix.Input[*string]
	Role          pulumix.Input[*string]
	SecondsToLive pulumix.Input[*int]
	StackSlug     pulumix.Input[*string]
}

func (CloudStackApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackApiKeyState)(nil)).Elem()
}

type cloudStackApiKeyArgs struct {
	Name          *string `pulumi:"name"`
	Role          string  `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
	StackSlug     string  `pulumi:"stackSlug"`
}

// The set of arguments for constructing a CloudStackApiKey resource.
type CloudStackApiKeyArgs struct {
	Name          pulumix.Input[*string]
	Role          pulumix.Input[string]
	SecondsToLive pulumix.Input[*int]
	StackSlug     pulumix.Input[string]
}

func (CloudStackApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackApiKeyArgs)(nil)).Elem()
}

type CloudStackApiKeyOutput struct{ *pulumi.OutputState }

func (CloudStackApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudStackApiKey)(nil)).Elem()
}

func (o CloudStackApiKeyOutput) ToCloudStackApiKeyOutput() CloudStackApiKeyOutput {
	return o
}

func (o CloudStackApiKeyOutput) ToCloudStackApiKeyOutputWithContext(ctx context.Context) CloudStackApiKeyOutput {
	return o
}

func (o CloudStackApiKeyOutput) ToOutput(ctx context.Context) pulumix.Output[CloudStackApiKey] {
	return pulumix.Output[CloudStackApiKey]{
		OutputState: o.OutputState,
	}
}

func (o CloudStackApiKeyOutput) Expiration() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackApiKey](o, func(v CloudStackApiKey) pulumix.Output[string] { return v.Expiration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackApiKeyOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackApiKey](o, func(v CloudStackApiKey) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackApiKeyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackApiKey](o, func(v CloudStackApiKey) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackApiKeyOutput) Role() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackApiKey](o, func(v CloudStackApiKey) pulumix.Output[string] { return v.Role })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackApiKeyOutput) SecondsToLive() pulumix.Output[*int] {
	value := pulumix.Apply[CloudStackApiKey](o, func(v CloudStackApiKey) pulumix.Output[*int] { return v.SecondsToLive })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o CloudStackApiKeyOutput) StackSlug() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackApiKey](o, func(v CloudStackApiKey) pulumix.Output[string] { return v.StackSlug })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudStackApiKeyOutput{})
}
