// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This resource is available only with Grafana 9.1+.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := grafana.NewServiceAccountToken(ctx, "foo", &grafana.ServiceAccountTokenArgs{
//				ServiceAccountId: pulumi.String("1"),
//			})
//			if err != nil {
//				return err
//			}
//			bar, err := grafana.NewServiceAccountToken(ctx, "bar", &grafana.ServiceAccountTokenArgs{
//				ServiceAccountId: pulumi.String("1"),
//				SecondsToLive:    pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("serviceAccountTokenFooKeyOnly", foo.Key)
//			ctx.Export("serviceAccountTokenBar", bar)
//			return nil
//		})
//	}
//
// ```
type ServiceAccountToken struct {
	pulumi.CustomResourceState

	Expiration       pulumix.Output[string] `pulumi:"expiration"`
	HasExpired       pulumix.Output[bool]   `pulumi:"hasExpired"`
	Key              pulumix.Output[string] `pulumi:"key"`
	Name             pulumix.Output[string] `pulumi:"name"`
	SecondsToLive    pulumix.Output[*int]   `pulumi:"secondsToLive"`
	ServiceAccountId pulumix.Output[string] `pulumi:"serviceAccountId"`
}

// NewServiceAccountToken registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountToken(ctx *pulumi.Context,
	name string, args *ServiceAccountTokenArgs, opts ...pulumi.ResourceOption) (*ServiceAccountToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceAccountId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccountToken
	err := ctx.RegisterResource("grafana:index/serviceAccountToken:ServiceAccountToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountToken gets an existing ServiceAccountToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountTokenState, opts ...pulumi.ResourceOption) (*ServiceAccountToken, error) {
	var resource ServiceAccountToken
	err := ctx.ReadResource("grafana:index/serviceAccountToken:ServiceAccountToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountToken resources.
type serviceAccountTokenState struct {
	Expiration       *string `pulumi:"expiration"`
	HasExpired       *bool   `pulumi:"hasExpired"`
	Key              *string `pulumi:"key"`
	Name             *string `pulumi:"name"`
	SecondsToLive    *int    `pulumi:"secondsToLive"`
	ServiceAccountId *string `pulumi:"serviceAccountId"`
}

type ServiceAccountTokenState struct {
	Expiration       pulumix.Input[*string]
	HasExpired       pulumix.Input[*bool]
	Key              pulumix.Input[*string]
	Name             pulumix.Input[*string]
	SecondsToLive    pulumix.Input[*int]
	ServiceAccountId pulumix.Input[*string]
}

func (ServiceAccountTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokenState)(nil)).Elem()
}

type serviceAccountTokenArgs struct {
	Name             *string `pulumi:"name"`
	SecondsToLive    *int    `pulumi:"secondsToLive"`
	ServiceAccountId string  `pulumi:"serviceAccountId"`
}

// The set of arguments for constructing a ServiceAccountToken resource.
type ServiceAccountTokenArgs struct {
	Name             pulumix.Input[*string]
	SecondsToLive    pulumix.Input[*int]
	ServiceAccountId pulumix.Input[string]
}

func (ServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountTokenArgs)(nil)).Elem()
}

type ServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (ServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountToken)(nil)).Elem()
}

func (o ServiceAccountTokenOutput) ToServiceAccountTokenOutput() ServiceAccountTokenOutput {
	return o
}

func (o ServiceAccountTokenOutput) ToServiceAccountTokenOutputWithContext(ctx context.Context) ServiceAccountTokenOutput {
	return o
}

func (o ServiceAccountTokenOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountToken] {
	return pulumix.Output[ServiceAccountToken]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountTokenOutput) Expiration() pulumix.Output[string] {
	value := pulumix.Apply[ServiceAccountToken](o, func(v ServiceAccountToken) pulumix.Output[string] { return v.Expiration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ServiceAccountTokenOutput) HasExpired() pulumix.Output[bool] {
	value := pulumix.Apply[ServiceAccountToken](o, func(v ServiceAccountToken) pulumix.Output[bool] { return v.HasExpired })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func (o ServiceAccountTokenOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[ServiceAccountToken](o, func(v ServiceAccountToken) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ServiceAccountTokenOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ServiceAccountToken](o, func(v ServiceAccountToken) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ServiceAccountTokenOutput) SecondsToLive() pulumix.Output[*int] {
	value := pulumix.Apply[ServiceAccountToken](o, func(v ServiceAccountToken) pulumix.Output[*int] { return v.SecondsToLive })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o ServiceAccountTokenOutput) ServiceAccountId() pulumix.Output[string] {
	value := pulumix.Apply[ServiceAccountToken](o, func(v ServiceAccountToken) pulumix.Output[string] { return v.ServiceAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServiceAccountTokenOutput{})
}
