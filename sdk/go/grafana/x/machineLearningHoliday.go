// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A holiday describes time periods where a time series is expected to behave differently to normal.
//
// To use a holiday in a job, use its id in the `holidays` attribute of a `MachineLearningJob`:
type MachineLearningHoliday struct {
	pulumi.CustomResourceState

	// A list of custom periods for the holiday.
	CustomPeriods pulumix.GArrayOutput[MachineLearningHolidayCustomPeriod, MachineLearningHolidayCustomPeriodOutput] `pulumi:"customPeriods"`
	// A description of the holiday.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The timezone to use for events in the iCal file pointed to by ical_url.
	IcalTimezone pulumix.Output[*string] `pulumi:"icalTimezone"`
	// A URL to an iCal file containing all occurrences of the holiday.
	IcalUrl pulumix.Output[*string] `pulumi:"icalUrl"`
	// The name of the holiday.
	Name pulumix.Output[string] `pulumi:"name"`
}

// NewMachineLearningHoliday registers a new resource with the given unique name, arguments, and options.
func NewMachineLearningHoliday(ctx *pulumi.Context,
	name string, args *MachineLearningHolidayArgs, opts ...pulumi.ResourceOption) (*MachineLearningHoliday, error) {
	if args == nil {
		args = &MachineLearningHolidayArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MachineLearningHoliday
	err := ctx.RegisterResource("grafana:index/machineLearningHoliday:MachineLearningHoliday", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineLearningHoliday gets an existing MachineLearningHoliday resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineLearningHoliday(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineLearningHolidayState, opts ...pulumi.ResourceOption) (*MachineLearningHoliday, error) {
	var resource MachineLearningHoliday
	err := ctx.ReadResource("grafana:index/machineLearningHoliday:MachineLearningHoliday", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineLearningHoliday resources.
type machineLearningHolidayState struct {
	// A list of custom periods for the holiday.
	CustomPeriods []MachineLearningHolidayCustomPeriod `pulumi:"customPeriods"`
	// A description of the holiday.
	Description *string `pulumi:"description"`
	// The timezone to use for events in the iCal file pointed to by ical_url.
	IcalTimezone *string `pulumi:"icalTimezone"`
	// A URL to an iCal file containing all occurrences of the holiday.
	IcalUrl *string `pulumi:"icalUrl"`
	// The name of the holiday.
	Name *string `pulumi:"name"`
}

type MachineLearningHolidayState struct {
	// A list of custom periods for the holiday.
	CustomPeriods pulumix.Input[[]*MachineLearningHolidayCustomPeriodArgs]
	// A description of the holiday.
	Description pulumix.Input[*string]
	// The timezone to use for events in the iCal file pointed to by ical_url.
	IcalTimezone pulumix.Input[*string]
	// A URL to an iCal file containing all occurrences of the holiday.
	IcalUrl pulumix.Input[*string]
	// The name of the holiday.
	Name pulumix.Input[*string]
}

func (MachineLearningHolidayState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningHolidayState)(nil)).Elem()
}

type machineLearningHolidayArgs struct {
	// A list of custom periods for the holiday.
	CustomPeriods []MachineLearningHolidayCustomPeriod `pulumi:"customPeriods"`
	// A description of the holiday.
	Description *string `pulumi:"description"`
	// The timezone to use for events in the iCal file pointed to by ical_url.
	IcalTimezone *string `pulumi:"icalTimezone"`
	// A URL to an iCal file containing all occurrences of the holiday.
	IcalUrl *string `pulumi:"icalUrl"`
	// The name of the holiday.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MachineLearningHoliday resource.
type MachineLearningHolidayArgs struct {
	// A list of custom periods for the holiday.
	CustomPeriods pulumix.Input[[]*MachineLearningHolidayCustomPeriodArgs]
	// A description of the holiday.
	Description pulumix.Input[*string]
	// The timezone to use for events in the iCal file pointed to by ical_url.
	IcalTimezone pulumix.Input[*string]
	// A URL to an iCal file containing all occurrences of the holiday.
	IcalUrl pulumix.Input[*string]
	// The name of the holiday.
	Name pulumix.Input[*string]
}

func (MachineLearningHolidayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningHolidayArgs)(nil)).Elem()
}

type MachineLearningHolidayOutput struct{ *pulumi.OutputState }

func (MachineLearningHolidayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningHoliday)(nil)).Elem()
}

func (o MachineLearningHolidayOutput) ToMachineLearningHolidayOutput() MachineLearningHolidayOutput {
	return o
}

func (o MachineLearningHolidayOutput) ToMachineLearningHolidayOutputWithContext(ctx context.Context) MachineLearningHolidayOutput {
	return o
}

func (o MachineLearningHolidayOutput) ToOutput(ctx context.Context) pulumix.Output[MachineLearningHoliday] {
	return pulumix.Output[MachineLearningHoliday]{
		OutputState: o.OutputState,
	}
}

// A list of custom periods for the holiday.
func (o MachineLearningHolidayOutput) CustomPeriods() pulumix.GArrayOutput[MachineLearningHolidayCustomPeriod, MachineLearningHolidayCustomPeriodOutput] {
	value := pulumix.Apply[MachineLearningHoliday](o, func(v MachineLearningHoliday) pulumix.GArrayOutput[MachineLearningHolidayCustomPeriod, MachineLearningHolidayCustomPeriodOutput] {
		return v.CustomPeriods
	})
	unwrapped := pulumix.Flatten[[]MachineLearningHolidayCustomPeriod, pulumix.GArrayOutput[MachineLearningHolidayCustomPeriod, MachineLearningHolidayCustomPeriodOutput]](value)
	return pulumix.GArrayOutput[MachineLearningHolidayCustomPeriod, MachineLearningHolidayCustomPeriodOutput]{OutputState: unwrapped.OutputState}
}

// A description of the holiday.
func (o MachineLearningHolidayOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[MachineLearningHoliday](o, func(v MachineLearningHoliday) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The timezone to use for events in the iCal file pointed to by ical_url.
func (o MachineLearningHolidayOutput) IcalTimezone() pulumix.Output[*string] {
	value := pulumix.Apply[MachineLearningHoliday](o, func(v MachineLearningHoliday) pulumix.Output[*string] { return v.IcalTimezone })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A URL to an iCal file containing all occurrences of the holiday.
func (o MachineLearningHolidayOutput) IcalUrl() pulumix.Output[*string] {
	value := pulumix.Apply[MachineLearningHoliday](o, func(v MachineLearningHoliday) pulumix.Output[*string] { return v.IcalUrl })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The name of the holiday.
func (o MachineLearningHolidayOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MachineLearningHoliday](o, func(v MachineLearningHoliday) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(MachineLearningHolidayOutput{})
}
