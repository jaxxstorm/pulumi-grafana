// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/datasource_permissions/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := grafana.NewTeam(ctx, "team", nil)
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"defaultRegion": "us-east-1",
//				"authType":      "keys",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"accessKey": "123",
//				"secretKey": "456",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			foo, err := grafana.NewDataSource(ctx, "foo", &grafana.DataSourceArgs{
//				Type:                  pulumi.String("cloudwatch"),
//				JsonDataEncoded:       pulumi.String(json0),
//				SecureJsonDataEncoded: pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			user, err := grafana.NewUser(ctx, "user", &grafana.UserArgs{
//				Email:    pulumi.String("test-ds-permissions@example.com"),
//				Login:    pulumi.String("test-ds-permissions"),
//				Password: pulumi.String("hunter2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewDataSourcePermission(ctx, "fooPermissions", &grafana.DataSourcePermissionArgs{
//				DatasourceId: foo.ID(),
//				Permissions: grafana.DataSourcePermissionPermissionArray{
//					&grafana.DataSourcePermissionPermissionArgs{
//						TeamId:     team.ID(),
//						Permission: pulumi.String("Query"),
//					},
//					&grafana.DataSourcePermissionPermissionArgs{
//						UserId:     user.ID(),
//						Permission: pulumi.String("Edit"),
//					},
//					&grafana.DataSourcePermissionPermissionArgs{
//						BuiltInRole: pulumi.String("Viewer"),
//						Permission:  pulumi.String("Query"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DataSourcePermission struct {
	pulumi.CustomResourceState

	// ID of the datasource to apply permissions to.
	DatasourceId pulumix.Output[string] `pulumi:"datasourceId"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.GArrayOutput[DataSourcePermissionPermission, DataSourcePermissionPermissionOutput] `pulumi:"permissions"`
}

// NewDataSourcePermission registers a new resource with the given unique name, arguments, and options.
func NewDataSourcePermission(ctx *pulumi.Context,
	name string, args *DataSourcePermissionArgs, opts ...pulumi.ResourceOption) (*DataSourcePermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasourceId == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceId'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSourcePermission
	err := ctx.RegisterResource("grafana:index/dataSourcePermission:DataSourcePermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSourcePermission gets an existing DataSourcePermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSourcePermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourcePermissionState, opts ...pulumi.ResourceOption) (*DataSourcePermission, error) {
	var resource DataSourcePermission
	err := ctx.ReadResource("grafana:index/dataSourcePermission:DataSourcePermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSourcePermission resources.
type dataSourcePermissionState struct {
	// ID of the datasource to apply permissions to.
	DatasourceId *string `pulumi:"datasourceId"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []DataSourcePermissionPermission `pulumi:"permissions"`
}

type DataSourcePermissionState struct {
	// ID of the datasource to apply permissions to.
	DatasourceId pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*DataSourcePermissionPermissionArgs]
}

func (DataSourcePermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourcePermissionState)(nil)).Elem()
}

type dataSourcePermissionArgs struct {
	// ID of the datasource to apply permissions to.
	DatasourceId string `pulumi:"datasourceId"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []DataSourcePermissionPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a DataSourcePermission resource.
type DataSourcePermissionArgs struct {
	// ID of the datasource to apply permissions to.
	DatasourceId pulumix.Input[string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*DataSourcePermissionPermissionArgs]
}

func (DataSourcePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourcePermissionArgs)(nil)).Elem()
}

type DataSourcePermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermission)(nil)).Elem()
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutput() DataSourcePermissionOutput {
	return o
}

func (o DataSourcePermissionOutput) ToDataSourcePermissionOutputWithContext(ctx context.Context) DataSourcePermissionOutput {
	return o
}

func (o DataSourcePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourcePermission] {
	return pulumix.Output[DataSourcePermission]{
		OutputState: o.OutputState,
	}
}

// ID of the datasource to apply permissions to.
func (o DataSourcePermissionOutput) DatasourceId() pulumix.Output[string] {
	value := pulumix.Apply[DataSourcePermission](o, func(v DataSourcePermission) pulumix.Output[string] { return v.DatasourceId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o DataSourcePermissionOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[DataSourcePermission](o, func(v DataSourcePermission) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The permission items to add/update. Items that are omitted from the list will be removed.
func (o DataSourcePermissionOutput) Permissions() pulumix.GArrayOutput[DataSourcePermissionPermission, DataSourcePermissionPermissionOutput] {
	value := pulumix.Apply[DataSourcePermission](o, func(v DataSourcePermission) pulumix.GArrayOutput[DataSourcePermissionPermission, DataSourcePermissionPermissionOutput] {
		return v.Permissions
	})
	unwrapped := pulumix.Flatten[[]DataSourcePermissionPermission, pulumix.GArrayOutput[DataSourcePermissionPermission, DataSourcePermissionPermissionOutput]](value)
	return pulumix.GArrayOutput[DataSourcePermissionPermission, DataSourcePermissionPermissionOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DataSourcePermissionOutput{})
}
