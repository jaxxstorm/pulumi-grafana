// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
//
// This resource represents an instance-scoped resource and uses Grafana's admin APIs.
// It does not work with API tokens or service accounts which are org-scoped.
// You must use basic auth.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewUser(ctx, "staff", &grafana.UserArgs{
//				Email:    pulumi.String("staff.name@example.com"),
//				IsAdmin:  pulumi.Bool(false),
//				Login:    pulumi.String("staff"),
//				Password: pulumi.String("my-password"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/user:User user_name {{user_id}}
//
// ```
type User struct {
	pulumi.CustomResourceState

	// The email address of the Grafana user.
	Email pulumix.Output[string] `pulumi:"email"`
	// Whether to make user an admin. Defaults to `false`.
	IsAdmin pulumix.Output[*bool] `pulumi:"isAdmin"`
	// The username for the Grafana user.
	Login pulumix.Output[*string] `pulumi:"login"`
	// The display name for the Grafana user.
	Name pulumix.Output[string] `pulumi:"name"`
	// The password for the Grafana user.
	Password pulumix.Output[string] `pulumi:"password"`
	// The numerical ID of the Grafana user.
	UserId pulumix.Output[int] `pulumi:"userId"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		untypedSecretValue := pulumi.ToSecret(args.Password.ToOutput(ctx.Context()).Untyped())
		args.Password = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("grafana:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("grafana:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// The email address of the Grafana user.
	Email *string `pulumi:"email"`
	// Whether to make user an admin. Defaults to `false`.
	IsAdmin *bool `pulumi:"isAdmin"`
	// The username for the Grafana user.
	Login *string `pulumi:"login"`
	// The display name for the Grafana user.
	Name *string `pulumi:"name"`
	// The password for the Grafana user.
	Password *string `pulumi:"password"`
	// The numerical ID of the Grafana user.
	UserId *int `pulumi:"userId"`
}

type UserState struct {
	// The email address of the Grafana user.
	Email pulumix.Input[*string]
	// Whether to make user an admin. Defaults to `false`.
	IsAdmin pulumix.Input[*bool]
	// The username for the Grafana user.
	Login pulumix.Input[*string]
	// The display name for the Grafana user.
	Name pulumix.Input[*string]
	// The password for the Grafana user.
	Password pulumix.Input[*string]
	// The numerical ID of the Grafana user.
	UserId pulumix.Input[*int]
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The email address of the Grafana user.
	Email string `pulumi:"email"`
	// Whether to make user an admin. Defaults to `false`.
	IsAdmin *bool `pulumi:"isAdmin"`
	// The username for the Grafana user.
	Login *string `pulumi:"login"`
	// The display name for the Grafana user.
	Name *string `pulumi:"name"`
	// The password for the Grafana user.
	Password string `pulumi:"password"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The email address of the Grafana user.
	Email pulumix.Input[string]
	// Whether to make user an admin. Defaults to `false`.
	IsAdmin pulumix.Input[*bool]
	// The username for the Grafana user.
	Login pulumix.Input[*string]
	// The display name for the Grafana user.
	Name pulumix.Input[*string]
	// The password for the Grafana user.
	Password pulumix.Input[string]
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) ToOutput(ctx context.Context) pulumix.Output[User] {
	return pulumix.Output[User]{
		OutputState: o.OutputState,
	}
}

// The email address of the Grafana user.
func (o UserOutput) Email() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Email })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to make user an admin. Defaults to `false`.
func (o UserOutput) IsAdmin() pulumix.Output[*bool] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*bool] { return v.IsAdmin })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The username for the Grafana user.
func (o UserOutput) Login() pulumix.Output[*string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[*string] { return v.Login })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The display name for the Grafana user.
func (o UserOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The password for the Grafana user.
func (o UserOutput) Password() pulumix.Output[string] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[string] { return v.Password })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The numerical ID of the Grafana user.
func (o UserOutput) UserId() pulumix.Output[int] {
	value := pulumix.Apply[User](o, func(v User) pulumix.Output[int] { return v.UserId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
