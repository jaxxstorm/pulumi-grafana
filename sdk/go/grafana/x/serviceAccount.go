// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This resource is available only with Grafana 9.1+.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewServiceAccount(ctx, "admin", &grafana.ServiceAccountArgs{
//				IsDisabled: pulumi.Bool(false),
//				Role:       pulumi.String("Admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServiceAccount struct {
	pulumi.CustomResourceState

	// The disabled status for the service account. Defaults to `false`.
	IsDisabled pulumix.Output[*bool] `pulumi:"isDisabled"`
	// The name of the service account.
	Name pulumix.Output[string] `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// The basic role of the service account in the organization.
	Role pulumix.Output[*string] `pulumi:"role"`
}

// NewServiceAccount registers a new resource with the given unique name, arguments, and options.
func NewServiceAccount(ctx *pulumi.Context,
	name string, args *ServiceAccountArgs, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	if args == nil {
		args = &ServiceAccountArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccount
	err := ctx.RegisterResource("grafana:index/serviceAccount:ServiceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccount gets an existing ServiceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountState, opts ...pulumi.ResourceOption) (*ServiceAccount, error) {
	var resource ServiceAccount
	err := ctx.ReadResource("grafana:index/serviceAccount:ServiceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccount resources.
type serviceAccountState struct {
	// The disabled status for the service account. Defaults to `false`.
	IsDisabled *bool `pulumi:"isDisabled"`
	// The name of the service account.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The basic role of the service account in the organization.
	Role *string `pulumi:"role"`
}

type ServiceAccountState struct {
	// The disabled status for the service account. Defaults to `false`.
	IsDisabled pulumix.Input[*bool]
	// The name of the service account.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The basic role of the service account in the organization.
	Role pulumix.Input[*string]
}

func (ServiceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountState)(nil)).Elem()
}

type serviceAccountArgs struct {
	// The disabled status for the service account. Defaults to `false`.
	IsDisabled *bool `pulumi:"isDisabled"`
	// The name of the service account.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The basic role of the service account in the organization.
	Role *string `pulumi:"role"`
}

// The set of arguments for constructing a ServiceAccount resource.
type ServiceAccountArgs struct {
	// The disabled status for the service account. Defaults to `false`.
	IsDisabled pulumix.Input[*bool]
	// The name of the service account.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The basic role of the service account in the organization.
	Role pulumix.Input[*string]
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountArgs)(nil)).Elem()
}

type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccount] {
	return pulumix.Output[ServiceAccount]{
		OutputState: o.OutputState,
	}
}

// The disabled status for the service account. Defaults to `false`.
func (o ServiceAccountOutput) IsDisabled() pulumix.Output[*bool] {
	value := pulumix.Apply[ServiceAccount](o, func(v ServiceAccount) pulumix.Output[*bool] { return v.IsDisabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The name of the service account.
func (o ServiceAccountOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ServiceAccount](o, func(v ServiceAccount) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o ServiceAccountOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[ServiceAccount](o, func(v ServiceAccount) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The basic role of the service account in the organization.
func (o ServiceAccountOutput) Role() pulumix.Output[*string] {
	value := pulumix.Apply[ServiceAccount](o, func(v ServiceAccount) pulumix.Output[*string] { return v.Role })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServiceAccountOutput{})
}
