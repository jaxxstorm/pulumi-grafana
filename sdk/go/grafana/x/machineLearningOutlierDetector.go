// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An outlier detector monitors the results of a query and reports when its values are outside normal bands.
//
// The normal band is configured by choice of algorithm, its sensitivity and other configuration.
//
// Visit https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for more details.
type MachineLearningOutlierDetector struct {
	pulumi.CustomResourceState

	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm pulumix.GPtrOutput[MachineLearningOutlierDetectorAlgorithm, MachineLearningOutlierDetectorAlgorithmOutput] `pulumi:"algorithm"`
	// The id of the datasource to query.
	DatasourceId pulumix.Output[*int] `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumix.Output[string] `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid pulumix.Output[*string] `pulumi:"datasourceUid"`
	// A description of the outlier detector.
	Description pulumix.Output[*string] `pulumi:"description"`
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval pulumix.Output[*int] `pulumi:"interval"`
	// The metric used to query the outlier detector results.
	Metric pulumix.Output[string] `pulumi:"metric"`
	// The name of the outlier detector.
	Name pulumix.Output[string] `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams pulumix.MapOutput[any] `pulumi:"queryParams"`
}

// NewMachineLearningOutlierDetector registers a new resource with the given unique name, arguments, and options.
func NewMachineLearningOutlierDetector(ctx *pulumi.Context,
	name string, args *MachineLearningOutlierDetectorArgs, opts ...pulumi.ResourceOption) (*MachineLearningOutlierDetector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.DatasourceType == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceType'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.QueryParams == nil {
		return nil, errors.New("invalid value for required argument 'QueryParams'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MachineLearningOutlierDetector
	err := ctx.RegisterResource("grafana:index/machineLearningOutlierDetector:MachineLearningOutlierDetector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineLearningOutlierDetector gets an existing MachineLearningOutlierDetector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineLearningOutlierDetector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineLearningOutlierDetectorState, opts ...pulumi.ResourceOption) (*MachineLearningOutlierDetector, error) {
	var resource MachineLearningOutlierDetector
	err := ctx.ReadResource("grafana:index/machineLearningOutlierDetector:MachineLearningOutlierDetector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineLearningOutlierDetector resources.
type machineLearningOutlierDetectorState struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm *MachineLearningOutlierDetectorAlgorithm `pulumi:"algorithm"`
	// The id of the datasource to query.
	DatasourceId *int `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType *string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// A description of the outlier detector.
	Description *string `pulumi:"description"`
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval *int `pulumi:"interval"`
	// The metric used to query the outlier detector results.
	Metric *string `pulumi:"metric"`
	// The name of the outlier detector.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]interface{} `pulumi:"queryParams"`
}

type MachineLearningOutlierDetectorState struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm pulumix.Input[*MachineLearningOutlierDetectorAlgorithmArgs]
	// The id of the datasource to query.
	DatasourceId pulumix.Input[*int]
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumix.Input[*string]
	// The uid of the datasource to query.
	DatasourceUid pulumix.Input[*string]
	// A description of the outlier detector.
	Description pulumix.Input[*string]
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval pulumix.Input[*int]
	// The metric used to query the outlier detector results.
	Metric pulumix.Input[*string]
	// The name of the outlier detector.
	Name pulumix.Input[*string]
	// An object representing the query params to query Grafana with.
	QueryParams pulumix.Input[map[string]any]
}

func (MachineLearningOutlierDetectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningOutlierDetectorState)(nil)).Elem()
}

type machineLearningOutlierDetectorArgs struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm MachineLearningOutlierDetectorAlgorithm `pulumi:"algorithm"`
	// The id of the datasource to query.
	DatasourceId *int `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// A description of the outlier detector.
	Description *string `pulumi:"description"`
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval *int `pulumi:"interval"`
	// The metric used to query the outlier detector results.
	Metric string `pulumi:"metric"`
	// The name of the outlier detector.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]interface{} `pulumi:"queryParams"`
}

// The set of arguments for constructing a MachineLearningOutlierDetector resource.
type MachineLearningOutlierDetectorArgs struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm pulumix.Input[*MachineLearningOutlierDetectorAlgorithmArgs]
	// The id of the datasource to query.
	DatasourceId pulumix.Input[*int]
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumix.Input[string]
	// The uid of the datasource to query.
	DatasourceUid pulumix.Input[*string]
	// A description of the outlier detector.
	Description pulumix.Input[*string]
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval pulumix.Input[*int]
	// The metric used to query the outlier detector results.
	Metric pulumix.Input[string]
	// The name of the outlier detector.
	Name pulumix.Input[*string]
	// An object representing the query params to query Grafana with.
	QueryParams pulumix.Input[map[string]any]
}

func (MachineLearningOutlierDetectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningOutlierDetectorArgs)(nil)).Elem()
}

type MachineLearningOutlierDetectorOutput struct{ *pulumi.OutputState }

func (MachineLearningOutlierDetectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetector)(nil)).Elem()
}

func (o MachineLearningOutlierDetectorOutput) ToMachineLearningOutlierDetectorOutput() MachineLearningOutlierDetectorOutput {
	return o
}

func (o MachineLearningOutlierDetectorOutput) ToMachineLearningOutlierDetectorOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorOutput {
	return o
}

func (o MachineLearningOutlierDetectorOutput) ToOutput(ctx context.Context) pulumix.Output[MachineLearningOutlierDetector] {
	return pulumix.Output[MachineLearningOutlierDetector]{
		OutputState: o.OutputState,
	}
}

// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
func (o MachineLearningOutlierDetectorOutput) Algorithm() pulumix.GPtrOutput[MachineLearningOutlierDetectorAlgorithm, MachineLearningOutlierDetectorAlgorithmOutput] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.GPtrOutput[MachineLearningOutlierDetectorAlgorithm, MachineLearningOutlierDetectorAlgorithmOutput] {
		return v.Algorithm
	})
	unwrapped := pulumix.Flatten[*MachineLearningOutlierDetectorAlgorithm, pulumix.GPtrOutput[MachineLearningOutlierDetectorAlgorithm, MachineLearningOutlierDetectorAlgorithmOutput]](value)
	return pulumix.GPtrOutput[MachineLearningOutlierDetectorAlgorithm, MachineLearningOutlierDetectorAlgorithmOutput]{OutputState: unwrapped.OutputState}
}

// The id of the datasource to query.
func (o MachineLearningOutlierDetectorOutput) DatasourceId() pulumix.Output[*int] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.Output[*int] { return v.DatasourceId })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
func (o MachineLearningOutlierDetectorOutput) DatasourceType() pulumix.Output[string] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.Output[string] { return v.DatasourceType })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The uid of the datasource to query.
func (o MachineLearningOutlierDetectorOutput) DatasourceUid() pulumix.Output[*string] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.Output[*string] { return v.DatasourceUid })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A description of the outlier detector.
func (o MachineLearningOutlierDetectorOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The data interval in seconds to monitor. Defaults to `300`.
func (o MachineLearningOutlierDetectorOutput) Interval() pulumix.Output[*int] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.Output[*int] { return v.Interval })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The metric used to query the outlier detector results.
func (o MachineLearningOutlierDetectorOutput) Metric() pulumix.Output[string] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.Output[string] { return v.Metric })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the outlier detector.
func (o MachineLearningOutlierDetectorOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// An object representing the query params to query Grafana with.
func (o MachineLearningOutlierDetectorOutput) QueryParams() pulumix.MapOutput[any] {
	value := pulumix.Apply[MachineLearningOutlierDetector](o, func(v MachineLearningOutlierDetector) pulumix.MapOutput[any] { return v.QueryParams })
	unwrapped := pulumix.Flatten[map[string]interface{}, pulumix.MapOutput[any]](value)
	return pulumix.MapOutput[any]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(MachineLearningOutlierDetectorOutput{})
}
