// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Grafana Alerting contact points.
//
// * [Official documentation](https://grafana.com/docs/grafana/next/alerting/fundamentals/contact-points/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#contact-points)
//
// This resource requires Grafana 9.1.0 or later.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewContactPoint(ctx, "myContactPoint", &grafana.ContactPointArgs{
//				Emails: grafana.ContactPointEmailArray{
//					&grafana.ContactPointEmailArgs{
//						Addresses: pulumi.StringArray{
//							pulumi.String("one@company.org"),
//							pulumi.String("two@company.org"),
//						},
//						DisableResolveMessage: pulumi.Bool(false),
//						Message:               pulumi.String("{{ len .Alerts.Firing }} firing."),
//						SingleEmail:           pulumi.Bool(true),
//						Subject:               pulumi.String("{{ template \"default.title\" .}}"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/contactPoint:ContactPoint contact_point_name {{contact_point_name}}
//
// ```
type ContactPoint struct {
	pulumi.CustomResourceState

	// A contact point that sends notifications to other Alertmanager instances.
	Alertmanagers pulumix.GArrayOutput[ContactPointAlertmanager, ContactPointAlertmanagerOutput] `pulumi:"alertmanagers"`
	// A contact point that sends notifications to DingDing.
	Dingdings pulumix.GArrayOutput[ContactPointDingding, ContactPointDingdingOutput] `pulumi:"dingdings"`
	// A contact point that sends notifications as Discord messages
	Discords pulumix.GArrayOutput[ContactPointDiscord, ContactPointDiscordOutput] `pulumi:"discords"`
	// A contact point that sends notifications to an email address.
	Emails pulumix.GArrayOutput[ContactPointEmail, ContactPointEmailOutput] `pulumi:"emails"`
	// A contact point that sends notifications to Google Chat.
	Googlechats pulumix.GArrayOutput[ContactPointGooglechat, ContactPointGooglechatOutput] `pulumi:"googlechats"`
	// A contact point that publishes notifications to Apache Kafka topics.
	Kafkas pulumix.GArrayOutput[ContactPointKafka, ContactPointKafkaOutput] `pulumi:"kafkas"`
	// The name of the contact point.
	Name pulumix.Output[string] `pulumi:"name"`
	// A contact point that sends notifications to OpsGenie.
	Opsgenies pulumix.GArrayOutput[ContactPointOpsgeny, ContactPointOpsgenyOutput] `pulumi:"opsgenies"`
	// A contact point that sends notifications to PagerDuty.
	Pagerduties pulumix.GArrayOutput[ContactPointPagerduty, ContactPointPagerdutyOutput] `pulumi:"pagerduties"`
	// A contact point that sends notifications to Pushover.
	Pushovers pulumix.GArrayOutput[ContactPointPushover, ContactPointPushoverOutput] `pulumi:"pushovers"`
	// A contact point that sends notifications to SensuGo.
	Sensugos pulumix.GArrayOutput[ContactPointSensugo, ContactPointSensugoOutput] `pulumi:"sensugos"`
	// A contact point that sends notifications to Slack.
	Slacks pulumix.GArrayOutput[ContactPointSlack, ContactPointSlackOutput] `pulumi:"slacks"`
	// A contact point that sends notifications to Microsoft Teams.
	Teams pulumix.GArrayOutput[ContactPointTeam, ContactPointTeamOutput] `pulumi:"teams"`
	// A contact point that sends notifications to Telegram.
	Telegrams pulumix.GArrayOutput[ContactPointTelegram, ContactPointTelegramOutput] `pulumi:"telegrams"`
	// A contact point that sends notifications to Threema.
	Threemas pulumix.GArrayOutput[ContactPointThreema, ContactPointThreemaOutput] `pulumi:"threemas"`
	// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
	Victorops pulumix.GArrayOutput[ContactPointVictorop, ContactPointVictoropOutput] `pulumi:"victorops"`
	// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
	Webhooks pulumix.GArrayOutput[ContactPointWebhook, ContactPointWebhookOutput] `pulumi:"webhooks"`
	// A contact point that sends notifications to WeCom.
	Wecoms pulumix.GArrayOutput[ContactPointWecom, ContactPointWecomOutput] `pulumi:"wecoms"`
}

// NewContactPoint registers a new resource with the given unique name, arguments, and options.
func NewContactPoint(ctx *pulumi.Context,
	name string, args *ContactPointArgs, opts ...pulumi.ResourceOption) (*ContactPoint, error) {
	if args == nil {
		args = &ContactPointArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContactPoint
	err := ctx.RegisterResource("grafana:index/contactPoint:ContactPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactPoint gets an existing ContactPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactPointState, opts ...pulumi.ResourceOption) (*ContactPoint, error) {
	var resource ContactPoint
	err := ctx.ReadResource("grafana:index/contactPoint:ContactPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactPoint resources.
type contactPointState struct {
	// A contact point that sends notifications to other Alertmanager instances.
	Alertmanagers []ContactPointAlertmanager `pulumi:"alertmanagers"`
	// A contact point that sends notifications to DingDing.
	Dingdings []ContactPointDingding `pulumi:"dingdings"`
	// A contact point that sends notifications as Discord messages
	Discords []ContactPointDiscord `pulumi:"discords"`
	// A contact point that sends notifications to an email address.
	Emails []ContactPointEmail `pulumi:"emails"`
	// A contact point that sends notifications to Google Chat.
	Googlechats []ContactPointGooglechat `pulumi:"googlechats"`
	// A contact point that publishes notifications to Apache Kafka topics.
	Kafkas []ContactPointKafka `pulumi:"kafkas"`
	// The name of the contact point.
	Name *string `pulumi:"name"`
	// A contact point that sends notifications to OpsGenie.
	Opsgenies []ContactPointOpsgeny `pulumi:"opsgenies"`
	// A contact point that sends notifications to PagerDuty.
	Pagerduties []ContactPointPagerduty `pulumi:"pagerduties"`
	// A contact point that sends notifications to Pushover.
	Pushovers []ContactPointPushover `pulumi:"pushovers"`
	// A contact point that sends notifications to SensuGo.
	Sensugos []ContactPointSensugo `pulumi:"sensugos"`
	// A contact point that sends notifications to Slack.
	Slacks []ContactPointSlack `pulumi:"slacks"`
	// A contact point that sends notifications to Microsoft Teams.
	Teams []ContactPointTeam `pulumi:"teams"`
	// A contact point that sends notifications to Telegram.
	Telegrams []ContactPointTelegram `pulumi:"telegrams"`
	// A contact point that sends notifications to Threema.
	Threemas []ContactPointThreema `pulumi:"threemas"`
	// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
	Victorops []ContactPointVictorop `pulumi:"victorops"`
	// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
	Webhooks []ContactPointWebhook `pulumi:"webhooks"`
	// A contact point that sends notifications to WeCom.
	Wecoms []ContactPointWecom `pulumi:"wecoms"`
}

type ContactPointState struct {
	// A contact point that sends notifications to other Alertmanager instances.
	Alertmanagers pulumix.Input[[]*ContactPointAlertmanagerArgs]
	// A contact point that sends notifications to DingDing.
	Dingdings pulumix.Input[[]*ContactPointDingdingArgs]
	// A contact point that sends notifications as Discord messages
	Discords pulumix.Input[[]*ContactPointDiscordArgs]
	// A contact point that sends notifications to an email address.
	Emails pulumix.Input[[]*ContactPointEmailArgs]
	// A contact point that sends notifications to Google Chat.
	Googlechats pulumix.Input[[]*ContactPointGooglechatArgs]
	// A contact point that publishes notifications to Apache Kafka topics.
	Kafkas pulumix.Input[[]*ContactPointKafkaArgs]
	// The name of the contact point.
	Name pulumix.Input[*string]
	// A contact point that sends notifications to OpsGenie.
	Opsgenies pulumix.Input[[]*ContactPointOpsgenyArgs]
	// A contact point that sends notifications to PagerDuty.
	Pagerduties pulumix.Input[[]*ContactPointPagerdutyArgs]
	// A contact point that sends notifications to Pushover.
	Pushovers pulumix.Input[[]*ContactPointPushoverArgs]
	// A contact point that sends notifications to SensuGo.
	Sensugos pulumix.Input[[]*ContactPointSensugoArgs]
	// A contact point that sends notifications to Slack.
	Slacks pulumix.Input[[]*ContactPointSlackArgs]
	// A contact point that sends notifications to Microsoft Teams.
	Teams pulumix.Input[[]*ContactPointTeamArgs]
	// A contact point that sends notifications to Telegram.
	Telegrams pulumix.Input[[]*ContactPointTelegramArgs]
	// A contact point that sends notifications to Threema.
	Threemas pulumix.Input[[]*ContactPointThreemaArgs]
	// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
	Victorops pulumix.Input[[]*ContactPointVictoropArgs]
	// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
	Webhooks pulumix.Input[[]*ContactPointWebhookArgs]
	// A contact point that sends notifications to WeCom.
	Wecoms pulumix.Input[[]*ContactPointWecomArgs]
}

func (ContactPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactPointState)(nil)).Elem()
}

type contactPointArgs struct {
	// A contact point that sends notifications to other Alertmanager instances.
	Alertmanagers []ContactPointAlertmanager `pulumi:"alertmanagers"`
	// A contact point that sends notifications to DingDing.
	Dingdings []ContactPointDingding `pulumi:"dingdings"`
	// A contact point that sends notifications as Discord messages
	Discords []ContactPointDiscord `pulumi:"discords"`
	// A contact point that sends notifications to an email address.
	Emails []ContactPointEmail `pulumi:"emails"`
	// A contact point that sends notifications to Google Chat.
	Googlechats []ContactPointGooglechat `pulumi:"googlechats"`
	// A contact point that publishes notifications to Apache Kafka topics.
	Kafkas []ContactPointKafka `pulumi:"kafkas"`
	// The name of the contact point.
	Name *string `pulumi:"name"`
	// A contact point that sends notifications to OpsGenie.
	Opsgenies []ContactPointOpsgeny `pulumi:"opsgenies"`
	// A contact point that sends notifications to PagerDuty.
	Pagerduties []ContactPointPagerduty `pulumi:"pagerduties"`
	// A contact point that sends notifications to Pushover.
	Pushovers []ContactPointPushover `pulumi:"pushovers"`
	// A contact point that sends notifications to SensuGo.
	Sensugos []ContactPointSensugo `pulumi:"sensugos"`
	// A contact point that sends notifications to Slack.
	Slacks []ContactPointSlack `pulumi:"slacks"`
	// A contact point that sends notifications to Microsoft Teams.
	Teams []ContactPointTeam `pulumi:"teams"`
	// A contact point that sends notifications to Telegram.
	Telegrams []ContactPointTelegram `pulumi:"telegrams"`
	// A contact point that sends notifications to Threema.
	Threemas []ContactPointThreema `pulumi:"threemas"`
	// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
	Victorops []ContactPointVictorop `pulumi:"victorops"`
	// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
	Webhooks []ContactPointWebhook `pulumi:"webhooks"`
	// A contact point that sends notifications to WeCom.
	Wecoms []ContactPointWecom `pulumi:"wecoms"`
}

// The set of arguments for constructing a ContactPoint resource.
type ContactPointArgs struct {
	// A contact point that sends notifications to other Alertmanager instances.
	Alertmanagers pulumix.Input[[]*ContactPointAlertmanagerArgs]
	// A contact point that sends notifications to DingDing.
	Dingdings pulumix.Input[[]*ContactPointDingdingArgs]
	// A contact point that sends notifications as Discord messages
	Discords pulumix.Input[[]*ContactPointDiscordArgs]
	// A contact point that sends notifications to an email address.
	Emails pulumix.Input[[]*ContactPointEmailArgs]
	// A contact point that sends notifications to Google Chat.
	Googlechats pulumix.Input[[]*ContactPointGooglechatArgs]
	// A contact point that publishes notifications to Apache Kafka topics.
	Kafkas pulumix.Input[[]*ContactPointKafkaArgs]
	// The name of the contact point.
	Name pulumix.Input[*string]
	// A contact point that sends notifications to OpsGenie.
	Opsgenies pulumix.Input[[]*ContactPointOpsgenyArgs]
	// A contact point that sends notifications to PagerDuty.
	Pagerduties pulumix.Input[[]*ContactPointPagerdutyArgs]
	// A contact point that sends notifications to Pushover.
	Pushovers pulumix.Input[[]*ContactPointPushoverArgs]
	// A contact point that sends notifications to SensuGo.
	Sensugos pulumix.Input[[]*ContactPointSensugoArgs]
	// A contact point that sends notifications to Slack.
	Slacks pulumix.Input[[]*ContactPointSlackArgs]
	// A contact point that sends notifications to Microsoft Teams.
	Teams pulumix.Input[[]*ContactPointTeamArgs]
	// A contact point that sends notifications to Telegram.
	Telegrams pulumix.Input[[]*ContactPointTelegramArgs]
	// A contact point that sends notifications to Threema.
	Threemas pulumix.Input[[]*ContactPointThreemaArgs]
	// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
	Victorops pulumix.Input[[]*ContactPointVictoropArgs]
	// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
	Webhooks pulumix.Input[[]*ContactPointWebhookArgs]
	// A contact point that sends notifications to WeCom.
	Wecoms pulumix.Input[[]*ContactPointWecomArgs]
}

func (ContactPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactPointArgs)(nil)).Elem()
}

type ContactPointOutput struct{ *pulumi.OutputState }

func (ContactPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPoint)(nil)).Elem()
}

func (o ContactPointOutput) ToContactPointOutput() ContactPointOutput {
	return o
}

func (o ContactPointOutput) ToContactPointOutputWithContext(ctx context.Context) ContactPointOutput {
	return o
}

func (o ContactPointOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPoint] {
	return pulumix.Output[ContactPoint]{
		OutputState: o.OutputState,
	}
}

// A contact point that sends notifications to other Alertmanager instances.
func (o ContactPointOutput) Alertmanagers() pulumix.GArrayOutput[ContactPointAlertmanager, ContactPointAlertmanagerOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointAlertmanager, ContactPointAlertmanagerOutput] {
		return v.Alertmanagers
	})
	unwrapped := pulumix.Flatten[[]ContactPointAlertmanager, pulumix.GArrayOutput[ContactPointAlertmanager, ContactPointAlertmanagerOutput]](value)
	return pulumix.GArrayOutput[ContactPointAlertmanager, ContactPointAlertmanagerOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to DingDing.
func (o ContactPointOutput) Dingdings() pulumix.GArrayOutput[ContactPointDingding, ContactPointDingdingOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointDingding, ContactPointDingdingOutput] {
		return v.Dingdings
	})
	unwrapped := pulumix.Flatten[[]ContactPointDingding, pulumix.GArrayOutput[ContactPointDingding, ContactPointDingdingOutput]](value)
	return pulumix.GArrayOutput[ContactPointDingding, ContactPointDingdingOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications as Discord messages
func (o ContactPointOutput) Discords() pulumix.GArrayOutput[ContactPointDiscord, ContactPointDiscordOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointDiscord, ContactPointDiscordOutput] {
		return v.Discords
	})
	unwrapped := pulumix.Flatten[[]ContactPointDiscord, pulumix.GArrayOutput[ContactPointDiscord, ContactPointDiscordOutput]](value)
	return pulumix.GArrayOutput[ContactPointDiscord, ContactPointDiscordOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to an email address.
func (o ContactPointOutput) Emails() pulumix.GArrayOutput[ContactPointEmail, ContactPointEmailOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointEmail, ContactPointEmailOutput] { return v.Emails })
	unwrapped := pulumix.Flatten[[]ContactPointEmail, pulumix.GArrayOutput[ContactPointEmail, ContactPointEmailOutput]](value)
	return pulumix.GArrayOutput[ContactPointEmail, ContactPointEmailOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to Google Chat.
func (o ContactPointOutput) Googlechats() pulumix.GArrayOutput[ContactPointGooglechat, ContactPointGooglechatOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointGooglechat, ContactPointGooglechatOutput] {
		return v.Googlechats
	})
	unwrapped := pulumix.Flatten[[]ContactPointGooglechat, pulumix.GArrayOutput[ContactPointGooglechat, ContactPointGooglechatOutput]](value)
	return pulumix.GArrayOutput[ContactPointGooglechat, ContactPointGooglechatOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that publishes notifications to Apache Kafka topics.
func (o ContactPointOutput) Kafkas() pulumix.GArrayOutput[ContactPointKafka, ContactPointKafkaOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointKafka, ContactPointKafkaOutput] { return v.Kafkas })
	unwrapped := pulumix.Flatten[[]ContactPointKafka, pulumix.GArrayOutput[ContactPointKafka, ContactPointKafkaOutput]](value)
	return pulumix.GArrayOutput[ContactPointKafka, ContactPointKafkaOutput]{OutputState: unwrapped.OutputState}
}

// The name of the contact point.
func (o ContactPointOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// A contact point that sends notifications to OpsGenie.
func (o ContactPointOutput) Opsgenies() pulumix.GArrayOutput[ContactPointOpsgeny, ContactPointOpsgenyOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointOpsgeny, ContactPointOpsgenyOutput] {
		return v.Opsgenies
	})
	unwrapped := pulumix.Flatten[[]ContactPointOpsgeny, pulumix.GArrayOutput[ContactPointOpsgeny, ContactPointOpsgenyOutput]](value)
	return pulumix.GArrayOutput[ContactPointOpsgeny, ContactPointOpsgenyOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to PagerDuty.
func (o ContactPointOutput) Pagerduties() pulumix.GArrayOutput[ContactPointPagerduty, ContactPointPagerdutyOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointPagerduty, ContactPointPagerdutyOutput] {
		return v.Pagerduties
	})
	unwrapped := pulumix.Flatten[[]ContactPointPagerduty, pulumix.GArrayOutput[ContactPointPagerduty, ContactPointPagerdutyOutput]](value)
	return pulumix.GArrayOutput[ContactPointPagerduty, ContactPointPagerdutyOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to Pushover.
func (o ContactPointOutput) Pushovers() pulumix.GArrayOutput[ContactPointPushover, ContactPointPushoverOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointPushover, ContactPointPushoverOutput] {
		return v.Pushovers
	})
	unwrapped := pulumix.Flatten[[]ContactPointPushover, pulumix.GArrayOutput[ContactPointPushover, ContactPointPushoverOutput]](value)
	return pulumix.GArrayOutput[ContactPointPushover, ContactPointPushoverOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to SensuGo.
func (o ContactPointOutput) Sensugos() pulumix.GArrayOutput[ContactPointSensugo, ContactPointSensugoOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointSensugo, ContactPointSensugoOutput] {
		return v.Sensugos
	})
	unwrapped := pulumix.Flatten[[]ContactPointSensugo, pulumix.GArrayOutput[ContactPointSensugo, ContactPointSensugoOutput]](value)
	return pulumix.GArrayOutput[ContactPointSensugo, ContactPointSensugoOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to Slack.
func (o ContactPointOutput) Slacks() pulumix.GArrayOutput[ContactPointSlack, ContactPointSlackOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointSlack, ContactPointSlackOutput] { return v.Slacks })
	unwrapped := pulumix.Flatten[[]ContactPointSlack, pulumix.GArrayOutput[ContactPointSlack, ContactPointSlackOutput]](value)
	return pulumix.GArrayOutput[ContactPointSlack, ContactPointSlackOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to Microsoft Teams.
func (o ContactPointOutput) Teams() pulumix.GArrayOutput[ContactPointTeam, ContactPointTeamOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointTeam, ContactPointTeamOutput] { return v.Teams })
	unwrapped := pulumix.Flatten[[]ContactPointTeam, pulumix.GArrayOutput[ContactPointTeam, ContactPointTeamOutput]](value)
	return pulumix.GArrayOutput[ContactPointTeam, ContactPointTeamOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to Telegram.
func (o ContactPointOutput) Telegrams() pulumix.GArrayOutput[ContactPointTelegram, ContactPointTelegramOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointTelegram, ContactPointTelegramOutput] {
		return v.Telegrams
	})
	unwrapped := pulumix.Flatten[[]ContactPointTelegram, pulumix.GArrayOutput[ContactPointTelegram, ContactPointTelegramOutput]](value)
	return pulumix.GArrayOutput[ContactPointTelegram, ContactPointTelegramOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to Threema.
func (o ContactPointOutput) Threemas() pulumix.GArrayOutput[ContactPointThreema, ContactPointThreemaOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointThreema, ContactPointThreemaOutput] {
		return v.Threemas
	})
	unwrapped := pulumix.Flatten[[]ContactPointThreema, pulumix.GArrayOutput[ContactPointThreema, ContactPointThreemaOutput]](value)
	return pulumix.GArrayOutput[ContactPointThreema, ContactPointThreemaOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to VictorOps (now known as Splunk OnCall).
func (o ContactPointOutput) Victorops() pulumix.GArrayOutput[ContactPointVictorop, ContactPointVictoropOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointVictorop, ContactPointVictoropOutput] {
		return v.Victorops
	})
	unwrapped := pulumix.Flatten[[]ContactPointVictorop, pulumix.GArrayOutput[ContactPointVictorop, ContactPointVictoropOutput]](value)
	return pulumix.GArrayOutput[ContactPointVictorop, ContactPointVictoropOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here: https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
func (o ContactPointOutput) Webhooks() pulumix.GArrayOutput[ContactPointWebhook, ContactPointWebhookOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointWebhook, ContactPointWebhookOutput] {
		return v.Webhooks
	})
	unwrapped := pulumix.Flatten[[]ContactPointWebhook, pulumix.GArrayOutput[ContactPointWebhook, ContactPointWebhookOutput]](value)
	return pulumix.GArrayOutput[ContactPointWebhook, ContactPointWebhookOutput]{OutputState: unwrapped.OutputState}
}

// A contact point that sends notifications to WeCom.
func (o ContactPointOutput) Wecoms() pulumix.GArrayOutput[ContactPointWecom, ContactPointWecomOutput] {
	value := pulumix.Apply[ContactPoint](o, func(v ContactPoint) pulumix.GArrayOutput[ContactPointWecom, ContactPointWecomOutput] { return v.Wecoms })
	unwrapped := pulumix.Flatten[[]ContactPointWecom, pulumix.GArrayOutput[ContactPointWecom, ContactPointWecomOutput]](value)
	return pulumix.GArrayOutput[ContactPointWecom, ContactPointWecomOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ContactPointOutput{})
}
