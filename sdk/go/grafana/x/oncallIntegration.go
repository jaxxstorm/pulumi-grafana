// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/oncall/latest/integrations/)
// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/)
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/oncallIntegration:OncallIntegration integration_name {{integration_id}}
//
// ```
type OncallIntegration struct {
	pulumi.CustomResourceState

	// The Default route for all alerts from the given integration
	DefaultRoute pulumix.GPtrOutput[OncallIntegrationDefaultRoute, OncallIntegrationDefaultRouteOutput] `pulumi:"defaultRoute"`
	// The link for using in an integrated tool.
	Link pulumix.Output[string] `pulumi:"link"`
	// The name of the service integration.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Output[*string] `pulumi:"teamId"`
	// Jinja2 templates for Alert payload.
	Templates pulumix.GPtrOutput[OncallIntegrationTemplates, OncallIntegrationTemplatesOutput] `pulumi:"templates"`
	// The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging.
	Type pulumix.Output[string] `pulumi:"type"`
}

// NewOncallIntegration registers a new resource with the given unique name, arguments, and options.
func NewOncallIntegration(ctx *pulumi.Context,
	name string, args *OncallIntegrationArgs, opts ...pulumi.ResourceOption) (*OncallIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultRoute == nil {
		return nil, errors.New("invalid value for required argument 'DefaultRoute'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallIntegration
	err := ctx.RegisterResource("grafana:index/oncallIntegration:OncallIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallIntegration gets an existing OncallIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallIntegrationState, opts ...pulumi.ResourceOption) (*OncallIntegration, error) {
	var resource OncallIntegration
	err := ctx.ReadResource("grafana:index/oncallIntegration:OncallIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallIntegration resources.
type oncallIntegrationState struct {
	// The Default route for all alerts from the given integration
	DefaultRoute *OncallIntegrationDefaultRoute `pulumi:"defaultRoute"`
	// The link for using in an integrated tool.
	Link *string `pulumi:"link"`
	// The name of the service integration.
	Name *string `pulumi:"name"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// Jinja2 templates for Alert payload.
	Templates *OncallIntegrationTemplates `pulumi:"templates"`
	// The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging.
	Type *string `pulumi:"type"`
}

type OncallIntegrationState struct {
	// The Default route for all alerts from the given integration
	DefaultRoute pulumix.Input[*OncallIntegrationDefaultRouteArgs]
	// The link for using in an integrated tool.
	Link pulumix.Input[*string]
	// The name of the service integration.
	Name pulumix.Input[*string]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// Jinja2 templates for Alert payload.
	Templates pulumix.Input[*OncallIntegrationTemplatesArgs]
	// The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging.
	Type pulumix.Input[*string]
}

func (OncallIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallIntegrationState)(nil)).Elem()
}

type oncallIntegrationArgs struct {
	// The Default route for all alerts from the given integration
	DefaultRoute OncallIntegrationDefaultRoute `pulumi:"defaultRoute"`
	// The name of the service integration.
	Name *string `pulumi:"name"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// Jinja2 templates for Alert payload.
	Templates *OncallIntegrationTemplates `pulumi:"templates"`
	// The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a OncallIntegration resource.
type OncallIntegrationArgs struct {
	// The Default route for all alerts from the given integration
	DefaultRoute pulumix.Input[*OncallIntegrationDefaultRouteArgs]
	// The name of the service integration.
	Name pulumix.Input[*string]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// Jinja2 templates for Alert payload.
	Templates pulumix.Input[*OncallIntegrationTemplatesArgs]
	// The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging.
	Type pulumix.Input[string]
}

func (OncallIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallIntegrationArgs)(nil)).Elem()
}

type OncallIntegrationOutput struct{ *pulumi.OutputState }

func (OncallIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegration)(nil)).Elem()
}

func (o OncallIntegrationOutput) ToOncallIntegrationOutput() OncallIntegrationOutput {
	return o
}

func (o OncallIntegrationOutput) ToOncallIntegrationOutputWithContext(ctx context.Context) OncallIntegrationOutput {
	return o
}

func (o OncallIntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegration] {
	return pulumix.Output[OncallIntegration]{
		OutputState: o.OutputState,
	}
}

// The Default route for all alerts from the given integration
func (o OncallIntegrationOutput) DefaultRoute() pulumix.GPtrOutput[OncallIntegrationDefaultRoute, OncallIntegrationDefaultRouteOutput] {
	value := pulumix.Apply[OncallIntegration](o, func(v OncallIntegration) pulumix.GPtrOutput[OncallIntegrationDefaultRoute, OncallIntegrationDefaultRouteOutput] {
		return v.DefaultRoute
	})
	unwrapped := pulumix.Flatten[*OncallIntegrationDefaultRoute, pulumix.GPtrOutput[OncallIntegrationDefaultRoute, OncallIntegrationDefaultRouteOutput]](value)
	return pulumix.GPtrOutput[OncallIntegrationDefaultRoute, OncallIntegrationDefaultRouteOutput]{OutputState: unwrapped.OutputState}
}

// The link for using in an integrated tool.
func (o OncallIntegrationOutput) Link() pulumix.Output[string] {
	value := pulumix.Apply[OncallIntegration](o, func(v OncallIntegration) pulumix.Output[string] { return v.Link })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The name of the service integration.
func (o OncallIntegrationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OncallIntegration](o, func(v OncallIntegration) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
func (o OncallIntegrationOutput) TeamId() pulumix.Output[*string] {
	value := pulumix.Apply[OncallIntegration](o, func(v OncallIntegration) pulumix.Output[*string] { return v.TeamId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Jinja2 templates for Alert payload.
func (o OncallIntegrationOutput) Templates() pulumix.GPtrOutput[OncallIntegrationTemplates, OncallIntegrationTemplatesOutput] {
	value := pulumix.Apply[OncallIntegration](o, func(v OncallIntegration) pulumix.GPtrOutput[OncallIntegrationTemplates, OncallIntegrationTemplatesOutput] {
		return v.Templates
	})
	unwrapped := pulumix.Flatten[*OncallIntegrationTemplates, pulumix.GPtrOutput[OncallIntegrationTemplates, OncallIntegrationTemplatesOutput]](value)
	return pulumix.GPtrOutput[OncallIntegrationTemplates, OncallIntegrationTemplatesOutput]{OutputState: unwrapped.OutputState}
}

// The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging.
func (o OncallIntegrationOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[OncallIntegration](o, func(v OncallIntegration) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(OncallIntegrationOutput{})
}
