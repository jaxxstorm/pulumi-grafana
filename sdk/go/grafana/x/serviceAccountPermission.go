// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This resource is available from Grafana 9.2.4 onwards.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/#manage-users-and-teams-permissions-for-a-service-account-in-grafana)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := grafana.NewServiceAccount(ctx, "test", &grafana.ServiceAccountArgs{
//				Role:       pulumi.String("Editor"),
//				IsDisabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			testTeam, err := grafana.NewTeam(ctx, "testTeam", nil)
//			if err != nil {
//				return err
//			}
//			testUser, err := grafana.NewUser(ctx, "testUser", &grafana.UserArgs{
//				Email:    pulumi.String("tf_user@test.com"),
//				Login:    pulumi.String("tf_user@test.com"),
//				Password: pulumi.String("password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewServiceAccountPermission(ctx, "testPermissions", &grafana.ServiceAccountPermissionArgs{
//				ServiceAccountId: test.ID(),
//				Permissions: grafana.ServiceAccountPermissionPermissionArray{
//					&grafana.ServiceAccountPermissionPermissionArgs{
//						UserId:     testUser.ID(),
//						Permission: pulumi.String("Edit"),
//					},
//					&grafana.ServiceAccountPermissionPermissionArgs{
//						TeamId:     testTeam.ID(),
//						Permission: pulumi.String("Admin"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServiceAccountPermission struct {
	pulumi.CustomResourceState

	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.GArrayOutput[ServiceAccountPermissionPermission, ServiceAccountPermissionPermissionOutput] `pulumi:"permissions"`
	// The id of the service account.
	ServiceAccountId pulumix.Output[string] `pulumi:"serviceAccountId"`
}

// NewServiceAccountPermission registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountPermission(ctx *pulumi.Context,
	name string, args *ServiceAccountPermissionArgs, opts ...pulumi.ResourceOption) (*ServiceAccountPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.ServiceAccountId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAccountPermission
	err := ctx.RegisterResource("grafana:index/serviceAccountPermission:ServiceAccountPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountPermission gets an existing ServiceAccountPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountPermissionState, opts ...pulumi.ResourceOption) (*ServiceAccountPermission, error) {
	var resource ServiceAccountPermission
	err := ctx.ReadResource("grafana:index/serviceAccountPermission:ServiceAccountPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountPermission resources.
type serviceAccountPermissionState struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []ServiceAccountPermissionPermission `pulumi:"permissions"`
	// The id of the service account.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
}

type ServiceAccountPermissionState struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*ServiceAccountPermissionPermissionArgs]
	// The id of the service account.
	ServiceAccountId pulumix.Input[*string]
}

func (ServiceAccountPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountPermissionState)(nil)).Elem()
}

type serviceAccountPermissionArgs struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []ServiceAccountPermissionPermission `pulumi:"permissions"`
	// The id of the service account.
	ServiceAccountId string `pulumi:"serviceAccountId"`
}

// The set of arguments for constructing a ServiceAccountPermission resource.
type ServiceAccountPermissionArgs struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*ServiceAccountPermissionPermissionArgs]
	// The id of the service account.
	ServiceAccountId pulumix.Input[string]
}

func (ServiceAccountPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountPermissionArgs)(nil)).Elem()
}

type ServiceAccountPermissionOutput struct{ *pulumi.OutputState }

func (ServiceAccountPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPermission)(nil)).Elem()
}

func (o ServiceAccountPermissionOutput) ToServiceAccountPermissionOutput() ServiceAccountPermissionOutput {
	return o
}

func (o ServiceAccountPermissionOutput) ToServiceAccountPermissionOutputWithContext(ctx context.Context) ServiceAccountPermissionOutput {
	return o
}

func (o ServiceAccountPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountPermission] {
	return pulumix.Output[ServiceAccountPermission]{
		OutputState: o.OutputState,
	}
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o ServiceAccountPermissionOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[ServiceAccountPermission](o, func(v ServiceAccountPermission) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The permission items to add/update. Items that are omitted from the list will be removed.
func (o ServiceAccountPermissionOutput) Permissions() pulumix.GArrayOutput[ServiceAccountPermissionPermission, ServiceAccountPermissionPermissionOutput] {
	value := pulumix.Apply[ServiceAccountPermission](o, func(v ServiceAccountPermission) pulumix.GArrayOutput[ServiceAccountPermissionPermission, ServiceAccountPermissionPermissionOutput] {
		return v.Permissions
	})
	unwrapped := pulumix.Flatten[[]ServiceAccountPermissionPermission, pulumix.GArrayOutput[ServiceAccountPermissionPermission, ServiceAccountPermissionPermissionOutput]](value)
	return pulumix.GArrayOutput[ServiceAccountPermissionPermission, ServiceAccountPermissionPermissionOutput]{OutputState: unwrapped.OutputState}
}

// The id of the service account.
func (o ServiceAccountPermissionOutput) ServiceAccountId() pulumix.Output[string] {
	value := pulumix.Apply[ServiceAccountPermission](o, func(v ServiceAccountPermission) pulumix.Output[string] { return v.ServiceAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(ServiceAccountPermissionOutput{})
}
