// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a single API key on the Grafana Cloud portal (on the organization level)
// * [API documentation](https://grafana.com/docs/grafana-cloud/reference/cloud-api/#api-keys)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewCloudApiKey(ctx, "test", &grafana.CloudApiKeyArgs{
//				CloudOrgSlug: pulumi.String("myorg"),
//				Role:         pulumi.String("Admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/cloudApiKey:CloudApiKey resource_name "{{org-name}}-{{api_key_name}}"
//
// ```
type CloudApiKey struct {
	pulumi.CustomResourceState

	// The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.
	CloudOrgSlug pulumix.Output[string] `pulumi:"cloudOrgSlug"`
	// The generated API key.
	Key pulumix.Output[string] `pulumi:"key"`
	// Name of the API key.
	Name pulumix.Output[string] `pulumi:"name"`
	// Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.
	Role pulumix.Output[string] `pulumi:"role"`
}

// NewCloudApiKey registers a new resource with the given unique name, arguments, and options.
func NewCloudApiKey(ctx *pulumi.Context,
	name string, args *CloudApiKeyArgs, opts ...pulumi.ResourceOption) (*CloudApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudOrgSlug == nil {
		return nil, errors.New("invalid value for required argument 'CloudOrgSlug'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudApiKey
	err := ctx.RegisterResource("grafana:index/cloudApiKey:CloudApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudApiKey gets an existing CloudApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudApiKeyState, opts ...pulumi.ResourceOption) (*CloudApiKey, error) {
	var resource CloudApiKey
	err := ctx.ReadResource("grafana:index/cloudApiKey:CloudApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudApiKey resources.
type cloudApiKeyState struct {
	// The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.
	CloudOrgSlug *string `pulumi:"cloudOrgSlug"`
	// The generated API key.
	Key *string `pulumi:"key"`
	// Name of the API key.
	Name *string `pulumi:"name"`
	// Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.
	Role *string `pulumi:"role"`
}

type CloudApiKeyState struct {
	// The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.
	CloudOrgSlug pulumix.Input[*string]
	// The generated API key.
	Key pulumix.Input[*string]
	// Name of the API key.
	Name pulumix.Input[*string]
	// Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.
	Role pulumix.Input[*string]
}

func (CloudApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudApiKeyState)(nil)).Elem()
}

type cloudApiKeyArgs struct {
	// The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.
	CloudOrgSlug string `pulumi:"cloudOrgSlug"`
	// Name of the API key.
	Name *string `pulumi:"name"`
	// Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a CloudApiKey resource.
type CloudApiKeyArgs struct {
	// The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.
	CloudOrgSlug pulumix.Input[string]
	// Name of the API key.
	Name pulumix.Input[*string]
	// Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.
	Role pulumix.Input[string]
}

func (CloudApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudApiKeyArgs)(nil)).Elem()
}

type CloudApiKeyOutput struct{ *pulumi.OutputState }

func (CloudApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudApiKey)(nil)).Elem()
}

func (o CloudApiKeyOutput) ToCloudApiKeyOutput() CloudApiKeyOutput {
	return o
}

func (o CloudApiKeyOutput) ToCloudApiKeyOutputWithContext(ctx context.Context) CloudApiKeyOutput {
	return o
}

func (o CloudApiKeyOutput) ToOutput(ctx context.Context) pulumix.Output[CloudApiKey] {
	return pulumix.Output[CloudApiKey]{
		OutputState: o.OutputState,
	}
}

// The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.
func (o CloudApiKeyOutput) CloudOrgSlug() pulumix.Output[string] {
	value := pulumix.Apply[CloudApiKey](o, func(v CloudApiKey) pulumix.Output[string] { return v.CloudOrgSlug })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The generated API key.
func (o CloudApiKeyOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[CloudApiKey](o, func(v CloudApiKey) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the API key.
func (o CloudApiKeyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CloudApiKey](o, func(v CloudApiKey) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See https://grafana.com/docs/grafana-cloud/api/#create-api-key for details.
func (o CloudApiKeyOutput) Role() pulumix.Output[string] {
	value := pulumix.Apply[CloudApiKey](o, func(v CloudApiKey) pulumix.Output[string] { return v.Role })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudApiKeyOutput{})
}
