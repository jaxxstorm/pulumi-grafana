// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/annotations/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewAnnotation(ctx, "test", &grafana.AnnotationArgs{
//				Text: pulumi.String("basic text"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Annotation struct {
	pulumi.CustomResourceState

	// The ID of the dashboard on which to create the annotation. Deprecated: Use dashboardUid instead.
	//
	// Deprecated: Use dashboard_uid instead.
	DashboardId pulumix.Output[*int] `pulumi:"dashboardId"`
	// The ID of the dashboard on which to create the annotation.
	DashboardUid pulumix.Output[*string] `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// The ID of the dashboard panel on which to create the annotation.
	PanelId pulumix.Output[*int] `pulumi:"panelId"`
	// The tags to associate with the annotation.
	Tags pulumix.ArrayOutput[string] `pulumi:"tags"`
	// The text to associate with the annotation.
	Text pulumix.Output[string] `pulumi:"text"`
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time pulumix.Output[string] `pulumi:"time"`
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd pulumix.Output[string] `pulumi:"timeEnd"`
}

// NewAnnotation registers a new resource with the given unique name, arguments, and options.
func NewAnnotation(ctx *pulumi.Context,
	name string, args *AnnotationArgs, opts ...pulumi.ResourceOption) (*Annotation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Text == nil {
		return nil, errors.New("invalid value for required argument 'Text'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Annotation
	err := ctx.RegisterResource("grafana:index/annotation:Annotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnotation gets an existing Annotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnotationState, opts ...pulumi.ResourceOption) (*Annotation, error) {
	var resource Annotation
	err := ctx.ReadResource("grafana:index/annotation:Annotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Annotation resources.
type annotationState struct {
	// The ID of the dashboard on which to create the annotation. Deprecated: Use dashboardUid instead.
	//
	// Deprecated: Use dashboard_uid instead.
	DashboardId *int `pulumi:"dashboardId"`
	// The ID of the dashboard on which to create the annotation.
	DashboardUid *string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The ID of the dashboard panel on which to create the annotation.
	PanelId *int `pulumi:"panelId"`
	// The tags to associate with the annotation.
	Tags []string `pulumi:"tags"`
	// The text to associate with the annotation.
	Text *string `pulumi:"text"`
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time *string `pulumi:"time"`
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd *string `pulumi:"timeEnd"`
}

type AnnotationState struct {
	// The ID of the dashboard on which to create the annotation. Deprecated: Use dashboardUid instead.
	//
	// Deprecated: Use dashboard_uid instead.
	DashboardId pulumix.Input[*int]
	// The ID of the dashboard on which to create the annotation.
	DashboardUid pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The ID of the dashboard panel on which to create the annotation.
	PanelId pulumix.Input[*int]
	// The tags to associate with the annotation.
	Tags pulumix.Input[[]string]
	// The text to associate with the annotation.
	Text pulumix.Input[*string]
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time pulumix.Input[*string]
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd pulumix.Input[*string]
}

func (AnnotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationState)(nil)).Elem()
}

type annotationArgs struct {
	// The ID of the dashboard on which to create the annotation. Deprecated: Use dashboardUid instead.
	//
	// Deprecated: Use dashboard_uid instead.
	DashboardId *int `pulumi:"dashboardId"`
	// The ID of the dashboard on which to create the annotation.
	DashboardUid *string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The ID of the dashboard panel on which to create the annotation.
	PanelId *int `pulumi:"panelId"`
	// The tags to associate with the annotation.
	Tags []string `pulumi:"tags"`
	// The text to associate with the annotation.
	Text string `pulumi:"text"`
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time *string `pulumi:"time"`
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd *string `pulumi:"timeEnd"`
}

// The set of arguments for constructing a Annotation resource.
type AnnotationArgs struct {
	// The ID of the dashboard on which to create the annotation. Deprecated: Use dashboardUid instead.
	//
	// Deprecated: Use dashboard_uid instead.
	DashboardId pulumix.Input[*int]
	// The ID of the dashboard on which to create the annotation.
	DashboardUid pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The ID of the dashboard panel on which to create the annotation.
	PanelId pulumix.Input[*int]
	// The tags to associate with the annotation.
	Tags pulumix.Input[[]string]
	// The text to associate with the annotation.
	Text pulumix.Input[string]
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time pulumix.Input[*string]
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd pulumix.Input[*string]
}

func (AnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationArgs)(nil)).Elem()
}

type AnnotationOutput struct{ *pulumi.OutputState }

func (AnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Annotation)(nil)).Elem()
}

func (o AnnotationOutput) ToAnnotationOutput() AnnotationOutput {
	return o
}

func (o AnnotationOutput) ToAnnotationOutputWithContext(ctx context.Context) AnnotationOutput {
	return o
}

func (o AnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[Annotation] {
	return pulumix.Output[Annotation]{
		OutputState: o.OutputState,
	}
}

// The ID of the dashboard on which to create the annotation. Deprecated: Use dashboardUid instead.
//
// Deprecated: Use dashboard_uid instead.
func (o AnnotationOutput) DashboardId() pulumix.Output[*int] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.Output[*int] { return v.DashboardId })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ID of the dashboard on which to create the annotation.
func (o AnnotationOutput) DashboardUid() pulumix.Output[*string] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.Output[*string] { return v.DashboardUid })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o AnnotationOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The ID of the dashboard panel on which to create the annotation.
func (o AnnotationOutput) PanelId() pulumix.Output[*int] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.Output[*int] { return v.PanelId })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The tags to associate with the annotation.
func (o AnnotationOutput) Tags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.ArrayOutput[string] { return v.Tags })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The text to associate with the annotation.
func (o AnnotationOutput) Text() pulumix.Output[string] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.Output[string] { return v.Text })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The RFC 3339-formatted time string indicating the annotation's time.
func (o AnnotationOutput) Time() pulumix.Output[string] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.Output[string] { return v.Time })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The RFC 3339-formatted time string indicating the annotation's end time.
func (o AnnotationOutput) TimeEnd() pulumix.Output[string] {
	value := pulumix.Apply[Annotation](o, func(v Annotation) pulumix.Output[string] { return v.TimeEnd })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(AnnotationOutput{})
}
