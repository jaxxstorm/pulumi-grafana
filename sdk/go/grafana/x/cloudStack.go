// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana-cloud/reference/cloud-api/#stacks/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewCloudStack(ctx, "test", &grafana.CloudStackArgs{
//				Description: pulumi.String("Test Grafana Cloud Stack"),
//				RegionSlug:  pulumi.String("eu"),
//				Slug:        pulumi.String("gcloudstacktest"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/cloudStack:CloudStack stack_name {{stack_id}} // import by numerical ID
//
// ```
//
// ```sh
//
//	$ pulumi import grafana:index/cloudStack:CloudStack stack_name {{stack_slug}} // or import by slug
//
// ```
type CloudStack struct {
	pulumi.CustomResourceState

	// Name of the Alertmanager instance configured for this stack.
	AlertmanagerName pulumix.Output[string] `pulumi:"alertmanagerName"`
	// Status of the Alertmanager instance configured for this stack.
	AlertmanagerStatus pulumix.Output[string] `pulumi:"alertmanagerStatus"`
	// Base URL of the Alertmanager instance configured for this stack.
	AlertmanagerUrl pulumix.Output[string] `pulumi:"alertmanagerUrl"`
	// User ID of the Alertmanager instance configured for this stack.
	AlertmanagerUserId pulumix.Output[int] `pulumi:"alertmanagerUserId"`
	// Description of stack.
	Description    pulumix.Output[*string] `pulumi:"description"`
	GraphiteName   pulumix.Output[string]  `pulumi:"graphiteName"`
	GraphiteStatus pulumix.Output[string]  `pulumi:"graphiteStatus"`
	GraphiteUrl    pulumix.Output[string]  `pulumi:"graphiteUrl"`
	GraphiteUserId pulumix.Output[int]     `pulumi:"graphiteUserId"`
	LogsName       pulumix.Output[string]  `pulumi:"logsName"`
	LogsStatus     pulumix.Output[string]  `pulumi:"logsStatus"`
	LogsUrl        pulumix.Output[string]  `pulumi:"logsUrl"`
	LogsUserId     pulumix.Output[int]     `pulumi:"logsUserId"`
	// Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
	Name pulumix.Output[string] `pulumi:"name"`
	// Organization id to assign to this stack.
	OrgId pulumix.Output[int] `pulumi:"orgId"`
	// Organization name to assign to this stack.
	OrgName pulumix.Output[string] `pulumi:"orgName"`
	// Organization slug to assign to this stack.
	OrgSlug pulumix.Output[string] `pulumi:"orgSlug"`
	// Prometheus name for this instance.
	PrometheusName pulumix.Output[string] `pulumi:"prometheusName"`
	// Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
	PrometheusRemoteEndpoint pulumix.Output[string] `pulumi:"prometheusRemoteEndpoint"`
	// Use this URL to send prometheus metrics to Grafana cloud
	PrometheusRemoteWriteEndpoint pulumix.Output[string] `pulumi:"prometheusRemoteWriteEndpoint"`
	// Prometheus status for this instance.
	PrometheusStatus pulumix.Output[string] `pulumi:"prometheusStatus"`
	// Prometheus url for this instance.
	PrometheusUrl pulumix.Output[string] `pulumi:"prometheusUrl"`
	// Prometheus user ID. Used for e.g. remote_write.
	PrometheusUserId pulumix.Output[int] `pulumi:"prometheusUserId"`
	// Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	RegionSlug pulumix.Output[*string] `pulumi:"regionSlug"`
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug pulumix.Output[string] `pulumi:"slug"`
	// Status of the stack.
	Status       pulumix.Output[string] `pulumi:"status"`
	TracesName   pulumix.Output[string] `pulumi:"tracesName"`
	TracesStatus pulumix.Output[string] `pulumi:"tracesStatus"`
	// Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
	TracesUrl    pulumix.Output[string] `pulumi:"tracesUrl"`
	TracesUserId pulumix.Output[int]    `pulumi:"tracesUserId"`
	// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
	Url pulumix.Output[string] `pulumi:"url"`
	// Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
	WaitForReadiness pulumix.Output[*bool] `pulumi:"waitForReadiness"`
	// How long to wait for readiness (if enabled). Defaults to `5m0s`.
	WaitForReadinessTimeout pulumix.Output[*string] `pulumi:"waitForReadinessTimeout"`
}

// NewCloudStack registers a new resource with the given unique name, arguments, and options.
func NewCloudStack(ctx *pulumi.Context,
	name string, args *CloudStackArgs, opts ...pulumi.ResourceOption) (*CloudStack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudStack
	err := ctx.RegisterResource("grafana:index/cloudStack:CloudStack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudStack gets an existing CloudStack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudStack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudStackState, opts ...pulumi.ResourceOption) (*CloudStack, error) {
	var resource CloudStack
	err := ctx.ReadResource("grafana:index/cloudStack:CloudStack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudStack resources.
type cloudStackState struct {
	// Name of the Alertmanager instance configured for this stack.
	AlertmanagerName *string `pulumi:"alertmanagerName"`
	// Status of the Alertmanager instance configured for this stack.
	AlertmanagerStatus *string `pulumi:"alertmanagerStatus"`
	// Base URL of the Alertmanager instance configured for this stack.
	AlertmanagerUrl *string `pulumi:"alertmanagerUrl"`
	// User ID of the Alertmanager instance configured for this stack.
	AlertmanagerUserId *int `pulumi:"alertmanagerUserId"`
	// Description of stack.
	Description    *string `pulumi:"description"`
	GraphiteName   *string `pulumi:"graphiteName"`
	GraphiteStatus *string `pulumi:"graphiteStatus"`
	GraphiteUrl    *string `pulumi:"graphiteUrl"`
	GraphiteUserId *int    `pulumi:"graphiteUserId"`
	LogsName       *string `pulumi:"logsName"`
	LogsStatus     *string `pulumi:"logsStatus"`
	LogsUrl        *string `pulumi:"logsUrl"`
	LogsUserId     *int    `pulumi:"logsUserId"`
	// Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
	Name *string `pulumi:"name"`
	// Organization id to assign to this stack.
	OrgId *int `pulumi:"orgId"`
	// Organization name to assign to this stack.
	OrgName *string `pulumi:"orgName"`
	// Organization slug to assign to this stack.
	OrgSlug *string `pulumi:"orgSlug"`
	// Prometheus name for this instance.
	PrometheusName *string `pulumi:"prometheusName"`
	// Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
	PrometheusRemoteEndpoint *string `pulumi:"prometheusRemoteEndpoint"`
	// Use this URL to send prometheus metrics to Grafana cloud
	PrometheusRemoteWriteEndpoint *string `pulumi:"prometheusRemoteWriteEndpoint"`
	// Prometheus status for this instance.
	PrometheusStatus *string `pulumi:"prometheusStatus"`
	// Prometheus url for this instance.
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// Prometheus user ID. Used for e.g. remote_write.
	PrometheusUserId *int `pulumi:"prometheusUserId"`
	// Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	RegionSlug *string `pulumi:"regionSlug"`
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug *string `pulumi:"slug"`
	// Status of the stack.
	Status       *string `pulumi:"status"`
	TracesName   *string `pulumi:"tracesName"`
	TracesStatus *string `pulumi:"tracesStatus"`
	// Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
	TracesUrl    *string `pulumi:"tracesUrl"`
	TracesUserId *int    `pulumi:"tracesUserId"`
	// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
	Url *string `pulumi:"url"`
	// Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
	WaitForReadiness *bool `pulumi:"waitForReadiness"`
	// How long to wait for readiness (if enabled). Defaults to `5m0s`.
	WaitForReadinessTimeout *string `pulumi:"waitForReadinessTimeout"`
}

type CloudStackState struct {
	// Name of the Alertmanager instance configured for this stack.
	AlertmanagerName pulumix.Input[*string]
	// Status of the Alertmanager instance configured for this stack.
	AlertmanagerStatus pulumix.Input[*string]
	// Base URL of the Alertmanager instance configured for this stack.
	AlertmanagerUrl pulumix.Input[*string]
	// User ID of the Alertmanager instance configured for this stack.
	AlertmanagerUserId pulumix.Input[*int]
	// Description of stack.
	Description    pulumix.Input[*string]
	GraphiteName   pulumix.Input[*string]
	GraphiteStatus pulumix.Input[*string]
	GraphiteUrl    pulumix.Input[*string]
	GraphiteUserId pulumix.Input[*int]
	LogsName       pulumix.Input[*string]
	LogsStatus     pulumix.Input[*string]
	LogsUrl        pulumix.Input[*string]
	LogsUserId     pulumix.Input[*int]
	// Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
	Name pulumix.Input[*string]
	// Organization id to assign to this stack.
	OrgId pulumix.Input[*int]
	// Organization name to assign to this stack.
	OrgName pulumix.Input[*string]
	// Organization slug to assign to this stack.
	OrgSlug pulumix.Input[*string]
	// Prometheus name for this instance.
	PrometheusName pulumix.Input[*string]
	// Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
	PrometheusRemoteEndpoint pulumix.Input[*string]
	// Use this URL to send prometheus metrics to Grafana cloud
	PrometheusRemoteWriteEndpoint pulumix.Input[*string]
	// Prometheus status for this instance.
	PrometheusStatus pulumix.Input[*string]
	// Prometheus url for this instance.
	PrometheusUrl pulumix.Input[*string]
	// Prometheus user ID. Used for e.g. remote_write.
	PrometheusUserId pulumix.Input[*int]
	// Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	RegionSlug pulumix.Input[*string]
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug pulumix.Input[*string]
	// Status of the stack.
	Status       pulumix.Input[*string]
	TracesName   pulumix.Input[*string]
	TracesStatus pulumix.Input[*string]
	// Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
	TracesUrl    pulumix.Input[*string]
	TracesUserId pulumix.Input[*int]
	// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
	Url pulumix.Input[*string]
	// Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
	WaitForReadiness pulumix.Input[*bool]
	// How long to wait for readiness (if enabled). Defaults to `5m0s`.
	WaitForReadinessTimeout pulumix.Input[*string]
}

func (CloudStackState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackState)(nil)).Elem()
}

type cloudStackArgs struct {
	// Description of stack.
	Description *string `pulumi:"description"`
	// Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
	Name *string `pulumi:"name"`
	// Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	RegionSlug *string `pulumi:"regionSlug"`
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug string `pulumi:"slug"`
	// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
	Url *string `pulumi:"url"`
	// Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
	WaitForReadiness *bool `pulumi:"waitForReadiness"`
	// How long to wait for readiness (if enabled). Defaults to `5m0s`.
	WaitForReadinessTimeout *string `pulumi:"waitForReadinessTimeout"`
}

// The set of arguments for constructing a CloudStack resource.
type CloudStackArgs struct {
	// Description of stack.
	Description pulumix.Input[*string]
	// Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
	Name pulumix.Input[*string]
	// Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	RegionSlug pulumix.Input[*string]
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug pulumix.Input[string]
	// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
	Url pulumix.Input[*string]
	// Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
	WaitForReadiness pulumix.Input[*bool]
	// How long to wait for readiness (if enabled). Defaults to `5m0s`.
	WaitForReadinessTimeout pulumix.Input[*string]
}

func (CloudStackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackArgs)(nil)).Elem()
}

type CloudStackOutput struct{ *pulumi.OutputState }

func (CloudStackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudStack)(nil)).Elem()
}

func (o CloudStackOutput) ToCloudStackOutput() CloudStackOutput {
	return o
}

func (o CloudStackOutput) ToCloudStackOutputWithContext(ctx context.Context) CloudStackOutput {
	return o
}

func (o CloudStackOutput) ToOutput(ctx context.Context) pulumix.Output[CloudStack] {
	return pulumix.Output[CloudStack]{
		OutputState: o.OutputState,
	}
}

// Name of the Alertmanager instance configured for this stack.
func (o CloudStackOutput) AlertmanagerName() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.AlertmanagerName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the Alertmanager instance configured for this stack.
func (o CloudStackOutput) AlertmanagerStatus() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.AlertmanagerStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Base URL of the Alertmanager instance configured for this stack.
func (o CloudStackOutput) AlertmanagerUrl() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.AlertmanagerUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// User ID of the Alertmanager instance configured for this stack.
func (o CloudStackOutput) AlertmanagerUserId() pulumix.Output[int] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[int] { return v.AlertmanagerUserId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Description of stack.
func (o CloudStackOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o CloudStackOutput) GraphiteName() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.GraphiteName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) GraphiteStatus() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.GraphiteStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) GraphiteUrl() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.GraphiteUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) GraphiteUserId() pulumix.Output[int] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[int] { return v.GraphiteUserId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func (o CloudStackOutput) LogsName() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.LogsName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) LogsStatus() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.LogsStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) LogsUrl() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.LogsUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) LogsUserId() pulumix.Output[int] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[int] { return v.LogsUserId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
func (o CloudStackOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Organization id to assign to this stack.
func (o CloudStackOutput) OrgId() pulumix.Output[int] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[int] { return v.OrgId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Organization name to assign to this stack.
func (o CloudStackOutput) OrgName() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.OrgName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Organization slug to assign to this stack.
func (o CloudStackOutput) OrgSlug() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.OrgSlug })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Prometheus name for this instance.
func (o CloudStackOutput) PrometheusName() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.PrometheusName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
func (o CloudStackOutput) PrometheusRemoteEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.PrometheusRemoteEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Use this URL to send prometheus metrics to Grafana cloud
func (o CloudStackOutput) PrometheusRemoteWriteEndpoint() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.PrometheusRemoteWriteEndpoint })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Prometheus status for this instance.
func (o CloudStackOutput) PrometheusStatus() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.PrometheusStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Prometheus url for this instance.
func (o CloudStackOutput) PrometheusUrl() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.PrometheusUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Prometheus user ID. Used for e.g. remote_write.
func (o CloudStackOutput) PrometheusUserId() pulumix.Output[int] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[int] { return v.PrometheusUserId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
func (o CloudStackOutput) RegionSlug() pulumix.Output[*string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[*string] { return v.RegionSlug })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
// available at “https://\n\n.grafana.net".
func (o CloudStackOutput) Slug() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.Slug })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Status of the stack.
func (o CloudStackOutput) Status() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.Status })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) TracesName() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.TracesName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) TracesStatus() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.TracesStatus })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
func (o CloudStackOutput) TracesUrl() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.TracesUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackOutput) TracesUserId() pulumix.Output[int] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[int] { return v.TracesUserId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
func (o CloudStackOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
func (o CloudStackOutput) WaitForReadiness() pulumix.Output[*bool] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[*bool] { return v.WaitForReadiness })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// How long to wait for readiness (if enabled). Defaults to `5m0s`.
func (o CloudStackOutput) WaitForReadinessTimeout() pulumix.Output[*string] {
	value := pulumix.Apply[CloudStack](o, func(v CloudStack) pulumix.Output[*string] { return v.WaitForReadinessTimeout })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudStackOutput{})
}
