// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/)
// * [API documentation](https://grafana.com/docs/grafana-cloud/reference/cloud-api/#create-an-access-policy)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := grafana.GetCloudOrganization(ctx, &grafana.GetCloudOrganizationArgs{
//				Slug: pulumi.StringRef("<your org slug>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testCloudAccessPolicy, err := grafana.NewCloudAccessPolicy(ctx, "testCloudAccessPolicy", &grafana.CloudAccessPolicyArgs{
//				Region:      pulumi.String("us"),
//				DisplayName: pulumi.String("My Policy"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("metrics:read"),
//					pulumi.String("logs:read"),
//				},
//				Realms: grafana.CloudAccessPolicyRealmArray{
//					&grafana.CloudAccessPolicyRealmArgs{
//						Type:       pulumi.String("org"),
//						Identifier: *pulumi.String(current.Id),
//						LabelPolicies: grafana.CloudAccessPolicyRealmLabelPolicyArray{
//							&grafana.CloudAccessPolicyRealmLabelPolicyArgs{
//								Selector: pulumi.String("{namespace=\"default\"}"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewCloudAccessPolicyToken(ctx, "testCloudAccessPolicyToken", &grafana.CloudAccessPolicyTokenArgs{
//				Region:         pulumi.String("us"),
//				AccessPolicyId: testCloudAccessPolicy.PolicyId,
//				DisplayName:    pulumi.String("My Policy Token"),
//				ExpiresAt:      pulumi.String("2023-01-01T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/cloudAccessPolicy:CloudAccessPolicy policyname {{region}}/{{policy_id}}
//
// ```
type CloudAccessPolicy struct {
	pulumi.CustomResourceState

	// Creation date of the access policy.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// Display name of the access policy. Defaults to the name.
	DisplayName pulumix.Output[*string] `pulumi:"displayName"`
	// Name of the access policy.
	Name pulumix.Output[string] `pulumi:"name"`
	// ID of the access policy.
	PolicyId pulumix.Output[string]                                                     `pulumi:"policyId"`
	Realms   pulumix.GArrayOutput[CloudAccessPolicyRealm, CloudAccessPolicyRealmOutput] `pulumi:"realms"`
	// Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region pulumix.Output[string] `pulumi:"region"`
	// Scopes of the access policy. See https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/#scopes for possible values.
	Scopes pulumix.ArrayOutput[string] `pulumi:"scopes"`
	// Last update date of the access policy.
	UpdatedAt pulumix.Output[string] `pulumi:"updatedAt"`
}

// NewCloudAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewCloudAccessPolicy(ctx *pulumi.Context,
	name string, args *CloudAccessPolicyArgs, opts ...pulumi.ResourceOption) (*CloudAccessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Realms == nil {
		return nil, errors.New("invalid value for required argument 'Realms'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudAccessPolicy
	err := ctx.RegisterResource("grafana:index/cloudAccessPolicy:CloudAccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudAccessPolicy gets an existing CloudAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudAccessPolicyState, opts ...pulumi.ResourceOption) (*CloudAccessPolicy, error) {
	var resource CloudAccessPolicy
	err := ctx.ReadResource("grafana:index/cloudAccessPolicy:CloudAccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudAccessPolicy resources.
type cloudAccessPolicyState struct {
	// Creation date of the access policy.
	CreatedAt *string `pulumi:"createdAt"`
	// Display name of the access policy. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Name of the access policy.
	Name *string `pulumi:"name"`
	// ID of the access policy.
	PolicyId *string                  `pulumi:"policyId"`
	Realms   []CloudAccessPolicyRealm `pulumi:"realms"`
	// Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region *string `pulumi:"region"`
	// Scopes of the access policy. See https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/#scopes for possible values.
	Scopes []string `pulumi:"scopes"`
	// Last update date of the access policy.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type CloudAccessPolicyState struct {
	// Creation date of the access policy.
	CreatedAt pulumix.Input[*string]
	// Display name of the access policy. Defaults to the name.
	DisplayName pulumix.Input[*string]
	// Name of the access policy.
	Name pulumix.Input[*string]
	// ID of the access policy.
	PolicyId pulumix.Input[*string]
	Realms   pulumix.Input[[]*CloudAccessPolicyRealmArgs]
	// Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region pulumix.Input[*string]
	// Scopes of the access policy. See https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/#scopes for possible values.
	Scopes pulumix.Input[[]string]
	// Last update date of the access policy.
	UpdatedAt pulumix.Input[*string]
}

func (CloudAccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudAccessPolicyState)(nil)).Elem()
}

type cloudAccessPolicyArgs struct {
	// Display name of the access policy. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Name of the access policy.
	Name   *string                  `pulumi:"name"`
	Realms []CloudAccessPolicyRealm `pulumi:"realms"`
	// Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region string `pulumi:"region"`
	// Scopes of the access policy. See https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/#scopes for possible values.
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a CloudAccessPolicy resource.
type CloudAccessPolicyArgs struct {
	// Display name of the access policy. Defaults to the name.
	DisplayName pulumix.Input[*string]
	// Name of the access policy.
	Name   pulumix.Input[*string]
	Realms pulumix.Input[[]*CloudAccessPolicyRealmArgs]
	// Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region pulumix.Input[string]
	// Scopes of the access policy. See https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/#scopes for possible values.
	Scopes pulumix.Input[[]string]
}

func (CloudAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudAccessPolicyArgs)(nil)).Elem()
}

type CloudAccessPolicyOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicy)(nil)).Elem()
}

func (o CloudAccessPolicyOutput) ToCloudAccessPolicyOutput() CloudAccessPolicyOutput {
	return o
}

func (o CloudAccessPolicyOutput) ToCloudAccessPolicyOutputWithContext(ctx context.Context) CloudAccessPolicyOutput {
	return o
}

func (o CloudAccessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CloudAccessPolicy] {
	return pulumix.Output[CloudAccessPolicy]{
		OutputState: o.OutputState,
	}
}

// Creation date of the access policy.
func (o CloudAccessPolicyOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Display name of the access policy. Defaults to the name.
func (o CloudAccessPolicyOutput) DisplayName() pulumix.Output[*string] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.Output[*string] { return v.DisplayName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the access policy.
func (o CloudAccessPolicyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the access policy.
func (o CloudAccessPolicyOutput) PolicyId() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.Output[string] { return v.PolicyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudAccessPolicyOutput) Realms() pulumix.GArrayOutput[CloudAccessPolicyRealm, CloudAccessPolicyRealmOutput] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.GArrayOutput[CloudAccessPolicyRealm, CloudAccessPolicyRealmOutput] {
		return v.Realms
	})
	unwrapped := pulumix.Flatten[[]CloudAccessPolicyRealm, pulumix.GArrayOutput[CloudAccessPolicyRealm, CloudAccessPolicyRealmOutput]](value)
	return pulumix.GArrayOutput[CloudAccessPolicyRealm, CloudAccessPolicyRealmOutput]{OutputState: unwrapped.OutputState}
}

// Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
func (o CloudAccessPolicyOutput) Region() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.Output[string] { return v.Region })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Scopes of the access policy. See https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/#scopes for possible values.
func (o CloudAccessPolicyOutput) Scopes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.ArrayOutput[string] { return v.Scopes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Last update date of the access policy.
func (o CloudAccessPolicyOutput) UpdatedAt() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicy](o, func(v CloudAccessPolicy) pulumix.Output[string] { return v.UpdatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudAccessPolicyOutput{})
}
