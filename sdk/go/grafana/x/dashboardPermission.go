// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard_permissions/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := grafana.NewTeam(ctx, "team", nil)
//			if err != nil {
//				return err
//			}
//			user, err := grafana.NewUser(ctx, "user", &grafana.UserArgs{
//				Email: pulumi.String("user.name@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			metrics, err := grafana.NewDashboard(ctx, "metrics", &grafana.DashboardArgs{
//				ConfigJson: readFileOrPanic("grafana-dashboard.json"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewDashboardPermission(ctx, "collectionPermission", &grafana.DashboardPermissionArgs{
//				DashboardUid: metrics.Uid,
//				Permissions: grafana.DashboardPermissionPermissionArray{
//					&grafana.DashboardPermissionPermissionArgs{
//						Role:       pulumi.String("Editor"),
//						Permission: pulumi.String("Edit"),
//					},
//					&grafana.DashboardPermissionPermissionArgs{
//						TeamId:     team.ID(),
//						Permission: pulumi.String("View"),
//					},
//					&grafana.DashboardPermissionPermissionArgs{
//						UserId:     user.ID(),
//						Permission: pulumi.String("Admin"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/dashboardPermission:DashboardPermission dashboard_name {{dashboard_uid}}
//
// ```
type DashboardPermission struct {
	pulumi.CustomResourceState

	// ID of the dashboard to apply permissions to. Deprecated: use `dashboardUid` instead.
	//
	// Deprecated: use `dashboard_uid` instead
	DashboardId pulumix.Output[int] `pulumi:"dashboardId"`
	// UID of the dashboard to apply permissions to.
	DashboardUid pulumix.Output[string] `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.GArrayOutput[DashboardPermissionPermission, DashboardPermissionPermissionOutput] `pulumi:"permissions"`
}

// NewDashboardPermission registers a new resource with the given unique name, arguments, and options.
func NewDashboardPermission(ctx *pulumi.Context,
	name string, args *DashboardPermissionArgs, opts ...pulumi.ResourceOption) (*DashboardPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardPermission
	err := ctx.RegisterResource("grafana:index/dashboardPermission:DashboardPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardPermission gets an existing DashboardPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardPermissionState, opts ...pulumi.ResourceOption) (*DashboardPermission, error) {
	var resource DashboardPermission
	err := ctx.ReadResource("grafana:index/dashboardPermission:DashboardPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardPermission resources.
type dashboardPermissionState struct {
	// ID of the dashboard to apply permissions to. Deprecated: use `dashboardUid` instead.
	//
	// Deprecated: use `dashboard_uid` instead
	DashboardId *int `pulumi:"dashboardId"`
	// UID of the dashboard to apply permissions to.
	DashboardUid *string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []DashboardPermissionPermission `pulumi:"permissions"`
}

type DashboardPermissionState struct {
	// ID of the dashboard to apply permissions to. Deprecated: use `dashboardUid` instead.
	//
	// Deprecated: use `dashboard_uid` instead
	DashboardId pulumix.Input[*int]
	// UID of the dashboard to apply permissions to.
	DashboardUid pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*DashboardPermissionPermissionArgs]
}

func (DashboardPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardPermissionState)(nil)).Elem()
}

type dashboardPermissionArgs struct {
	// ID of the dashboard to apply permissions to. Deprecated: use `dashboardUid` instead.
	//
	// Deprecated: use `dashboard_uid` instead
	DashboardId *int `pulumi:"dashboardId"`
	// UID of the dashboard to apply permissions to.
	DashboardUid *string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []DashboardPermissionPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a DashboardPermission resource.
type DashboardPermissionArgs struct {
	// ID of the dashboard to apply permissions to. Deprecated: use `dashboardUid` instead.
	//
	// Deprecated: use `dashboard_uid` instead
	DashboardId pulumix.Input[*int]
	// UID of the dashboard to apply permissions to.
	DashboardUid pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*DashboardPermissionPermissionArgs]
}

func (DashboardPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardPermissionArgs)(nil)).Elem()
}

type DashboardPermissionOutput struct{ *pulumi.OutputState }

func (DashboardPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermission)(nil)).Elem()
}

func (o DashboardPermissionOutput) ToDashboardPermissionOutput() DashboardPermissionOutput {
	return o
}

func (o DashboardPermissionOutput) ToDashboardPermissionOutputWithContext(ctx context.Context) DashboardPermissionOutput {
	return o
}

func (o DashboardPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardPermission] {
	return pulumix.Output[DashboardPermission]{
		OutputState: o.OutputState,
	}
}

// ID of the dashboard to apply permissions to. Deprecated: use `dashboardUid` instead.
//
// Deprecated: use `dashboard_uid` instead
func (o DashboardPermissionOutput) DashboardId() pulumix.Output[int] {
	value := pulumix.Apply[DashboardPermission](o, func(v DashboardPermission) pulumix.Output[int] { return v.DashboardId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// UID of the dashboard to apply permissions to.
func (o DashboardPermissionOutput) DashboardUid() pulumix.Output[string] {
	value := pulumix.Apply[DashboardPermission](o, func(v DashboardPermission) pulumix.Output[string] { return v.DashboardUid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o DashboardPermissionOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[DashboardPermission](o, func(v DashboardPermission) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The permission items to add/update. Items that are omitted from the list will be removed.
func (o DashboardPermissionOutput) Permissions() pulumix.GArrayOutput[DashboardPermissionPermission, DashboardPermissionPermissionOutput] {
	value := pulumix.Apply[DashboardPermission](o, func(v DashboardPermission) pulumix.GArrayOutput[DashboardPermissionPermission, DashboardPermissionPermissionOutput] {
		return v.Permissions
	})
	unwrapped := pulumix.Flatten[[]DashboardPermissionPermission, pulumix.GArrayOutput[DashboardPermissionPermission, DashboardPermissionPermissionOutput]](value)
	return pulumix.GArrayOutput[DashboardPermissionPermission, DashboardPermissionPermissionOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(DashboardPermissionOutput{})
}
