// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This data source is going to be deprecated, please use outgoing webhook data source instead.
// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
//
// !> Deprecated: Use the `OncallOutgoingWebhook` data source instead.
func GetOncallAction(ctx *pulumi.Context, args *GetOncallActionArgs, opts ...pulumi.InvokeOption) (*GetOncallActionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOncallActionResult
	err := ctx.Invoke("grafana:index/getOncallAction:getOncallAction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOncallAction.
type GetOncallActionArgs struct {
	// The action name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getOncallAction.
type GetOncallActionResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The action name.
	Name string `pulumi:"name"`
}

func GetOncallActionOutput(ctx *pulumi.Context, args GetOncallActionOutputArgs, opts ...pulumi.InvokeOption) GetOncallActionResultOutput {
	outputResult := pulumix.ApplyErr[*GetOncallActionArgs](args.ToOutput(), func(plainArgs *GetOncallActionArgs) (*GetOncallActionResult, error) {
		return GetOncallAction(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetOncallActionResultOutput, *GetOncallActionResult](outputResult)
}

// A collection of arguments for invoking getOncallAction.
type GetOncallActionOutputArgs struct {
	// The action name.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args GetOncallActionOutputArgs) ToOutput() pulumix.Output[*GetOncallActionArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetOncallActionArgs {
		return &GetOncallActionArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type GetOncallActionResultOutput struct{ *pulumi.OutputState }

func (GetOncallActionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOncallActionResult)(nil)).Elem()
}

func (o GetOncallActionResultOutput) ToOutput(context.Context) pulumix.Output[*GetOncallActionResult] {
	return pulumix.Output[*GetOncallActionResult]{
		OutputState: o.OutputState,
	}
}

func (o GetOncallActionResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallActionResult](o, func(v *GetOncallActionResult) string { return v.Id })
}

func (o GetOncallActionResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallActionResult](o, func(v *GetOncallActionResult) string { return v.Name })
}
