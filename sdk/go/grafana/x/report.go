// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This resource is available only with Grafana Enterprise 7.+.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/create-reports/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/reporting/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testDashboard, err := grafana.NewDashboard(ctx, "testDashboard", &grafana.DashboardArgs{
//				ConfigJson: pulumi.String("{\n  \"title\": \"Dashboard for report\",\n  \"uid\": \"report\"\n}\n"),
//				Message:    pulumi.String("inital commit."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewReport(ctx, "testReport", &grafana.ReportArgs{
//				DashboardUid: testDashboard.Uid,
//				Recipients: pulumi.StringArray{
//					pulumi.String("some@email.com"),
//				},
//				Schedule: &grafana.ReportScheduleArgs{
//					Frequency: pulumi.String("hourly"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Report struct {
	pulumi.CustomResourceState

	// Dashboard to be sent in the report. This field is deprecated, use `dashboardUid` instead.
	//
	// Deprecated: Use dashboard_uid instead
	DashboardId pulumix.Output[int] `pulumi:"dashboardId"`
	// Dashboard to be sent in the report.
	DashboardUid pulumix.Output[string] `pulumi:"dashboardUid"`
	// Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
	Formats pulumix.ArrayOutput[string] `pulumi:"formats"`
	// Whether to include a link to the dashboard in the report. Defaults to `true`.
	IncludeDashboardLink pulumix.Output[*bool] `pulumi:"includeDashboardLink"`
	// Whether to include a CSV file of table panel data. Defaults to `false`.
	IncludeTableCsv pulumix.Output[*bool] `pulumi:"includeTableCsv"`
	// Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
	Layout pulumix.Output[*string] `pulumi:"layout"`
	// Message to be sent in the report.
	Message pulumix.Output[*string] `pulumi:"message"`
	// Name of the report.
	Name pulumix.Output[string] `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
	Orientation pulumix.Output[*string] `pulumi:"orientation"`
	// List of recipients of the report.
	Recipients pulumix.ArrayOutput[string] `pulumi:"recipients"`
	// Reply-to email address of the report.
	ReplyTo pulumix.Output[*string] `pulumi:"replyTo"`
	// Schedule of the report.
	Schedule pulumix.GPtrOutput[ReportSchedule, ReportScheduleOutput] `pulumi:"schedule"`
	// Time range of the report.
	TimeRange pulumix.GPtrOutput[ReportTimeRange, ReportTimeRangeOutput] `pulumi:"timeRange"`
}

// NewReport registers a new resource with the given unique name, arguments, and options.
func NewReport(ctx *pulumi.Context,
	name string, args *ReportArgs, opts ...pulumi.ResourceOption) (*Report, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Recipients == nil {
		return nil, errors.New("invalid value for required argument 'Recipients'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Report
	err := ctx.RegisterResource("grafana:index/report:Report", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReport gets an existing Report resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportState, opts ...pulumi.ResourceOption) (*Report, error) {
	var resource Report
	err := ctx.ReadResource("grafana:index/report:Report", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Report resources.
type reportState struct {
	// Dashboard to be sent in the report. This field is deprecated, use `dashboardUid` instead.
	//
	// Deprecated: Use dashboard_uid instead
	DashboardId *int `pulumi:"dashboardId"`
	// Dashboard to be sent in the report.
	DashboardUid *string `pulumi:"dashboardUid"`
	// Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
	Formats []string `pulumi:"formats"`
	// Whether to include a link to the dashboard in the report. Defaults to `true`.
	IncludeDashboardLink *bool `pulumi:"includeDashboardLink"`
	// Whether to include a CSV file of table panel data. Defaults to `false`.
	IncludeTableCsv *bool `pulumi:"includeTableCsv"`
	// Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
	Layout *string `pulumi:"layout"`
	// Message to be sent in the report.
	Message *string `pulumi:"message"`
	// Name of the report.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
	Orientation *string `pulumi:"orientation"`
	// List of recipients of the report.
	Recipients []string `pulumi:"recipients"`
	// Reply-to email address of the report.
	ReplyTo *string `pulumi:"replyTo"`
	// Schedule of the report.
	Schedule *ReportSchedule `pulumi:"schedule"`
	// Time range of the report.
	TimeRange *ReportTimeRange `pulumi:"timeRange"`
}

type ReportState struct {
	// Dashboard to be sent in the report. This field is deprecated, use `dashboardUid` instead.
	//
	// Deprecated: Use dashboard_uid instead
	DashboardId pulumix.Input[*int]
	// Dashboard to be sent in the report.
	DashboardUid pulumix.Input[*string]
	// Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
	Formats pulumix.Input[[]string]
	// Whether to include a link to the dashboard in the report. Defaults to `true`.
	IncludeDashboardLink pulumix.Input[*bool]
	// Whether to include a CSV file of table panel data. Defaults to `false`.
	IncludeTableCsv pulumix.Input[*bool]
	// Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
	Layout pulumix.Input[*string]
	// Message to be sent in the report.
	Message pulumix.Input[*string]
	// Name of the report.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
	Orientation pulumix.Input[*string]
	// List of recipients of the report.
	Recipients pulumix.Input[[]string]
	// Reply-to email address of the report.
	ReplyTo pulumix.Input[*string]
	// Schedule of the report.
	Schedule pulumix.Input[*ReportScheduleArgs]
	// Time range of the report.
	TimeRange pulumix.Input[*ReportTimeRangeArgs]
}

func (ReportState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportState)(nil)).Elem()
}

type reportArgs struct {
	// Dashboard to be sent in the report. This field is deprecated, use `dashboardUid` instead.
	//
	// Deprecated: Use dashboard_uid instead
	DashboardId *int `pulumi:"dashboardId"`
	// Dashboard to be sent in the report.
	DashboardUid *string `pulumi:"dashboardUid"`
	// Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
	Formats []string `pulumi:"formats"`
	// Whether to include a link to the dashboard in the report. Defaults to `true`.
	IncludeDashboardLink *bool `pulumi:"includeDashboardLink"`
	// Whether to include a CSV file of table panel data. Defaults to `false`.
	IncludeTableCsv *bool `pulumi:"includeTableCsv"`
	// Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
	Layout *string `pulumi:"layout"`
	// Message to be sent in the report.
	Message *string `pulumi:"message"`
	// Name of the report.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
	Orientation *string `pulumi:"orientation"`
	// List of recipients of the report.
	Recipients []string `pulumi:"recipients"`
	// Reply-to email address of the report.
	ReplyTo *string `pulumi:"replyTo"`
	// Schedule of the report.
	Schedule ReportSchedule `pulumi:"schedule"`
	// Time range of the report.
	TimeRange *ReportTimeRange `pulumi:"timeRange"`
}

// The set of arguments for constructing a Report resource.
type ReportArgs struct {
	// Dashboard to be sent in the report. This field is deprecated, use `dashboardUid` instead.
	//
	// Deprecated: Use dashboard_uid instead
	DashboardId pulumix.Input[*int]
	// Dashboard to be sent in the report.
	DashboardUid pulumix.Input[*string]
	// Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
	Formats pulumix.Input[[]string]
	// Whether to include a link to the dashboard in the report. Defaults to `true`.
	IncludeDashboardLink pulumix.Input[*bool]
	// Whether to include a CSV file of table panel data. Defaults to `false`.
	IncludeTableCsv pulumix.Input[*bool]
	// Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
	Layout pulumix.Input[*string]
	// Message to be sent in the report.
	Message pulumix.Input[*string]
	// Name of the report.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
	Orientation pulumix.Input[*string]
	// List of recipients of the report.
	Recipients pulumix.Input[[]string]
	// Reply-to email address of the report.
	ReplyTo pulumix.Input[*string]
	// Schedule of the report.
	Schedule pulumix.Input[*ReportScheduleArgs]
	// Time range of the report.
	TimeRange pulumix.Input[*ReportTimeRangeArgs]
}

func (ReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportArgs)(nil)).Elem()
}

type ReportOutput struct{ *pulumi.OutputState }

func (ReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Report)(nil)).Elem()
}

func (o ReportOutput) ToReportOutput() ReportOutput {
	return o
}

func (o ReportOutput) ToReportOutputWithContext(ctx context.Context) ReportOutput {
	return o
}

func (o ReportOutput) ToOutput(ctx context.Context) pulumix.Output[Report] {
	return pulumix.Output[Report]{
		OutputState: o.OutputState,
	}
}

// Dashboard to be sent in the report. This field is deprecated, use `dashboardUid` instead.
//
// Deprecated: Use dashboard_uid instead
func (o ReportOutput) DashboardId() pulumix.Output[int] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[int] { return v.DashboardId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Dashboard to be sent in the report.
func (o ReportOutput) DashboardUid() pulumix.Output[string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[string] { return v.DashboardUid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.
func (o ReportOutput) Formats() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.ArrayOutput[string] { return v.Formats })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether to include a link to the dashboard in the report. Defaults to `true`.
func (o ReportOutput) IncludeDashboardLink() pulumix.Output[*bool] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[*bool] { return v.IncludeDashboardLink })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether to include a CSV file of table panel data. Defaults to `false`.
func (o ReportOutput) IncludeTableCsv() pulumix.Output[*bool] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[*bool] { return v.IncludeTableCsv })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Layout of the report. Allowed values: `simple`, `grid`. Defaults to `grid`.
func (o ReportOutput) Layout() pulumix.Output[*string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[*string] { return v.Layout })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Message to be sent in the report.
func (o ReportOutput) Message() pulumix.Output[*string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[*string] { return v.Message })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the report.
func (o ReportOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o ReportOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Orientation of the report. Allowed values: `landscape`, `portrait`. Defaults to `landscape`.
func (o ReportOutput) Orientation() pulumix.Output[*string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[*string] { return v.Orientation })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// List of recipients of the report.
func (o ReportOutput) Recipients() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.ArrayOutput[string] { return v.Recipients })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Reply-to email address of the report.
func (o ReportOutput) ReplyTo() pulumix.Output[*string] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.Output[*string] { return v.ReplyTo })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Schedule of the report.
func (o ReportOutput) Schedule() pulumix.GPtrOutput[ReportSchedule, ReportScheduleOutput] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.GPtrOutput[ReportSchedule, ReportScheduleOutput] { return v.Schedule })
	unwrapped := pulumix.Flatten[*ReportSchedule, pulumix.GPtrOutput[ReportSchedule, ReportScheduleOutput]](value)
	return pulumix.GPtrOutput[ReportSchedule, ReportScheduleOutput]{OutputState: unwrapped.OutputState}
}

// Time range of the report.
func (o ReportOutput) TimeRange() pulumix.GPtrOutput[ReportTimeRange, ReportTimeRangeOutput] {
	value := pulumix.Apply[Report](o, func(v Report) pulumix.GPtrOutput[ReportTimeRange, ReportTimeRangeOutput] { return v.TimeRange })
	unwrapped := pulumix.Flatten[*ReportTimeRange, pulumix.GPtrOutput[ReportTimeRange, ReportTimeRangeOutput]](value)
	return pulumix.GPtrOutput[ReportTimeRange, ReportTimeRangeOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(ReportOutput{})
}
