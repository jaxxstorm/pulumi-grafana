// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := grafana.NewApiKey(ctx, "foo", &grafana.ApiKeyArgs{
//				Role: pulumi.String("Viewer"),
//			})
//			if err != nil {
//				return err
//			}
//			bar, err := grafana.NewApiKey(ctx, "bar", &grafana.ApiKeyArgs{
//				Role:          pulumi.String("Admin"),
//				SecondsToLive: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("apiKeyFooKeyOnly", foo.Key)
//			ctx.Export("apiKeyBar", bar)
//			return nil
//		})
//	}
//
// ```
type ApiKey struct {
	pulumi.CustomResourceState

	Expiration pulumix.Output[string] `pulumi:"expiration"`
	Key        pulumix.Output[string] `pulumi:"key"`
	Name       pulumix.Output[string] `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId         pulumix.Output[*string] `pulumi:"orgId"`
	Role          pulumix.Output[string]  `pulumi:"role"`
	SecondsToLive pulumix.Output[*int]    `pulumi:"secondsToLive"`
}

// NewApiKey registers a new resource with the given unique name, arguments, and options.
func NewApiKey(ctx *pulumi.Context,
	name string, args *ApiKeyArgs, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiKey
	err := ctx.RegisterResource("grafana:index/apiKey:ApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiKey gets an existing ApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiKeyState, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	var resource ApiKey
	err := ctx.ReadResource("grafana:index/apiKey:ApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiKey resources.
type apiKeyState struct {
	Expiration *string `pulumi:"expiration"`
	Key        *string `pulumi:"key"`
	Name       *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId         *string `pulumi:"orgId"`
	Role          *string `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
}

type ApiKeyState struct {
	Expiration pulumix.Input[*string]
	Key        pulumix.Input[*string]
	Name       pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId         pulumix.Input[*string]
	Role          pulumix.Input[*string]
	SecondsToLive pulumix.Input[*int]
}

func (ApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyState)(nil)).Elem()
}

type apiKeyArgs struct {
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId         *string `pulumi:"orgId"`
	Role          string  `pulumi:"role"`
	SecondsToLive *int    `pulumi:"secondsToLive"`
}

// The set of arguments for constructing a ApiKey resource.
type ApiKeyArgs struct {
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId         pulumix.Input[*string]
	Role          pulumix.Input[string]
	SecondsToLive pulumix.Input[*int]
}

func (ApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyArgs)(nil)).Elem()
}

type ApiKeyOutput struct{ *pulumi.OutputState }

func (ApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKey)(nil)).Elem()
}

func (o ApiKeyOutput) ToApiKeyOutput() ApiKeyOutput {
	return o
}

func (o ApiKeyOutput) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return o
}

func (o ApiKeyOutput) ToOutput(ctx context.Context) pulumix.Output[ApiKey] {
	return pulumix.Output[ApiKey]{
		OutputState: o.OutputState,
	}
}

func (o ApiKeyOutput) Expiration() pulumix.Output[string] {
	value := pulumix.Apply[ApiKey](o, func(v ApiKey) pulumix.Output[string] { return v.Expiration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ApiKeyOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[ApiKey](o, func(v ApiKey) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ApiKeyOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[ApiKey](o, func(v ApiKey) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o ApiKeyOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[ApiKey](o, func(v ApiKey) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func (o ApiKeyOutput) Role() pulumix.Output[string] {
	value := pulumix.Apply[ApiKey](o, func(v ApiKey) pulumix.Output[string] { return v.Role })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o ApiKeyOutput) SecondsToLive() pulumix.Output[*int] {
	value := pulumix.Apply[ApiKey](o, func(v ApiKey) pulumix.Output[*int] { return v.SecondsToLive })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(ApiKeyOutput{})
}
