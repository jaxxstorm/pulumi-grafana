// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Datasource for retrieving all dashboards. Specify list of folder IDs to search in for dashboards.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
// * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
// * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
func GetDashboards(ctx *pulumi.Context, args *GetDashboardsArgs, opts ...pulumi.InvokeOption) (*GetDashboardsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDashboardsResult
	err := ctx.Invoke("grafana:index/getDashboards:getDashboards", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDashboards.
type GetDashboardsArgs struct {
	// Numerical IDs of Grafana folders containing dashboards. Specify to filter for dashboards by folder (eg. `[0]` for General folder), or leave blank to get all dashboards in all folders.
	FolderIds []int `pulumi:"folderIds"`
	// Maximum number of dashboard search results to return. Defaults to `5000`.
	Limit *int `pulumi:"limit"`
	// List of string Grafana dashboard tags to search for, eg. `["prod"]`. Used only as search input, i.e., attribute value will remain unchanged.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getDashboards.
type GetDashboardsResult struct {
	Dashboards []GetDashboardsDashboard `pulumi:"dashboards"`
	// Numerical IDs of Grafana folders containing dashboards. Specify to filter for dashboards by folder (eg. `[0]` for General folder), or leave blank to get all dashboards in all folders.
	FolderIds []int `pulumi:"folderIds"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Maximum number of dashboard search results to return. Defaults to `5000`.
	Limit *int `pulumi:"limit"`
	// List of string Grafana dashboard tags to search for, eg. `["prod"]`. Used only as search input, i.e., attribute value will remain unchanged.
	Tags []string `pulumi:"tags"`
}

func GetDashboardsOutput(ctx *pulumi.Context, args GetDashboardsOutputArgs, opts ...pulumi.InvokeOption) GetDashboardsResultOutput {
	outputResult := pulumix.ApplyErr[*GetDashboardsArgs](args.ToOutput(), func(plainArgs *GetDashboardsArgs) (*GetDashboardsResult, error) {
		return GetDashboards(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetDashboardsResultOutput, *GetDashboardsResult](outputResult)
}

// A collection of arguments for invoking getDashboards.
type GetDashboardsOutputArgs struct {
	// Numerical IDs of Grafana folders containing dashboards. Specify to filter for dashboards by folder (eg. `[0]` for General folder), or leave blank to get all dashboards in all folders.
	FolderIds pulumix.Input[[]int] `pulumi:"folderIds"`
	// Maximum number of dashboard search results to return. Defaults to `5000`.
	Limit pulumix.Input[*int] `pulumi:"limit"`
	// List of string Grafana dashboard tags to search for, eg. `["prod"]`. Used only as search input, i.e., attribute value will remain unchanged.
	Tags pulumix.Input[[]string] `pulumi:"tags"`
}

func (args GetDashboardsOutputArgs) ToOutput() pulumix.Output[*GetDashboardsArgs] {
	allArgs := pulumix.All(
		args.FolderIds.ToOutput(context.Background()).AsAny(),
		args.Limit.ToOutput(context.Background()).AsAny(),
		args.Tags.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetDashboardsArgs {
		return &GetDashboardsArgs{
			FolderIds: resolvedArgs[0].([]int),
			Limit:     resolvedArgs[1].(*int),
			Tags:      resolvedArgs[2].([]string),
		}
	})
}

type GetDashboardsResultOutput struct{ *pulumi.OutputState }

func (GetDashboardsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsResult)(nil)).Elem()
}

func (o GetDashboardsResultOutput) ToOutput(context.Context) pulumix.Output[*GetDashboardsResult] {
	return pulumix.Output[*GetDashboardsResult]{
		OutputState: o.OutputState,
	}
}

func (o GetDashboardsResultOutput) Dashboards() pulumix.GArrayOutput[GetDashboardsDashboard, GetDashboardsDashboardOutput] {
	value := pulumix.Apply[*GetDashboardsResult](o, func(v *GetDashboardsResult) []GetDashboardsDashboard { return v.Dashboards })
	return pulumix.GArrayOutput[GetDashboardsDashboard, GetDashboardsDashboardOutput]{
		OutputState: value.OutputState,
	}
}

func (o GetDashboardsResultOutput) FolderIds() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[*GetDashboardsResult](o, func(v *GetDashboardsResult) []int { return v.FolderIds })
	return pulumix.ArrayOutput[int]{
		OutputState: value.OutputState,
	}
}

func (o GetDashboardsResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetDashboardsResult](o, func(v *GetDashboardsResult) string { return v.Id })
}

func (o GetDashboardsResultOutput) Limit() pulumix.Output[*int] {
	return pulumix.Apply[*GetDashboardsResult](o, func(v *GetDashboardsResult) *int { return v.Limit })
}

func (o GetDashboardsResultOutput) Tags() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*GetDashboardsResult](o, func(v *GetDashboardsResult) []string { return v.Tags })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
