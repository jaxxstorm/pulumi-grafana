// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Grafana Cloud Plugin Installations.
//
// * [Plugin Catalog](https://grafana.com/grafana/plugins/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewCloudPluginInstallation(ctx, "test", &grafana.CloudPluginInstallationArgs{
//				Slug:      pulumi.String("some-plugin"),
//				StackSlug: pulumi.String("stackname"),
//				Version:   pulumi.String("1.2.3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/cloudPluginInstallation:CloudPluginInstallation plugin_name {{stack_slug}}_{{plugin_slug}}
//
// ```
type CloudPluginInstallation struct {
	pulumi.CustomResourceState

	// Slug of the plugin to be installed.
	Slug pulumix.Output[string] `pulumi:"slug"`
	// The stack id to which the plugin should be installed.
	StackSlug pulumix.Output[string] `pulumi:"stackSlug"`
	// Version of the plugin to be installed.
	Version pulumix.Output[string] `pulumi:"version"`
}

// NewCloudPluginInstallation registers a new resource with the given unique name, arguments, and options.
func NewCloudPluginInstallation(ctx *pulumi.Context,
	name string, args *CloudPluginInstallationArgs, opts ...pulumi.ResourceOption) (*CloudPluginInstallation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.StackSlug == nil {
		return nil, errors.New("invalid value for required argument 'StackSlug'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudPluginInstallation
	err := ctx.RegisterResource("grafana:index/cloudPluginInstallation:CloudPluginInstallation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudPluginInstallation gets an existing CloudPluginInstallation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudPluginInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudPluginInstallationState, opts ...pulumi.ResourceOption) (*CloudPluginInstallation, error) {
	var resource CloudPluginInstallation
	err := ctx.ReadResource("grafana:index/cloudPluginInstallation:CloudPluginInstallation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudPluginInstallation resources.
type cloudPluginInstallationState struct {
	// Slug of the plugin to be installed.
	Slug *string `pulumi:"slug"`
	// The stack id to which the plugin should be installed.
	StackSlug *string `pulumi:"stackSlug"`
	// Version of the plugin to be installed.
	Version *string `pulumi:"version"`
}

type CloudPluginInstallationState struct {
	// Slug of the plugin to be installed.
	Slug pulumix.Input[*string]
	// The stack id to which the plugin should be installed.
	StackSlug pulumix.Input[*string]
	// Version of the plugin to be installed.
	Version pulumix.Input[*string]
}

func (CloudPluginInstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudPluginInstallationState)(nil)).Elem()
}

type cloudPluginInstallationArgs struct {
	// Slug of the plugin to be installed.
	Slug string `pulumi:"slug"`
	// The stack id to which the plugin should be installed.
	StackSlug string `pulumi:"stackSlug"`
	// Version of the plugin to be installed.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a CloudPluginInstallation resource.
type CloudPluginInstallationArgs struct {
	// Slug of the plugin to be installed.
	Slug pulumix.Input[string]
	// The stack id to which the plugin should be installed.
	StackSlug pulumix.Input[string]
	// Version of the plugin to be installed.
	Version pulumix.Input[string]
}

func (CloudPluginInstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudPluginInstallationArgs)(nil)).Elem()
}

type CloudPluginInstallationOutput struct{ *pulumi.OutputState }

func (CloudPluginInstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudPluginInstallation)(nil)).Elem()
}

func (o CloudPluginInstallationOutput) ToCloudPluginInstallationOutput() CloudPluginInstallationOutput {
	return o
}

func (o CloudPluginInstallationOutput) ToCloudPluginInstallationOutputWithContext(ctx context.Context) CloudPluginInstallationOutput {
	return o
}

func (o CloudPluginInstallationOutput) ToOutput(ctx context.Context) pulumix.Output[CloudPluginInstallation] {
	return pulumix.Output[CloudPluginInstallation]{
		OutputState: o.OutputState,
	}
}

// Slug of the plugin to be installed.
func (o CloudPluginInstallationOutput) Slug() pulumix.Output[string] {
	value := pulumix.Apply[CloudPluginInstallation](o, func(v CloudPluginInstallation) pulumix.Output[string] { return v.Slug })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The stack id to which the plugin should be installed.
func (o CloudPluginInstallationOutput) StackSlug() pulumix.Output[string] {
	value := pulumix.Apply[CloudPluginInstallation](o, func(v CloudPluginInstallation) pulumix.Output[string] { return v.StackSlug })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of the plugin to be installed.
func (o CloudPluginInstallationOutput) Version() pulumix.Output[string] {
	value := pulumix.Apply[CloudPluginInstallation](o, func(v CloudPluginInstallation) pulumix.Output[string] { return v.Version })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudPluginInstallationOutput{})
}
