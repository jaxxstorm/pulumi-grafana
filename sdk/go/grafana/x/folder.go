// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testFolderFolder, err := grafana.NewFolder(ctx, "testFolderFolder", &grafana.FolderArgs{
//				Title: pulumi.String("Terraform Test Folder"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewDashboard(ctx, "testFolderDashboard", &grafana.DashboardArgs{
//				Folder:     testFolderFolder.ID(),
//				ConfigJson: pulumi.String("{\n  \"title\": \"Dashboard in folder\",\n  \"uid\": \"dashboard-in-folder\"\n}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewFolder(ctx, "testFolderWithUid", &grafana.FolderArgs{
//				Uid:   pulumi.String("test-folder-uid"),
//				Title: pulumi.String("Terraform Test Folder With UID"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/folder:Folder by_integer_id {{folder_id}}
//
// ```
//
// ```sh
//
//	$ pulumi import grafana:index/folder:Folder by_uid {{folder_uid}}
//
// ```
type Folder struct {
	pulumi.CustomResourceState

	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
	PreventDestroyIfNotEmpty pulumix.Output[*bool] `pulumi:"preventDestroyIfNotEmpty"`
	// The title of the folder.
	Title pulumix.Output[string] `pulumi:"title"`
	// Unique identifier.
	Uid pulumix.Output[string] `pulumi:"uid"`
	// The full URL of the folder.
	Url pulumix.Output[string] `pulumi:"url"`
}

// NewFolder registers a new resource with the given unique name, arguments, and options.
func NewFolder(ctx *pulumi.Context,
	name string, args *FolderArgs, opts ...pulumi.ResourceOption) (*Folder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Folder
	err := ctx.RegisterResource("grafana:index/folder:Folder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolder gets an existing Folder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderState, opts ...pulumi.ResourceOption) (*Folder, error) {
	var resource Folder
	err := ctx.ReadResource("grafana:index/folder:Folder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Folder resources.
type folderState struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
	PreventDestroyIfNotEmpty *bool `pulumi:"preventDestroyIfNotEmpty"`
	// The title of the folder.
	Title *string `pulumi:"title"`
	// Unique identifier.
	Uid *string `pulumi:"uid"`
	// The full URL of the folder.
	Url *string `pulumi:"url"`
}

type FolderState struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
	PreventDestroyIfNotEmpty pulumix.Input[*bool]
	// The title of the folder.
	Title pulumix.Input[*string]
	// Unique identifier.
	Uid pulumix.Input[*string]
	// The full URL of the folder.
	Url pulumix.Input[*string]
}

func (FolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderState)(nil)).Elem()
}

type folderArgs struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
	PreventDestroyIfNotEmpty *bool `pulumi:"preventDestroyIfNotEmpty"`
	// The title of the folder.
	Title string `pulumi:"title"`
	// Unique identifier.
	Uid *string `pulumi:"uid"`
}

// The set of arguments for constructing a Folder resource.
type FolderArgs struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
	PreventDestroyIfNotEmpty pulumix.Input[*bool]
	// The title of the folder.
	Title pulumix.Input[string]
	// Unique identifier.
	Uid pulumix.Input[*string]
}

func (FolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderArgs)(nil)).Elem()
}

type FolderOutput struct{ *pulumi.OutputState }

func (FolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Folder)(nil)).Elem()
}

func (o FolderOutput) ToFolderOutput() FolderOutput {
	return o
}

func (o FolderOutput) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return o
}

func (o FolderOutput) ToOutput(ctx context.Context) pulumix.Output[Folder] {
	return pulumix.Output[Folder]{
		OutputState: o.OutputState,
	}
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o FolderOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[Folder](o, func(v Folder) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Prevent deletion of the folder if it is not empty (contains dashboards or alert rules). Defaults to `false`.
func (o FolderOutput) PreventDestroyIfNotEmpty() pulumix.Output[*bool] {
	value := pulumix.Apply[Folder](o, func(v Folder) pulumix.Output[*bool] { return v.PreventDestroyIfNotEmpty })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The title of the folder.
func (o FolderOutput) Title() pulumix.Output[string] {
	value := pulumix.Apply[Folder](o, func(v Folder) pulumix.Output[string] { return v.Title })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique identifier.
func (o FolderOutput) Uid() pulumix.Output[string] {
	value := pulumix.Apply[Folder](o, func(v Folder) pulumix.Output[string] { return v.Uid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The full URL of the folder.
func (o FolderOutput) Url() pulumix.Output[string] {
	value := pulumix.Apply[Folder](o, func(v Folder) pulumix.Output[string] { return v.Url })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(FolderOutput{})
}
