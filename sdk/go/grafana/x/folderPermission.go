// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_permissions/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := grafana.NewTeam(ctx, "team", nil)
//			if err != nil {
//				return err
//			}
//			user, err := grafana.NewUser(ctx, "user", &grafana.UserArgs{
//				Email: pulumi.String("user.name@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			collection, err := grafana.NewFolder(ctx, "collection", &grafana.FolderArgs{
//				Title: pulumi.String("Folder Title"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewFolderPermission(ctx, "collectionPermission", &grafana.FolderPermissionArgs{
//				FolderUid: collection.Uid,
//				Permissions: grafana.FolderPermissionPermissionArray{
//					&grafana.FolderPermissionPermissionArgs{
//						Role:       pulumi.String("Editor"),
//						Permission: pulumi.String("Edit"),
//					},
//					&grafana.FolderPermissionPermissionArgs{
//						TeamId:     team.ID(),
//						Permission: pulumi.String("View"),
//					},
//					&grafana.FolderPermissionPermissionArgs{
//						UserId:     user.ID(),
//						Permission: pulumi.String("Admin"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FolderPermission struct {
	pulumi.CustomResourceState

	// The UID of the folder.
	FolderUid pulumix.Output[string] `pulumi:"folderUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.GArrayOutput[FolderPermissionPermission, FolderPermissionPermissionOutput] `pulumi:"permissions"`
}

// NewFolderPermission registers a new resource with the given unique name, arguments, and options.
func NewFolderPermission(ctx *pulumi.Context,
	name string, args *FolderPermissionArgs, opts ...pulumi.ResourceOption) (*FolderPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderUid == nil {
		return nil, errors.New("invalid value for required argument 'FolderUid'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FolderPermission
	err := ctx.RegisterResource("grafana:index/folderPermission:FolderPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderPermission gets an existing FolderPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderPermissionState, opts ...pulumi.ResourceOption) (*FolderPermission, error) {
	var resource FolderPermission
	err := ctx.ReadResource("grafana:index/folderPermission:FolderPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderPermission resources.
type folderPermissionState struct {
	// The UID of the folder.
	FolderUid *string `pulumi:"folderUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []FolderPermissionPermission `pulumi:"permissions"`
}

type FolderPermissionState struct {
	// The UID of the folder.
	FolderUid pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*FolderPermissionPermissionArgs]
}

func (FolderPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPermissionState)(nil)).Elem()
}

type folderPermissionArgs struct {
	// The UID of the folder.
	FolderUid string `pulumi:"folderUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []FolderPermissionPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a FolderPermission resource.
type FolderPermissionArgs struct {
	// The UID of the folder.
	FolderUid pulumix.Input[string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions pulumix.Input[[]*FolderPermissionPermissionArgs]
}

func (FolderPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPermissionArgs)(nil)).Elem()
}

type FolderPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil)).Elem()
}

func (o FolderPermissionOutput) ToFolderPermissionOutput() FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[FolderPermission] {
	return pulumix.Output[FolderPermission]{
		OutputState: o.OutputState,
	}
}

// The UID of the folder.
func (o FolderPermissionOutput) FolderUid() pulumix.Output[string] {
	value := pulumix.Apply[FolderPermission](o, func(v FolderPermission) pulumix.Output[string] { return v.FolderUid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o FolderPermissionOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[FolderPermission](o, func(v FolderPermission) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The permission items to add/update. Items that are omitted from the list will be removed.
func (o FolderPermissionOutput) Permissions() pulumix.GArrayOutput[FolderPermissionPermission, FolderPermissionPermissionOutput] {
	value := pulumix.Apply[FolderPermission](o, func(v FolderPermission) pulumix.GArrayOutput[FolderPermissionPermission, FolderPermissionPermissionOutput] {
		return v.Permissions
	})
	unwrapped := pulumix.Flatten[[]FolderPermissionPermission, pulumix.GArrayOutput[FolderPermissionPermission, FolderPermissionPermissionOutput]](value)
	return pulumix.GArrayOutput[FolderPermissionPermission, FolderPermissionPermissionOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(FolderPermissionOutput{})
}
