// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Synthetic Monitoring checks are tests that run on selected probes at defined
// intervals and report metrics and logs back to your Grafana Cloud account. The
// target for checks can be a domain name, a server, or a website, depending on
// what information you would like to gather about your endpoint. You can define
// multiple checks for a single endpoint to check different capabilities.
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/checks/)
//
// ## Example Usage
// ### DNS Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "dns", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("DNS Defaults"),
//				Target:  pulumi.String("grafana.com"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Atlanta),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Dns: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### DNS Complex
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "dns", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("DNS Updated"),
//				Target:  pulumi.String("grafana.net"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Frankfurt),
//					*pulumi.Int(main.Probes.London),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("baz"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Dns: &grafana.SyntheticMonitoringCheckSettingsDnsArgs{
//						IpVersion:  pulumi.String("Any"),
//						Server:     pulumi.String("8.8.4.4"),
//						Port:       pulumi.Int(8600),
//						RecordType: pulumi.String("CNAME"),
//						Protocol:   pulumi.String("TCP"),
//						ValidRCodes: pulumi.StringArray{
//							pulumi.String("NOERROR"),
//							pulumi.String("NOTAUTH"),
//						},
//						ValidateAnswerRrs: &grafana.SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{
//							FailIfMatchesRegexps: pulumi.StringArray{
//								pulumi.String(".+-bad-stuff*"),
//							},
//							FailIfNotMatchesRegexps: pulumi.StringArray{
//								pulumi.String(".+-good-stuff*"),
//							},
//						},
//						ValidateAuthorityRrs: &grafana.SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{
//							FailIfMatchesRegexps: pulumi.StringArray{
//								pulumi.String(".+-bad-stuff*"),
//							},
//							FailIfNotMatchesRegexps: pulumi.StringArray{
//								pulumi.String(".+-good-stuff*"),
//							},
//						},
//						ValidateAdditionalRrs: grafana.SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray{
//							&grafana.SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{
//								FailIfMatchesRegexps: pulumi.StringArray{
//									pulumi.String(".+-bad-stuff*"),
//								},
//								FailIfNotMatchesRegexps: pulumi.StringArray{
//									pulumi.String(".+-good-stuff*"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### HTTP Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "http", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("HTTP Defaults"),
//				Target:  pulumi.String("https://grafana.com"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Atlanta),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Http: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### HTTP Complex
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "http", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("HTTP Defaults"),
//				Target:  pulumi.String("https://grafana.org"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Bangalore),
//					*pulumi.Int(main.Probes.Mumbai),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Http: &grafana.SyntheticMonitoringCheckSettingsHttpArgs{
//						IpVersion:                  pulumi.String("V6"),
//						Method:                     pulumi.String("TRACE"),
//						Body:                       pulumi.String("and spirit"),
//						NoFollowRedirects:          pulumi.Bool(true),
//						BearerToken:                pulumi.String("asdfjkl;"),
//						ProxyUrl:                   pulumi.String("https://almost-there"),
//						FailIfSsl:                  pulumi.Bool(true),
//						FailIfNotSsl:               pulumi.Bool(true),
//						CacheBustingQueryParamName: pulumi.String("pineapple"),
//						TlsConfig: &grafana.SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{
//							ServerName: pulumi.String("grafana.org"),
//							ClientCert: pulumi.String(`-----BEGIN CERTIFICATE-----
//
// MIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT
// RTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF
// MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+
// 0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr
// h1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD
// BN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl
// iDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL
// a+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En
// FWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7
// qq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk
// FTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB
// Z18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW
// 6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z
// UV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w
// yzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA
// e2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ
// XeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB
// tqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8
// QxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP
// tf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4
// prulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9
// 5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY
// l3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq
// 7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N
// vuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=
// -----END CERTIFICATE-----
// `),
//
//						},
//						Headers: pulumi.StringArray{
//							pulumi.String("Content-Type: multipart/form-data; boundary=something"),
//						},
//						BasicAuth: &grafana.SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{
//							Username: pulumi.String("open"),
//							Password: pulumi.String("sesame"),
//						},
//						ValidStatusCodes: pulumi.IntArray{
//							pulumi.Int(200),
//							pulumi.Int(201),
//						},
//						ValidHttpVersions: pulumi.StringArray{
//							pulumi.String("HTTP/1.0"),
//							pulumi.String("HTTP/1.1"),
//							pulumi.String("HTTP/2"),
//						},
//						FailIfBodyMatchesRegexps: pulumi.StringArray{
//							pulumi.String("*bad stuff*"),
//						},
//						FailIfBodyNotMatchesRegexps: pulumi.StringArray{
//							pulumi.String("*good stuff*"),
//						},
//						FailIfHeaderMatchesRegexps: grafana.SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray{
//							&grafana.SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{
//								Header:       pulumi.String("Content-Type"),
//								Regexp:       pulumi.String("application/soap*"),
//								AllowMissing: pulumi.Bool(true),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Ping Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "ping", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("Ping Defaults"),
//				Target:  pulumi.String("grafana.com"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Atlanta),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Ping: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Ping Complex
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "ping", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("Ping Updated"),
//				Target:  pulumi.String("grafana.net"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Frankfurt),
//					*pulumi.Int(main.Probes.London),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("baz"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Ping: &grafana.SyntheticMonitoringCheckSettingsPingArgs{
//						IpVersion:    pulumi.String("Any"),
//						PayloadSize:  pulumi.Int(20),
//						DontFragment: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### TCP Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "tcp", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("TCP Defaults"),
//				Target:  pulumi.String("grafana.com:80"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Atlanta),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Tcp: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### TCP Complex
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "tcp", &grafana.SyntheticMonitoringCheckArgs{
//				Job:     pulumi.String("TCP Defaults"),
//				Target:  pulumi.String("grafana.com:443"),
//				Enabled: pulumi.Bool(false),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Frankfurt),
//					*pulumi.Int(main.Probes.London),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("baz"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Tcp: &grafana.SyntheticMonitoringCheckSettingsTcpArgs{
//						IpVersion: pulumi.String("V6"),
//						Tls:       pulumi.Bool(true),
//						QueryResponses: grafana.SyntheticMonitoringCheckSettingsTcpQueryResponseArray{
//							&grafana.SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{
//								Send:   pulumi.String("howdy"),
//								Expect: pulumi.String("hi"),
//							},
//							&grafana.SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{
//								Send:     pulumi.String("like this"),
//								Expect:   pulumi.String("like that"),
//								StartTls: pulumi.Bool(true),
//							},
//						},
//						TlsConfig: &grafana.SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{
//							ServerName: pulumi.String("grafana.com"),
//							CaCert: pulumi.String(`-----BEGIN CERTIFICATE-----
//
// MIIEljCCAn4CCQCKJPUQQxeO0zANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJT
// RTAeFw0yMTA1MjkxOTIyNTdaFw0yNDAzMTgxOTIyNTdaMA0xCzAJBgNVBAYTAlNF
// MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAnmbazDNUT0rSI4BpGZK+
// 0AJ+9FDkIYWJUtRLJoxw8CF+AobMFploYA2L2Myt80cTA1w8FrewjC8qlqdnrPWr
// h1ely2zsUljgi1/niH0ndjFzliL7UkinXQiAsTtYOrOQmzyd/o5PNdu7dz0m7stD
// BN/Sz5TlXZnA1/eJbqV/kqMau6b1MaBx8SbRfUG9+cSmUobFJwuktDrPuwJhcEkl
// iDmhEqu1GuZzmKvzPacLTVia1vSlmCTCu89NiHI8iGiiLtqNrapup7f8j5m3a3SL
// a+vXhplFj2piNl7Nc0dfuVgtEliTI+qUL2/+4A7gzRWZpHy21/LxMMXmBhdJW9En
// FWkev97VZLgb5TR3+qpSWmXcodjPy4dibvwsOMpdd+Q4AYulwvlDw5idRPVgGvk7
// qq03+w9ppZ5Fugws9k2CD9F/75JX2mCbRpkuPe8XXZ7bqrMaQgQMLOrs68HuiiCk
// FTklglq4DMKxnf/Y/T/MgIa9Q1o28YSevh6A7FnfPGARj2H2T4rToi+bC1Vf7qNB
// Z18bDpz99tRUTbyiRUSBMWLCGhU6c4HAqUrfrkpperOKFBQ3i38a79838oFdXHBW
// 6rx1t5cC3XwtEoUyeBKAygez8G1LDXbN3607MxVhAjhHKtPkYvuBfysSNU6JrR0z
// UV1IURJANt2UMuKgSEkG/IMCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAcipMhp/w
// yzfPy61faVAw9SPaMNRlnW9FCDC3N9CGOjo2knjXpObPzyzsJiUURTjrA9eFMpRA
// e2Rgn2j+nvm2XdLAlC4Kh8jqv/wCL0X6BTQMdN5aOhXdSiXtpXOMvXYY/dQ4ebRZ
// XeRCVWQD79JbV6/uyx0nCV3FVcU7L1P4UjxroefVr0soLPMirgxHmOxLnkoVgdcB
// tqufP5kJx9CIeJXPx3QQsk1XfEtxtUvuw4ZaZkQnNUqvGl7V+AZpur5Eqfv3zBi8
// QxxL7qGkARNssNWH2Ju+tqpM/UZRnjlFrDR4SXUgT0coTduBalUY6qHkciHmRpiP
// tf3SgpDeiCSOV2iVFGdaR1mz3muWoAYWFstcWN3a3HjjVugIi23yLN8Gv8CNeoH4
// prulinFCLrFgAh8SLAF8mOAZanT06LH8jOIFYrdUxH+ZeRBR0rLoFjUF+JB7UKD9
// 5TA+B4EBzQ1tMbGFU1DX79MjAejq0IV0Nzq+GMfBvLHxEf4+Oz8nqhDXQcJ6TdtY
// l3Lyw5zBvOL80SBK+Mr0UP7d9U3VXgbGHCYVJU6Ot1TwiGwahtWALRALA3TWeGkq
// 7kyD1H+nm+9lfKhuyBRQnRGBVyze2lAp7oxwshJuhBwEXosXFxq1Cy6QhPN77r6N
// vuhxvtppolNnyOgGxwG4zquqq2V5/+vKjKY=
// -----END CERTIFICATE-----
// `),
//
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Traceroute Basic
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "traceroute", &grafana.SyntheticMonitoringCheckArgs{
//				Job:       pulumi.String("Traceroute defaults"),
//				Target:    pulumi.String("grafana.com"),
//				Enabled:   pulumi.Bool(false),
//				Frequency: pulumi.Int(120000),
//				Timeout:   pulumi.Int(30000),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Atlanta),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Traceroute: nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Traceroute Complex
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := grafana.GetSyntheticMonitoringProbes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewSyntheticMonitoringCheck(ctx, "traceroute", &grafana.SyntheticMonitoringCheckArgs{
//				Job:       pulumi.String("Traceroute complex"),
//				Target:    pulumi.String("grafana.net"),
//				Enabled:   pulumi.Bool(false),
//				Frequency: pulumi.Int(120000),
//				Timeout:   pulumi.Int(30000),
//				Probes: pulumi.IntArray{
//					*pulumi.Int(main.Probes.Frankfurt),
//					*pulumi.Int(main.Probes.London),
//				},
//				Labels: pulumi.StringMap{
//					"foo": pulumi.String("baz"),
//				},
//				Settings: &grafana.SyntheticMonitoringCheckSettingsArgs{
//					Traceroute: &grafana.SyntheticMonitoringCheckSettingsTracerouteArgs{
//						MaxHops:        pulumi.Int(25),
//						MaxUnknownHops: pulumi.Int(10),
//						PtrLookup:      pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck check {{check-id}}
//
// ```
type SyntheticMonitoringCheck struct {
	pulumi.CustomResourceState

	// Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
	AlertSensitivity pulumix.Output[*string] `pulumi:"alertSensitivity"`
	// Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
	BasicMetricsOnly pulumix.Output[*bool] `pulumi:"basicMetricsOnly"`
	// Whether to enable the check. Defaults to `true`.
	Enabled pulumix.Output[*bool] `pulumi:"enabled"`
	// How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
	Frequency pulumix.Output[*int] `pulumi:"frequency"`
	// Name used for job label.
	Job pulumix.Output[string] `pulumi:"job"`
	// Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
	Labels pulumix.MapOutput[string] `pulumi:"labels"`
	// List of probe location IDs where this target will be checked from.
	Probes pulumix.ArrayOutput[int] `pulumi:"probes"`
	// Check settings. Should contain exactly one nested block.
	Settings pulumix.GPtrOutput[SyntheticMonitoringCheckSettings, SyntheticMonitoringCheckSettingsOutput] `pulumi:"settings"`
	// Hostname to ping.
	Target pulumix.Output[string] `pulumi:"target"`
	// The tenant ID of the check.
	TenantId pulumix.Output[int] `pulumi:"tenantId"`
	// Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
	Timeout pulumix.Output[*int] `pulumi:"timeout"`
}

// NewSyntheticMonitoringCheck registers a new resource with the given unique name, arguments, and options.
func NewSyntheticMonitoringCheck(ctx *pulumi.Context,
	name string, args *SyntheticMonitoringCheckArgs, opts ...pulumi.ResourceOption) (*SyntheticMonitoringCheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Job == nil {
		return nil, errors.New("invalid value for required argument 'Job'")
	}
	if args.Probes == nil {
		return nil, errors.New("invalid value for required argument 'Probes'")
	}
	if args.Settings == nil {
		return nil, errors.New("invalid value for required argument 'Settings'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticMonitoringCheck
	err := ctx.RegisterResource("grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticMonitoringCheck gets an existing SyntheticMonitoringCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticMonitoringCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticMonitoringCheckState, opts ...pulumi.ResourceOption) (*SyntheticMonitoringCheck, error) {
	var resource SyntheticMonitoringCheck
	err := ctx.ReadResource("grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticMonitoringCheck resources.
type syntheticMonitoringCheckState struct {
	// Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
	AlertSensitivity *string `pulumi:"alertSensitivity"`
	// Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
	BasicMetricsOnly *bool `pulumi:"basicMetricsOnly"`
	// Whether to enable the check. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
	Frequency *int `pulumi:"frequency"`
	// Name used for job label.
	Job *string `pulumi:"job"`
	// Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
	Labels map[string]string `pulumi:"labels"`
	// List of probe location IDs where this target will be checked from.
	Probes []int `pulumi:"probes"`
	// Check settings. Should contain exactly one nested block.
	Settings *SyntheticMonitoringCheckSettings `pulumi:"settings"`
	// Hostname to ping.
	Target *string `pulumi:"target"`
	// The tenant ID of the check.
	TenantId *int `pulumi:"tenantId"`
	// Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
	Timeout *int `pulumi:"timeout"`
}

type SyntheticMonitoringCheckState struct {
	// Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
	AlertSensitivity pulumix.Input[*string]
	// Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
	BasicMetricsOnly pulumix.Input[*bool]
	// Whether to enable the check. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
	Frequency pulumix.Input[*int]
	// Name used for job label.
	Job pulumix.Input[*string]
	// Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
	Labels pulumix.Input[map[string]string]
	// List of probe location IDs where this target will be checked from.
	Probes pulumix.Input[[]int]
	// Check settings. Should contain exactly one nested block.
	Settings pulumix.Input[*SyntheticMonitoringCheckSettingsArgs]
	// Hostname to ping.
	Target pulumix.Input[*string]
	// The tenant ID of the check.
	TenantId pulumix.Input[*int]
	// Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
	Timeout pulumix.Input[*int]
}

func (SyntheticMonitoringCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringCheckState)(nil)).Elem()
}

type syntheticMonitoringCheckArgs struct {
	// Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
	AlertSensitivity *string `pulumi:"alertSensitivity"`
	// Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
	BasicMetricsOnly *bool `pulumi:"basicMetricsOnly"`
	// Whether to enable the check. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
	Frequency *int `pulumi:"frequency"`
	// Name used for job label.
	Job string `pulumi:"job"`
	// Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
	Labels map[string]string `pulumi:"labels"`
	// List of probe location IDs where this target will be checked from.
	Probes []int `pulumi:"probes"`
	// Check settings. Should contain exactly one nested block.
	Settings SyntheticMonitoringCheckSettings `pulumi:"settings"`
	// Hostname to ping.
	Target string `pulumi:"target"`
	// Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a SyntheticMonitoringCheck resource.
type SyntheticMonitoringCheckArgs struct {
	// Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
	AlertSensitivity pulumix.Input[*string]
	// Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
	BasicMetricsOnly pulumix.Input[*bool]
	// Whether to enable the check. Defaults to `true`.
	Enabled pulumix.Input[*bool]
	// How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
	Frequency pulumix.Input[*int]
	// Name used for job label.
	Job pulumix.Input[string]
	// Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
	Labels pulumix.Input[map[string]string]
	// List of probe location IDs where this target will be checked from.
	Probes pulumix.Input[[]int]
	// Check settings. Should contain exactly one nested block.
	Settings pulumix.Input[*SyntheticMonitoringCheckSettingsArgs]
	// Hostname to ping.
	Target pulumix.Input[string]
	// Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
	Timeout pulumix.Input[*int]
}

func (SyntheticMonitoringCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringCheckArgs)(nil)).Elem()
}

type SyntheticMonitoringCheckOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheck)(nil)).Elem()
}

func (o SyntheticMonitoringCheckOutput) ToSyntheticMonitoringCheckOutput() SyntheticMonitoringCheckOutput {
	return o
}

func (o SyntheticMonitoringCheckOutput) ToSyntheticMonitoringCheckOutputWithContext(ctx context.Context) SyntheticMonitoringCheckOutput {
	return o
}

func (o SyntheticMonitoringCheckOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheck] {
	return pulumix.Output[SyntheticMonitoringCheck]{
		OutputState: o.OutputState,
	}
}

// Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert levels](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/synthetic-monitoring-alerting/). Defaults to `none`.
func (o SyntheticMonitoringCheckOutput) AlertSensitivity() pulumix.Output[*string] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[*string] { return v.AlertSensitivity })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of metrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each. Defaults to `true`.
func (o SyntheticMonitoringCheckOutput) BasicMetricsOnly() pulumix.Output[*bool] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[*bool] { return v.BasicMetricsOnly })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Whether to enable the check. Defaults to `true`.
func (o SyntheticMonitoringCheckOutput) Enabled() pulumix.Output[*bool] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[*bool] { return v.Enabled })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// How often the check runs in milliseconds (the value is not truly a "frequency" but a "period"). The minimum acceptable value is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms). Defaults to `60000`.
func (o SyntheticMonitoringCheckOutput) Frequency() pulumix.Output[*int] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[*int] { return v.Frequency })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// Name used for job label.
func (o SyntheticMonitoringCheckOutput) Job() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[string] { return v.Job })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per check is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of the labels cannot be empty, and the maximum length is 32 bytes.
func (o SyntheticMonitoringCheckOutput) Labels() pulumix.MapOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.MapOutput[string] { return v.Labels })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// List of probe location IDs where this target will be checked from.
func (o SyntheticMonitoringCheckOutput) Probes() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.ArrayOutput[int] { return v.Probes })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// Check settings. Should contain exactly one nested block.
func (o SyntheticMonitoringCheckOutput) Settings() pulumix.GPtrOutput[SyntheticMonitoringCheckSettings, SyntheticMonitoringCheckSettingsOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.GPtrOutput[SyntheticMonitoringCheckSettings, SyntheticMonitoringCheckSettingsOutput] {
		return v.Settings
	})
	unwrapped := pulumix.Flatten[*SyntheticMonitoringCheckSettings, pulumix.GPtrOutput[SyntheticMonitoringCheckSettings, SyntheticMonitoringCheckSettingsOutput]](value)
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettings, SyntheticMonitoringCheckSettingsOutput]{OutputState: unwrapped.OutputState}
}

// Hostname to ping.
func (o SyntheticMonitoringCheckOutput) Target() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[string] { return v.Target })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The tenant ID of the check.
func (o SyntheticMonitoringCheckOutput) TenantId() pulumix.Output[int] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[int] { return v.TenantId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms), and the maximum 10 seconds (10000 ms). Defaults to `3000`.
func (o SyntheticMonitoringCheckOutput) Timeout() pulumix.Output[*int] {
	value := pulumix.Apply[SyntheticMonitoringCheck](o, func(v SyntheticMonitoringCheck) pulumix.Output[*int] { return v.Timeout })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func init() {
	pulumi.RegisterOutputType(SyntheticMonitoringCheckOutput{})
}
