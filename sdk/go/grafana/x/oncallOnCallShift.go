// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/on_call_shifts/)
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/oncallOnCallShift:OncallOnCallShift on_call_shift_name {{on_call_shift_id}}
//
// ```
type OncallOnCallShift struct {
	pulumi.CustomResourceState

	// This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	ByDays pulumix.ArrayOutput[string] `pulumi:"byDays"`
	// This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
	ByMonthdays pulumix.ArrayOutput[int] `pulumi:"byMonthdays"`
	// This parameter takes a list of months. Valid values are 1 to 12
	ByMonths pulumix.ArrayOutput[int] `pulumi:"byMonths"`
	// The duration of the event.
	Duration pulumix.Output[int] `pulumi:"duration"`
	// The frequency of the event. Can be daily, weekly, monthly
	Frequency pulumix.Output[*string] `pulumi:"frequency"`
	// The positive integer representing at which intervals the recurrence rule repeats.
	Interval pulumix.Output[*int] `pulumi:"interval"`
	// The priority level. The higher the value, the higher the priority.
	Level pulumix.Output[*int] `pulumi:"level"`
	// The shift's name.
	Name pulumix.Output[string] `pulumi:"name"`
	// The list of lists with on-call users (for rollingUsers event type)
	RollingUsers pulumix.GArrayOutput[[]string, []stringOutput] `pulumi:"rollingUsers"`
	// The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
	Start pulumix.Output[string] `pulumi:"start"`
	// The index of the list of users in rolling_users, from which on-call rotation starts.
	StartRotationFromUserIndex pulumix.Output[*int] `pulumi:"startRotationFromUserIndex"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Output[*string] `pulumi:"teamId"`
	// The shift's timezone.  Overrides schedule's timezone.
	TimeZone pulumix.Output[*string] `pulumi:"timeZone"`
	// The shift's type. Can be rolling*users, recurrent*event, single_event
	Type pulumix.Output[string] `pulumi:"type"`
	// The list of on-call users (for single*event and recurrent*event event type).
	Users pulumix.ArrayOutput[string] `pulumi:"users"`
	// Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	WeekStart pulumix.Output[*string] `pulumi:"weekStart"`
}

// NewOncallOnCallShift registers a new resource with the given unique name, arguments, and options.
func NewOncallOnCallShift(ctx *pulumi.Context,
	name string, args *OncallOnCallShiftArgs, opts ...pulumi.ResourceOption) (*OncallOnCallShift, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.Start == nil {
		return nil, errors.New("invalid value for required argument 'Start'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallOnCallShift
	err := ctx.RegisterResource("grafana:index/oncallOnCallShift:OncallOnCallShift", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallOnCallShift gets an existing OncallOnCallShift resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallOnCallShift(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallOnCallShiftState, opts ...pulumi.ResourceOption) (*OncallOnCallShift, error) {
	var resource OncallOnCallShift
	err := ctx.ReadResource("grafana:index/oncallOnCallShift:OncallOnCallShift", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallOnCallShift resources.
type oncallOnCallShiftState struct {
	// This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	ByDays []string `pulumi:"byDays"`
	// This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
	ByMonthdays []int `pulumi:"byMonthdays"`
	// This parameter takes a list of months. Valid values are 1 to 12
	ByMonths []int `pulumi:"byMonths"`
	// The duration of the event.
	Duration *int `pulumi:"duration"`
	// The frequency of the event. Can be daily, weekly, monthly
	Frequency *string `pulumi:"frequency"`
	// The positive integer representing at which intervals the recurrence rule repeats.
	Interval *int `pulumi:"interval"`
	// The priority level. The higher the value, the higher the priority.
	Level *int `pulumi:"level"`
	// The shift's name.
	Name *string `pulumi:"name"`
	// The list of lists with on-call users (for rollingUsers event type)
	RollingUsers [][]string `pulumi:"rollingUsers"`
	// The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
	Start *string `pulumi:"start"`
	// The index of the list of users in rolling_users, from which on-call rotation starts.
	StartRotationFromUserIndex *int `pulumi:"startRotationFromUserIndex"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The shift's timezone.  Overrides schedule's timezone.
	TimeZone *string `pulumi:"timeZone"`
	// The shift's type. Can be rolling*users, recurrent*event, single_event
	Type *string `pulumi:"type"`
	// The list of on-call users (for single*event and recurrent*event event type).
	Users []string `pulumi:"users"`
	// Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	WeekStart *string `pulumi:"weekStart"`
}

type OncallOnCallShiftState struct {
	// This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	ByDays pulumix.Input[[]string]
	// This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
	ByMonthdays pulumix.Input[[]int]
	// This parameter takes a list of months. Valid values are 1 to 12
	ByMonths pulumix.Input[[]int]
	// The duration of the event.
	Duration pulumix.Input[*int]
	// The frequency of the event. Can be daily, weekly, monthly
	Frequency pulumix.Input[*string]
	// The positive integer representing at which intervals the recurrence rule repeats.
	Interval pulumix.Input[*int]
	// The priority level. The higher the value, the higher the priority.
	Level pulumix.Input[*int]
	// The shift's name.
	Name pulumix.Input[*string]
	// The list of lists with on-call users (for rollingUsers event type)
	RollingUsers pulumix.Input[[][]string]
	// The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
	Start pulumix.Input[*string]
	// The index of the list of users in rolling_users, from which on-call rotation starts.
	StartRotationFromUserIndex pulumix.Input[*int]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// The shift's timezone.  Overrides schedule's timezone.
	TimeZone pulumix.Input[*string]
	// The shift's type. Can be rolling*users, recurrent*event, single_event
	Type pulumix.Input[*string]
	// The list of on-call users (for single*event and recurrent*event event type).
	Users pulumix.Input[[]string]
	// Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	WeekStart pulumix.Input[*string]
}

func (OncallOnCallShiftState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallOnCallShiftState)(nil)).Elem()
}

type oncallOnCallShiftArgs struct {
	// This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	ByDays []string `pulumi:"byDays"`
	// This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
	ByMonthdays []int `pulumi:"byMonthdays"`
	// This parameter takes a list of months. Valid values are 1 to 12
	ByMonths []int `pulumi:"byMonths"`
	// The duration of the event.
	Duration int `pulumi:"duration"`
	// The frequency of the event. Can be daily, weekly, monthly
	Frequency *string `pulumi:"frequency"`
	// The positive integer representing at which intervals the recurrence rule repeats.
	Interval *int `pulumi:"interval"`
	// The priority level. The higher the value, the higher the priority.
	Level *int `pulumi:"level"`
	// The shift's name.
	Name *string `pulumi:"name"`
	// The list of lists with on-call users (for rollingUsers event type)
	RollingUsers [][]string `pulumi:"rollingUsers"`
	// The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
	Start string `pulumi:"start"`
	// The index of the list of users in rolling_users, from which on-call rotation starts.
	StartRotationFromUserIndex *int `pulumi:"startRotationFromUserIndex"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The shift's timezone.  Overrides schedule's timezone.
	TimeZone *string `pulumi:"timeZone"`
	// The shift's type. Can be rolling*users, recurrent*event, single_event
	Type string `pulumi:"type"`
	// The list of on-call users (for single*event and recurrent*event event type).
	Users []string `pulumi:"users"`
	// Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	WeekStart *string `pulumi:"weekStart"`
}

// The set of arguments for constructing a OncallOnCallShift resource.
type OncallOnCallShiftArgs struct {
	// This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	ByDays pulumix.Input[[]string]
	// This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
	ByMonthdays pulumix.Input[[]int]
	// This parameter takes a list of months. Valid values are 1 to 12
	ByMonths pulumix.Input[[]int]
	// The duration of the event.
	Duration pulumix.Input[int]
	// The frequency of the event. Can be daily, weekly, monthly
	Frequency pulumix.Input[*string]
	// The positive integer representing at which intervals the recurrence rule repeats.
	Interval pulumix.Input[*int]
	// The priority level. The higher the value, the higher the priority.
	Level pulumix.Input[*int]
	// The shift's name.
	Name pulumix.Input[*string]
	// The list of lists with on-call users (for rollingUsers event type)
	RollingUsers pulumix.Input[[][]string]
	// The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
	Start pulumix.Input[string]
	// The index of the list of users in rolling_users, from which on-call rotation starts.
	StartRotationFromUserIndex pulumix.Input[*int]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
	// The shift's timezone.  Overrides schedule's timezone.
	TimeZone pulumix.Input[*string]
	// The shift's type. Can be rolling*users, recurrent*event, single_event
	Type pulumix.Input[string]
	// The list of on-call users (for single*event and recurrent*event event type).
	Users pulumix.Input[[]string]
	// Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
	WeekStart pulumix.Input[*string]
}

func (OncallOnCallShiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallOnCallShiftArgs)(nil)).Elem()
}

type OncallOnCallShiftOutput struct{ *pulumi.OutputState }

func (OncallOnCallShiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallOnCallShift)(nil)).Elem()
}

func (o OncallOnCallShiftOutput) ToOncallOnCallShiftOutput() OncallOnCallShiftOutput {
	return o
}

func (o OncallOnCallShiftOutput) ToOncallOnCallShiftOutputWithContext(ctx context.Context) OncallOnCallShiftOutput {
	return o
}

func (o OncallOnCallShiftOutput) ToOutput(ctx context.Context) pulumix.Output[OncallOnCallShift] {
	return pulumix.Output[OncallOnCallShift]{
		OutputState: o.OutputState,
	}
}

// This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
func (o OncallOnCallShiftOutput) ByDays() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.ArrayOutput[string] { return v.ByDays })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// This parameter takes a list of days of the month.  Valid values are 1 to 31 or -31 to -1
func (o OncallOnCallShiftOutput) ByMonthdays() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.ArrayOutput[int] { return v.ByMonthdays })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// This parameter takes a list of months. Valid values are 1 to 12
func (o OncallOnCallShiftOutput) ByMonths() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.ArrayOutput[int] { return v.ByMonths })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// The duration of the event.
func (o OncallOnCallShiftOutput) Duration() pulumix.Output[int] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[int] { return v.Duration })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The frequency of the event. Can be daily, weekly, monthly
func (o OncallOnCallShiftOutput) Frequency() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[*string] { return v.Frequency })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The positive integer representing at which intervals the recurrence rule repeats.
func (o OncallOnCallShiftOutput) Interval() pulumix.Output[*int] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[*int] { return v.Interval })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The priority level. The higher the value, the higher the priority.
func (o OncallOnCallShiftOutput) Level() pulumix.Output[*int] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[*int] { return v.Level })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The shift's name.
func (o OncallOnCallShiftOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of lists with on-call users (for rollingUsers event type)
func (o OncallOnCallShiftOutput) RollingUsers() pulumix.GArrayOutput[[]string, []stringOutput] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.GArrayOutput[[]string, []stringOutput] { return v.RollingUsers })
	unwrapped := pulumix.Flatten[[][]string, pulumix.GArrayOutput[[]string, []stringOutput]](value)
	return pulumix.GArrayOutput[[]string, []stringOutput]{OutputState: unwrapped.OutputState}
}

// The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example "2020-09-05T08:00:00")
func (o OncallOnCallShiftOutput) Start() pulumix.Output[string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[string] { return v.Start })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The index of the list of users in rolling_users, from which on-call rotation starts.
func (o OncallOnCallShiftOutput) StartRotationFromUserIndex() pulumix.Output[*int] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[*int] { return v.StartRotationFromUserIndex })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
func (o OncallOnCallShiftOutput) TeamId() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[*string] { return v.TeamId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The shift's timezone.  Overrides schedule's timezone.
func (o OncallOnCallShiftOutput) TimeZone() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[*string] { return v.TimeZone })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The shift's type. Can be rolling*users, recurrent*event, single_event
func (o OncallOnCallShiftOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The list of on-call users (for single*event and recurrent*event event type).
func (o OncallOnCallShiftOutput) Users() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.ArrayOutput[string] { return v.Users })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU
func (o OncallOnCallShiftOutput) WeekStart() pulumix.Output[*string] {
	value := pulumix.Apply[OncallOnCallShift](o, func(v OncallOnCallShift) pulumix.Output[*string] { return v.WeekStart })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(OncallOnCallShiftOutput{})
}
