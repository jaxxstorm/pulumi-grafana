// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Sets up Synthetic Monitoring on a Grafana cloud stack and generates a token.
// Once a Grafana Cloud stack is created, a user can either use this resource or go into the UI to install synthetic monitoring.
// This resource cannot be imported but it can be used on an existing Synthetic Monitoring installation without issues.
//
// **Note that this resource must be used on a provider configured with Grafana Cloud credentials.**
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/installation/)
// * [API documentation](https://github.com/grafana/synthetic-monitoring-api-go-client/blob/main/docs/API.md#apiv1registerinstall)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			smStackCloudStack, err := grafana.NewCloudStack(ctx, "smStackCloudStack", &grafana.CloudStackArgs{
//				Slug:       pulumi.String("<stack-slug>"),
//				RegionSlug: pulumi.String("us"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewCloudApiKey(ctx, "metricsPublish", &grafana.CloudApiKeyArgs{
//				Role:         pulumi.String("MetricsPublisher"),
//				CloudOrgSlug: pulumi.String("<org-slug>"),
//			})
//			if err != nil {
//				return err
//			}
//			smStackSyntheticMonitoringInstallation, err := grafana.NewSyntheticMonitoringInstallation(ctx, "smStackSyntheticMonitoringInstallation", &grafana.SyntheticMonitoringInstallationArgs{
//				StackId: smStackCloudStack.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewProvider(ctx, "sm", &grafana.ProviderArgs{
//				SmAccessToken: smStackSyntheticMonitoringInstallation.SmAccessToken,
//				SmUrl:         smStackSyntheticMonitoringInstallation.StackSmApiUrl,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SyntheticMonitoringInstallation struct {
	pulumi.CustomResourceState

	// The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
	MetricsPublisherKey pulumix.Output[string] `pulumi:"metricsPublisherKey"`
	// Generated token to access the SM API.
	SmAccessToken pulumix.Output[string] `pulumi:"smAccessToken"`
	// The ID or slug of the stack to install SM on.
	StackId pulumix.Output[string] `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumix.Output[string] `pulumi:"stackSmApiUrl"`
}

// NewSyntheticMonitoringInstallation registers a new resource with the given unique name, arguments, and options.
func NewSyntheticMonitoringInstallation(ctx *pulumi.Context,
	name string, args *SyntheticMonitoringInstallationArgs, opts ...pulumi.ResourceOption) (*SyntheticMonitoringInstallation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricsPublisherKey == nil {
		return nil, errors.New("invalid value for required argument 'MetricsPublisherKey'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.MetricsPublisherKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.MetricsPublisherKey.ToOutput(ctx.Context()).Untyped())
		args.MetricsPublisherKey = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"metricsPublisherKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticMonitoringInstallation
	err := ctx.RegisterResource("grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticMonitoringInstallation gets an existing SyntheticMonitoringInstallation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticMonitoringInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticMonitoringInstallationState, opts ...pulumi.ResourceOption) (*SyntheticMonitoringInstallation, error) {
	var resource SyntheticMonitoringInstallation
	err := ctx.ReadResource("grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticMonitoringInstallation resources.
type syntheticMonitoringInstallationState struct {
	// The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
	MetricsPublisherKey *string `pulumi:"metricsPublisherKey"`
	// Generated token to access the SM API.
	SmAccessToken *string `pulumi:"smAccessToken"`
	// The ID or slug of the stack to install SM on.
	StackId *string `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl *string `pulumi:"stackSmApiUrl"`
}

type SyntheticMonitoringInstallationState struct {
	// The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
	MetricsPublisherKey pulumix.Input[*string]
	// Generated token to access the SM API.
	SmAccessToken pulumix.Input[*string]
	// The ID or slug of the stack to install SM on.
	StackId pulumix.Input[*string]
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumix.Input[*string]
}

func (SyntheticMonitoringInstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringInstallationState)(nil)).Elem()
}

type syntheticMonitoringInstallationArgs struct {
	// The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
	MetricsPublisherKey string `pulumi:"metricsPublisherKey"`
	// The ID or slug of the stack to install SM on.
	StackId string `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl *string `pulumi:"stackSmApiUrl"`
}

// The set of arguments for constructing a SyntheticMonitoringInstallation resource.
type SyntheticMonitoringInstallationArgs struct {
	// The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
	MetricsPublisherKey pulumix.Input[string]
	// The ID or slug of the stack to install SM on.
	StackId pulumix.Input[string]
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumix.Input[*string]
}

func (SyntheticMonitoringInstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringInstallationArgs)(nil)).Elem()
}

type SyntheticMonitoringInstallationOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringInstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringInstallation)(nil)).Elem()
}

func (o SyntheticMonitoringInstallationOutput) ToSyntheticMonitoringInstallationOutput() SyntheticMonitoringInstallationOutput {
	return o
}

func (o SyntheticMonitoringInstallationOutput) ToSyntheticMonitoringInstallationOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationOutput {
	return o
}

func (o SyntheticMonitoringInstallationOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringInstallation] {
	return pulumix.Output[SyntheticMonitoringInstallation]{
		OutputState: o.OutputState,
	}
}

// The Cloud API Key with the `MetricsPublisher` role used to publish metrics to the SM API
func (o SyntheticMonitoringInstallationOutput) MetricsPublisherKey() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringInstallation](o, func(v SyntheticMonitoringInstallation) pulumix.Output[string] { return v.MetricsPublisherKey })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Generated token to access the SM API.
func (o SyntheticMonitoringInstallationOutput) SmAccessToken() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringInstallation](o, func(v SyntheticMonitoringInstallation) pulumix.Output[string] { return v.SmAccessToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID or slug of the stack to install SM on.
func (o SyntheticMonitoringInstallationOutput) StackId() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringInstallation](o, func(v SyntheticMonitoringInstallation) pulumix.Output[string] { return v.StackId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
func (o SyntheticMonitoringInstallationOutput) StackSmApiUrl() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringInstallation](o, func(v SyntheticMonitoringInstallation) pulumix.Output[string] { return v.StackSmApiUrl })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(SyntheticMonitoringInstallationOutput{})
}
