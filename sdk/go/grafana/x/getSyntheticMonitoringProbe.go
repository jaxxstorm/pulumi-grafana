// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for retrieving a single probe by name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.LookupSyntheticMonitoringProbe(ctx, &grafana.LookupSyntheticMonitoringProbeArgs{
//				Name: "Atlanta",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSyntheticMonitoringProbe(ctx *pulumi.Context, args *LookupSyntheticMonitoringProbeArgs, opts ...pulumi.InvokeOption) (*LookupSyntheticMonitoringProbeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSyntheticMonitoringProbeResult
	err := ctx.Invoke("grafana:index/getSyntheticMonitoringProbe:getSyntheticMonitoringProbe", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSyntheticMonitoringProbe.
type LookupSyntheticMonitoringProbeArgs struct {
	// Name of the probe.
	Name string `pulumi:"name"`
}

// A collection of values returned by getSyntheticMonitoringProbe.
type LookupSyntheticMonitoringProbeResult struct {
	// The ID of the probe.
	Id string `pulumi:"id"`
	// Custom labels to be included with collected metrics and logs.
	Labels map[string]string `pulumi:"labels"`
	// Latitude coordinates.
	Latitude float64 `pulumi:"latitude"`
	// Longitude coordinates.
	Longitude float64 `pulumi:"longitude"`
	// Name of the probe.
	Name string `pulumi:"name"`
	// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`.
	Public bool `pulumi:"public"`
	// Region of the probe.
	Region string `pulumi:"region"`
	// The tenant ID of the probe.
	TenantId int `pulumi:"tenantId"`
}

func LookupSyntheticMonitoringProbeOutput(ctx *pulumi.Context, args LookupSyntheticMonitoringProbeOutputArgs, opts ...pulumi.InvokeOption) LookupSyntheticMonitoringProbeResultOutput {
	outputResult := pulumix.ApplyErr[*LookupSyntheticMonitoringProbeArgs](args.ToOutput(), func(plainArgs *LookupSyntheticMonitoringProbeArgs) (*LookupSyntheticMonitoringProbeResult, error) {
		return LookupSyntheticMonitoringProbe(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupSyntheticMonitoringProbeResultOutput, *LookupSyntheticMonitoringProbeResult](outputResult)
}

// A collection of arguments for invoking getSyntheticMonitoringProbe.
type LookupSyntheticMonitoringProbeOutputArgs struct {
	// Name of the probe.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupSyntheticMonitoringProbeOutputArgs) ToOutput() pulumix.Output[*LookupSyntheticMonitoringProbeArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupSyntheticMonitoringProbeArgs {
		return &LookupSyntheticMonitoringProbeArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupSyntheticMonitoringProbeResultOutput struct{ *pulumi.OutputState }

func (LookupSyntheticMonitoringProbeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSyntheticMonitoringProbeResult)(nil)).Elem()
}

func (o LookupSyntheticMonitoringProbeResultOutput) ToOutput(context.Context) pulumix.Output[*LookupSyntheticMonitoringProbeResult] {
	return pulumix.Output[*LookupSyntheticMonitoringProbeResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupSyntheticMonitoringProbeResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) string { return v.Id })
}

func (o LookupSyntheticMonitoringProbeResultOutput) Labels() pulumix.MapOutput[string] {
	value := pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) map[string]string { return v.Labels })
	return pulumix.MapOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupSyntheticMonitoringProbeResultOutput) Latitude() pulumix.Output[float64] {
	return pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) float64 { return v.Latitude })
}

func (o LookupSyntheticMonitoringProbeResultOutput) Longitude() pulumix.Output[float64] {
	return pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) float64 { return v.Longitude })
}

func (o LookupSyntheticMonitoringProbeResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) string { return v.Name })
}

func (o LookupSyntheticMonitoringProbeResultOutput) Public() pulumix.Output[bool] {
	return pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) bool { return v.Public })
}

func (o LookupSyntheticMonitoringProbeResultOutput) Region() pulumix.Output[string] {
	return pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) string { return v.Region })
}

func (o LookupSyntheticMonitoringProbeResultOutput) TenantId() pulumix.Output[int] {
	return pulumix.Apply[*LookupSyntheticMonitoringProbeResult](o, func(v *LookupSyntheticMonitoringProbeResult) int { return v.TenantId })
}
