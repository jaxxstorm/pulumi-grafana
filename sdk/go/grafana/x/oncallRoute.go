// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/routes/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSlackChannel, err := grafana.GetOnCallSlackChannel(ctx, &grafana.GetOnCallSlackChannelArgs{
//				Name: "example_slack_channel",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallEscalationChain(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			exampleIntegration, err := grafana.NewOncallIntegration(ctx, "exampleIntegration", &grafana.OncallIntegrationArgs{
//				Type: pulumi.String("grafana"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallRoute(ctx, "exampleRoute", &grafana.OncallRouteArgs{
//				IntegrationId:     exampleIntegration.ID(),
//				EscalationChainId: _default.ID(),
//				RoutingRegex:      pulumi.String("us-(east|west)"),
//				Position:          pulumi.Int(0),
//				Slack: &grafana.OncallRouteSlackArgs{
//					ChannelId: *pulumi.String(exampleSlackChannel.SlackId),
//					Enabled:   pulumi.Bool(true),
//				},
//				Telegram: &grafana.OncallRouteTelegramArgs{
//					Id:      pulumi.String("ONCALLTELEGRAMID"),
//					Enabled: pulumi.Bool(true),
//				},
//				Msteams: &grafana.OncallRouteMsteamsArgs{
//					Id:      pulumi.String("ONCALLMSTEAMSID"),
//					Enabled: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/oncallRoute:OncallRoute route_name {{route_id}}
//
// ```
type OncallRoute struct {
	pulumi.CustomResourceState

	// The ID of the escalation chain.
	EscalationChainId pulumix.Output[string] `pulumi:"escalationChainId"`
	// The ID of the integration.
	IntegrationId pulumix.Output[string] `pulumi:"integrationId"`
	// MS teams-specific settings for a route.
	Msteams pulumix.GPtrOutput[OncallRouteMsteams, OncallRouteMsteamsOutput] `pulumi:"msteams"`
	// The position of the route (starts from 0).
	Position pulumix.Output[int] `pulumi:"position"`
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex pulumix.Output[string] `pulumi:"routingRegex"`
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType pulumix.Output[*string] `pulumi:"routingType"`
	// Slack-specific settings for a route.
	Slack pulumix.GPtrOutput[OncallRouteSlack, OncallRouteSlackOutput] `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram pulumix.GPtrOutput[OncallRouteTelegram, OncallRouteTelegramOutput] `pulumi:"telegram"`
}

// NewOncallRoute registers a new resource with the given unique name, arguments, and options.
func NewOncallRoute(ctx *pulumi.Context,
	name string, args *OncallRouteArgs, opts ...pulumi.ResourceOption) (*OncallRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EscalationChainId == nil {
		return nil, errors.New("invalid value for required argument 'EscalationChainId'")
	}
	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.Position == nil {
		return nil, errors.New("invalid value for required argument 'Position'")
	}
	if args.RoutingRegex == nil {
		return nil, errors.New("invalid value for required argument 'RoutingRegex'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallRoute
	err := ctx.RegisterResource("grafana:index/oncallRoute:OncallRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallRoute gets an existing OncallRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallRouteState, opts ...pulumi.ResourceOption) (*OncallRoute, error) {
	var resource OncallRoute
	err := ctx.ReadResource("grafana:index/oncallRoute:OncallRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallRoute resources.
type oncallRouteState struct {
	// The ID of the escalation chain.
	EscalationChainId *string `pulumi:"escalationChainId"`
	// The ID of the integration.
	IntegrationId *string `pulumi:"integrationId"`
	// MS teams-specific settings for a route.
	Msteams *OncallRouteMsteams `pulumi:"msteams"`
	// The position of the route (starts from 0).
	Position *int `pulumi:"position"`
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex *string `pulumi:"routingRegex"`
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType *string `pulumi:"routingType"`
	// Slack-specific settings for a route.
	Slack *OncallRouteSlack `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram *OncallRouteTelegram `pulumi:"telegram"`
}

type OncallRouteState struct {
	// The ID of the escalation chain.
	EscalationChainId pulumix.Input[*string]
	// The ID of the integration.
	IntegrationId pulumix.Input[*string]
	// MS teams-specific settings for a route.
	Msteams pulumix.Input[*OncallRouteMsteamsArgs]
	// The position of the route (starts from 0).
	Position pulumix.Input[*int]
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex pulumix.Input[*string]
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType pulumix.Input[*string]
	// Slack-specific settings for a route.
	Slack pulumix.Input[*OncallRouteSlackArgs]
	// Telegram-specific settings for a route.
	Telegram pulumix.Input[*OncallRouteTelegramArgs]
}

func (OncallRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallRouteState)(nil)).Elem()
}

type oncallRouteArgs struct {
	// The ID of the escalation chain.
	EscalationChainId string `pulumi:"escalationChainId"`
	// The ID of the integration.
	IntegrationId string `pulumi:"integrationId"`
	// MS teams-specific settings for a route.
	Msteams *OncallRouteMsteams `pulumi:"msteams"`
	// The position of the route (starts from 0).
	Position int `pulumi:"position"`
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex string `pulumi:"routingRegex"`
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType *string `pulumi:"routingType"`
	// Slack-specific settings for a route.
	Slack *OncallRouteSlack `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram *OncallRouteTelegram `pulumi:"telegram"`
}

// The set of arguments for constructing a OncallRoute resource.
type OncallRouteArgs struct {
	// The ID of the escalation chain.
	EscalationChainId pulumix.Input[string]
	// The ID of the integration.
	IntegrationId pulumix.Input[string]
	// MS teams-specific settings for a route.
	Msteams pulumix.Input[*OncallRouteMsteamsArgs]
	// The position of the route (starts from 0).
	Position pulumix.Input[int]
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex pulumix.Input[string]
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType pulumix.Input[*string]
	// Slack-specific settings for a route.
	Slack pulumix.Input[*OncallRouteSlackArgs]
	// Telegram-specific settings for a route.
	Telegram pulumix.Input[*OncallRouteTelegramArgs]
}

func (OncallRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallRouteArgs)(nil)).Elem()
}

type OncallRouteOutput struct{ *pulumi.OutputState }

func (OncallRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRoute)(nil)).Elem()
}

func (o OncallRouteOutput) ToOncallRouteOutput() OncallRouteOutput {
	return o
}

func (o OncallRouteOutput) ToOncallRouteOutputWithContext(ctx context.Context) OncallRouteOutput {
	return o
}

func (o OncallRouteOutput) ToOutput(ctx context.Context) pulumix.Output[OncallRoute] {
	return pulumix.Output[OncallRoute]{
		OutputState: o.OutputState,
	}
}

// The ID of the escalation chain.
func (o OncallRouteOutput) EscalationChainId() pulumix.Output[string] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.Output[string] { return v.EscalationChainId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the integration.
func (o OncallRouteOutput) IntegrationId() pulumix.Output[string] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.Output[string] { return v.IntegrationId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// MS teams-specific settings for a route.
func (o OncallRouteOutput) Msteams() pulumix.GPtrOutput[OncallRouteMsteams, OncallRouteMsteamsOutput] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.GPtrOutput[OncallRouteMsteams, OncallRouteMsteamsOutput] { return v.Msteams })
	unwrapped := pulumix.Flatten[*OncallRouteMsteams, pulumix.GPtrOutput[OncallRouteMsteams, OncallRouteMsteamsOutput]](value)
	return pulumix.GPtrOutput[OncallRouteMsteams, OncallRouteMsteamsOutput]{OutputState: unwrapped.OutputState}
}

// The position of the route (starts from 0).
func (o OncallRouteOutput) Position() pulumix.Output[int] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.Output[int] { return v.Position })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
func (o OncallRouteOutput) RoutingRegex() pulumix.Output[string] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.Output[string] { return v.RoutingRegex })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The type of route. Can be jinja2, regex Defaults to `regex`.
func (o OncallRouteOutput) RoutingType() pulumix.Output[*string] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.Output[*string] { return v.RoutingType })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Slack-specific settings for a route.
func (o OncallRouteOutput) Slack() pulumix.GPtrOutput[OncallRouteSlack, OncallRouteSlackOutput] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.GPtrOutput[OncallRouteSlack, OncallRouteSlackOutput] { return v.Slack })
	unwrapped := pulumix.Flatten[*OncallRouteSlack, pulumix.GPtrOutput[OncallRouteSlack, OncallRouteSlackOutput]](value)
	return pulumix.GPtrOutput[OncallRouteSlack, OncallRouteSlackOutput]{OutputState: unwrapped.OutputState}
}

// Telegram-specific settings for a route.
func (o OncallRouteOutput) Telegram() pulumix.GPtrOutput[OncallRouteTelegram, OncallRouteTelegramOutput] {
	value := pulumix.Apply[OncallRoute](o, func(v OncallRoute) pulumix.GPtrOutput[OncallRouteTelegram, OncallRouteTelegramOutput] {
		return v.Telegram
	})
	unwrapped := pulumix.Flatten[*OncallRouteTelegram, pulumix.GPtrOutput[OncallRouteTelegram, OncallRouteTelegramOutput]](value)
	return pulumix.GPtrOutput[OncallRouteTelegram, OncallRouteTelegramOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(OncallRouteOutput{})
}
