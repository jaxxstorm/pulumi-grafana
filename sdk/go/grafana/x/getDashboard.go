// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
// * [Folder/Dashboard Search HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_dashboard_search/)
// * [Dashboard HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"id":    12345,
//				"uid":   "test-ds-dashboard-uid",
//				"title": "Production Overview",
//				"tags": []string{
//					"templated",
//				},
//				"timezone":      "browser",
//				"schemaVersion": 16,
//				"version":       0,
//				"refresh":       "25s",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			test, err := grafana.NewDashboard(ctx, "test", &grafana.DashboardArgs{
//				ConfigJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_ = grafana.LookupDashboardOutput(ctx, grafana.GetDashboardOutputArgs{
//				DashboardId: test.DashboardId,
//			}, nil)
//			_, err = grafana.LookupDashboard(ctx, &grafana.LookupDashboardArgs{
//				Uid: pulumi.StringRef("test-ds-dashboard-uid"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDashboard(ctx *pulumi.Context, args *LookupDashboardArgs, opts ...pulumi.InvokeOption) (*LookupDashboardResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDashboardResult
	err := ctx.Invoke("grafana:index/getDashboard:getDashboard", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDashboard.
type LookupDashboardArgs struct {
	// The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.
	DashboardId *int `pulumi:"dashboardId"`
	// The uid of the Grafana dashboard. Specify either this or `dashboardId`. Defaults to ``.
	Uid *string `pulumi:"uid"`
}

// A collection of values returned by getDashboard.
type LookupDashboardResult struct {
	// The complete dashboard model JSON.
	ConfigJson string `pulumi:"configJson"`
	// The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.
	DashboardId *int `pulumi:"dashboardId"`
	// The numerical ID of the folder where the Grafana dashboard is found.
	Folder int `pulumi:"folder"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether or not the Grafana dashboard is starred. Starred Dashboards will show up on your own Home Dashboard by default, and are a convenient way to mark Dashboards that youâ€™re interested in.
	IsStarred bool `pulumi:"isStarred"`
	// URL slug of the dashboard (deprecated).
	Slug string `pulumi:"slug"`
	// The title of the Grafana dashboard.
	Title string `pulumi:"title"`
	// The uid of the Grafana dashboard. Specify either this or `dashboardId`. Defaults to ``.
	Uid *string `pulumi:"uid"`
	// The full URL of the dashboard.
	Url string `pulumi:"url"`
	// The numerical version of the Grafana dashboard.
	Version int `pulumi:"version"`
}

func LookupDashboardOutput(ctx *pulumi.Context, args LookupDashboardOutputArgs, opts ...pulumi.InvokeOption) LookupDashboardResultOutput {
	outputResult := pulumix.ApplyErr[*LookupDashboardArgs](args.ToOutput(), func(plainArgs *LookupDashboardArgs) (*LookupDashboardResult, error) {
		return LookupDashboard(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupDashboardResultOutput, *LookupDashboardResult](outputResult)
}

// A collection of arguments for invoking getDashboard.
type LookupDashboardOutputArgs struct {
	// The numerical ID of the Grafana dashboard. Specify either this or `uid`. Defaults to `-1`.
	DashboardId pulumix.Input[*int] `pulumi:"dashboardId"`
	// The uid of the Grafana dashboard. Specify either this or `dashboardId`. Defaults to ``.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (args LookupDashboardOutputArgs) ToOutput() pulumix.Output[*LookupDashboardArgs] {
	allArgs := pulumix.All(
		args.DashboardId.ToOutput(context.Background()).AsAny(),
		args.Uid.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupDashboardArgs {
		return &LookupDashboardArgs{
			DashboardId: resolvedArgs[0].(*int),
			Uid:         resolvedArgs[1].(*string),
		}
	})
}

type LookupDashboardResultOutput struct{ *pulumi.OutputState }

func (LookupDashboardResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDashboardResult)(nil)).Elem()
}

func (o LookupDashboardResultOutput) ToOutput(context.Context) pulumix.Output[*LookupDashboardResult] {
	return pulumix.Output[*LookupDashboardResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDashboardResultOutput) ConfigJson() pulumix.Output[string] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) string { return v.ConfigJson })
}

func (o LookupDashboardResultOutput) DashboardId() pulumix.Output[*int] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) *int { return v.DashboardId })
}

func (o LookupDashboardResultOutput) Folder() pulumix.Output[int] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) int { return v.Folder })
}

func (o LookupDashboardResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) string { return v.Id })
}

func (o LookupDashboardResultOutput) IsStarred() pulumix.Output[bool] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) bool { return v.IsStarred })
}

func (o LookupDashboardResultOutput) Slug() pulumix.Output[string] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) string { return v.Slug })
}

func (o LookupDashboardResultOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) string { return v.Title })
}

func (o LookupDashboardResultOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) *string { return v.Uid })
}

func (o LookupDashboardResultOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) string { return v.Url })
}

func (o LookupDashboardResultOutput) Version() pulumix.Output[int] {
	return pulumix.Apply[*LookupDashboardResult](o, func(v *LookupDashboardResult) int { return v.Version })
}
