// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana-cloud/authentication-and-permissions/access-policies/)
// * [API documentation](https://grafana.com/docs/grafana-cloud/reference/cloud-api/#create-a-token)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := grafana.GetCloudOrganization(ctx, &grafana.GetCloudOrganizationArgs{
//				Slug: pulumi.StringRef("<your org slug>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testCloudAccessPolicy, err := grafana.NewCloudAccessPolicy(ctx, "testCloudAccessPolicy", &grafana.CloudAccessPolicyArgs{
//				Region:      pulumi.String("us"),
//				DisplayName: pulumi.String("My Policy"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("metrics:read"),
//					pulumi.String("logs:read"),
//				},
//				Realms: grafana.CloudAccessPolicyRealmArray{
//					&grafana.CloudAccessPolicyRealmArgs{
//						Type:       pulumi.String("org"),
//						Identifier: *pulumi.String(current.Id),
//						LabelPolicies: grafana.CloudAccessPolicyRealmLabelPolicyArray{
//							&grafana.CloudAccessPolicyRealmLabelPolicyArgs{
//								Selector: pulumi.String("{namespace=\"default\"}"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewCloudAccessPolicyToken(ctx, "testCloudAccessPolicyToken", &grafana.CloudAccessPolicyTokenArgs{
//				Region:         pulumi.String("us"),
//				AccessPolicyId: testCloudAccessPolicy.PolicyId,
//				DisplayName:    pulumi.String("My Policy Token"),
//				ExpiresAt:      pulumi.String("2023-01-01T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CloudAccessPolicyToken struct {
	pulumi.CustomResourceState

	// ID of the access policy for which to create a token.
	AccessPolicyId pulumix.Output[string] `pulumi:"accessPolicyId"`
	// Creation date of the access policy token.
	CreatedAt pulumix.Output[string] `pulumi:"createdAt"`
	// Display name of the access policy token. Defaults to the name.
	DisplayName pulumix.Output[*string] `pulumi:"displayName"`
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt pulumix.Output[*string] `pulumi:"expiresAt"`
	// Name of the access policy token.
	Name pulumix.Output[string] `pulumi:"name"`
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region pulumix.Output[string] `pulumi:"region"`
	Token  pulumix.Output[string] `pulumi:"token"`
	// Last update date of the access policy token.
	UpdatedAt pulumix.Output[string] `pulumi:"updatedAt"`
}

// NewCloudAccessPolicyToken registers a new resource with the given unique name, arguments, and options.
func NewCloudAccessPolicyToken(ctx *pulumi.Context,
	name string, args *CloudAccessPolicyTokenArgs, opts ...pulumi.ResourceOption) (*CloudAccessPolicyToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'AccessPolicyId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudAccessPolicyToken
	err := ctx.RegisterResource("grafana:index/cloudAccessPolicyToken:CloudAccessPolicyToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudAccessPolicyToken gets an existing CloudAccessPolicyToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudAccessPolicyToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudAccessPolicyTokenState, opts ...pulumi.ResourceOption) (*CloudAccessPolicyToken, error) {
	var resource CloudAccessPolicyToken
	err := ctx.ReadResource("grafana:index/cloudAccessPolicyToken:CloudAccessPolicyToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudAccessPolicyToken resources.
type cloudAccessPolicyTokenState struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId *string `pulumi:"accessPolicyId"`
	// Creation date of the access policy token.
	CreatedAt *string `pulumi:"createdAt"`
	// Display name of the access policy token. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Name of the access policy token.
	Name *string `pulumi:"name"`
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region *string `pulumi:"region"`
	Token  *string `pulumi:"token"`
	// Last update date of the access policy token.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type CloudAccessPolicyTokenState struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId pulumix.Input[*string]
	// Creation date of the access policy token.
	CreatedAt pulumix.Input[*string]
	// Display name of the access policy token. Defaults to the name.
	DisplayName pulumix.Input[*string]
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt pulumix.Input[*string]
	// Name of the access policy token.
	Name pulumix.Input[*string]
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region pulumix.Input[*string]
	Token  pulumix.Input[*string]
	// Last update date of the access policy token.
	UpdatedAt pulumix.Input[*string]
}

func (CloudAccessPolicyTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudAccessPolicyTokenState)(nil)).Elem()
}

type cloudAccessPolicyTokenArgs struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId string `pulumi:"accessPolicyId"`
	// Display name of the access policy token. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Name of the access policy token.
	Name *string `pulumi:"name"`
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a CloudAccessPolicyToken resource.
type CloudAccessPolicyTokenArgs struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId pulumix.Input[string]
	// Display name of the access policy token. Defaults to the name.
	DisplayName pulumix.Input[*string]
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt pulumix.Input[*string]
	// Name of the access policy token.
	Name pulumix.Input[*string]
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
	Region pulumix.Input[string]
}

func (CloudAccessPolicyTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudAccessPolicyTokenArgs)(nil)).Elem()
}

type CloudAccessPolicyTokenOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyToken)(nil)).Elem()
}

func (o CloudAccessPolicyTokenOutput) ToCloudAccessPolicyTokenOutput() CloudAccessPolicyTokenOutput {
	return o
}

func (o CloudAccessPolicyTokenOutput) ToCloudAccessPolicyTokenOutputWithContext(ctx context.Context) CloudAccessPolicyTokenOutput {
	return o
}

func (o CloudAccessPolicyTokenOutput) ToOutput(ctx context.Context) pulumix.Output[CloudAccessPolicyToken] {
	return pulumix.Output[CloudAccessPolicyToken]{
		OutputState: o.OutputState,
	}
}

// ID of the access policy for which to create a token.
func (o CloudAccessPolicyTokenOutput) AccessPolicyId() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[string] { return v.AccessPolicyId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Creation date of the access policy token.
func (o CloudAccessPolicyTokenOutput) CreatedAt() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[string] { return v.CreatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Display name of the access policy token. Defaults to the name.
func (o CloudAccessPolicyTokenOutput) DisplayName() pulumix.Output[*string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[*string] { return v.DisplayName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Expiration date of the access policy token. Does not expire by default.
func (o CloudAccessPolicyTokenOutput) ExpiresAt() pulumix.Output[*string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[*string] { return v.ExpiresAt })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the access policy token.
func (o CloudAccessPolicyTokenOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/reference/cloud-api/#list-regions.
func (o CloudAccessPolicyTokenOutput) Region() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[string] { return v.Region })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudAccessPolicyTokenOutput) Token() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[string] { return v.Token })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Last update date of the access policy token.
func (o CloudAccessPolicyTokenOutput) UpdatedAt() pulumix.Output[string] {
	value := pulumix.Apply[CloudAccessPolicyToken](o, func(v CloudAccessPolicyToken) pulumix.Output[string] { return v.UpdatedAt })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudAccessPolicyTokenOutput{})
}
