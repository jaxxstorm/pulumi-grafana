// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The provider type for the grafana package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via
	// the `GRAFANA_AUTH` environment variable.
	Auth pulumix.Output[*string] `pulumi:"auth"`
	// Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively
	// be set via the `GRAFANA_CA_CERT` environment variable.
	CaCert pulumix.Output[*string] `pulumi:"caCert"`
	// Access Policy Token (or API key) for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment
	// variable.
	CloudApiKey pulumix.Output[*string] `pulumi:"cloudApiKey"`
	// Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
	CloudApiUrl pulumix.Output[*string] `pulumi:"cloudApiUrl"`
	// A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
	OncallAccessToken pulumix.Output[*string] `pulumi:"oncallAccessToken"`
	// An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
	OncallUrl pulumix.Output[*string] `pulumi:"oncallUrl"`
	// A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
	SmAccessToken pulumix.Output[*string] `pulumi:"smAccessToken"`
	// Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
	// correct value for each service region is cited in the [Synthetic Monitoring
	// documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
	// the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
	// `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
	// managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
	// each provider ensures all providers interact with the same SM API.
	SmUrl pulumix.Output[*string] `pulumi:"smUrl"`
	// Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be
	// set via the `GRAFANA_TLS_CERT` environment variable.
	TlsCert pulumix.Output[*string] `pulumi:"tlsCert"`
	// Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via
	// the `GRAFANA_TLS_KEY` environment variable.
	TlsKey pulumix.Output[*string] `pulumi:"tlsKey"`
	// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
	Url pulumix.Output[*string] `pulumi:"url"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Auth == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_AUTH"); d != nil {
			args.Auth = pulumix.Ptr(d.(string))
		}
	}
	if args.CaCert == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_CA_CERT"); d != nil {
			args.CaCert = pulumix.Ptr(d.(string))
		}
	}
	if args.CloudApiKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_CLOUD_API_KEY"); d != nil {
			args.CloudApiKey = pulumix.Ptr(d.(string))
		}
	}
	if args.CloudApiUrl == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_CLOUD_API_URL"); d != nil {
			args.CloudApiUrl = pulumix.Ptr(d.(string))
		}
	}
	if args.InsecureSkipVerify == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "GRAFANA_INSECURE_SKIP_VERIFY"); d != nil {
			args.InsecureSkipVerify = pulumix.Ptr(d.(bool))
		}
	}
	if args.OncallAccessToken == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_ONCALL_ACCESS_TOKEN"); d != nil {
			args.OncallAccessToken = pulumix.Ptr(d.(string))
		}
	}
	if args.OncallUrl == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_ONCALL_URL"); d != nil {
			args.OncallUrl = pulumix.Ptr(d.(string))
		}
	}
	if args.OrgId == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvInt, "GRAFANA_ORG_ID"); d != nil {
			args.OrgId = pulumix.Ptr(d.(int))
		}
	}
	if args.Retries == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvInt, "GRAFANA_RETRIES"); d != nil {
			args.Retries = pulumix.Ptr(d.(int))
		}
	}
	if args.SmAccessToken == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_SM_ACCESS_TOKEN"); d != nil {
			args.SmAccessToken = pulumix.Ptr(d.(string))
		}
	}
	if args.SmUrl == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_SM_URL"); d != nil {
			args.SmUrl = pulumix.Ptr(d.(string))
		}
	}
	if args.StoreDashboardSha256 == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "GRAFANA_STORE_DASHBOARD_SHA256"); d != nil {
			args.StoreDashboardSha256 = pulumix.Ptr(d.(bool))
		}
	}
	if args.TlsCert == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_TLS_CERT"); d != nil {
			args.TlsCert = pulumix.Ptr(d.(string))
		}
	}
	if args.TlsKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_TLS_KEY"); d != nil {
			args.TlsKey = pulumix.Ptr(d.(string))
		}
	}
	if args.Url == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "GRAFANA_URL"); d != nil {
			args.Url = pulumix.Ptr(d.(string))
		}
	}
	if args.Auth != nil {
		untypedSecretValue := pulumi.ToSecret(args.Auth.ToOutput(ctx.Context()).Untyped())
		args.Auth = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.CloudApiKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.CloudApiKey.ToOutput(ctx.Context()).Untyped())
		args.CloudApiKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.OncallAccessToken != nil {
		untypedSecretValue := pulumi.ToSecret(args.OncallAccessToken.ToOutput(ctx.Context()).Untyped())
		args.OncallAccessToken = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.SmAccessToken != nil {
		untypedSecretValue := pulumi.ToSecret(args.SmAccessToken.ToOutput(ctx.Context()).Untyped())
		args.SmAccessToken = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	if args.TlsKey != nil {
		untypedSecretValue := pulumi.ToSecret(args.TlsKey.ToOutput(ctx.Context()).Untyped())
		args.TlsKey = pulumix.MustConvertTyped[*string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"auth",
		"cloudApiKey",
		"oncallAccessToken",
		"smAccessToken",
		"tlsKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:grafana", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via
	// the `GRAFANA_AUTH` environment variable.
	Auth *string `pulumi:"auth"`
	// Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively
	// be set via the `GRAFANA_CA_CERT` environment variable.
	CaCert *string `pulumi:"caCert"`
	// Access Policy Token (or API key) for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment
	// variable.
	CloudApiKey *string `pulumi:"cloudApiKey"`
	// Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
	CloudApiUrl *string `pulumi:"cloudApiUrl"`
	// Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
	OncallAccessToken *string `pulumi:"oncallAccessToken"`
	// An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
	OncallUrl *string `pulumi:"oncallUrl"`
	// Deprecated: Use the `org_id` attributes on resources instead.
	//
	// Deprecated: Use the `org_id` attributes on resources instead.
	OrgId *int `pulumi:"orgId"`
	// The amount of retries to use for Grafana API and Grafana Cloud API calls. May alternatively be set via the
	// `GRAFANA_RETRIES` environment variable.
	Retries *int `pulumi:"retries"`
	// The status codes to retry on for Grafana API and Grafana Cloud API calls. Use `x` as a digit wildcard. Defaults to 429
	// and 5xx. May alternatively be set via the `GRAFANA_RETRY_STATUS_CODES` environment variable.
	RetryStatusCodes []string `pulumi:"retryStatusCodes"`
	// A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
	SmAccessToken *string `pulumi:"smAccessToken"`
	// Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
	// correct value for each service region is cited in the [Synthetic Monitoring
	// documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
	// the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
	// `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
	// managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
	// each provider ensures all providers interact with the same SM API.
	SmUrl *string `pulumi:"smUrl"`
	// Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
	StoreDashboardSha256 *bool `pulumi:"storeDashboardSha256"`
	// Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be
	// set via the `GRAFANA_TLS_CERT` environment variable.
	TlsCert *string `pulumi:"tlsCert"`
	// Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via
	// the `GRAFANA_TLS_KEY` environment variable.
	TlsKey *string `pulumi:"tlsKey"`
	// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via
	// the `GRAFANA_AUTH` environment variable.
	Auth pulumix.Input[*string]
	// Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively
	// be set via the `GRAFANA_CA_CERT` environment variable.
	CaCert pulumix.Input[*string]
	// Access Policy Token (or API key) for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment
	// variable.
	CloudApiKey pulumix.Input[*string]
	// Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
	CloudApiUrl pulumix.Input[*string]
	// Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
	InsecureSkipVerify pulumix.Input[*bool]
	// A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
	OncallAccessToken pulumix.Input[*string]
	// An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
	OncallUrl pulumix.Input[*string]
	// Deprecated: Use the `org_id` attributes on resources instead.
	//
	// Deprecated: Use the `org_id` attributes on resources instead.
	OrgId pulumix.Input[*int]
	// The amount of retries to use for Grafana API and Grafana Cloud API calls. May alternatively be set via the
	// `GRAFANA_RETRIES` environment variable.
	Retries pulumix.Input[*int]
	// The status codes to retry on for Grafana API and Grafana Cloud API calls. Use `x` as a digit wildcard. Defaults to 429
	// and 5xx. May alternatively be set via the `GRAFANA_RETRY_STATUS_CODES` environment variable.
	RetryStatusCodes pulumix.Input[[]string]
	// A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
	SmAccessToken pulumix.Input[*string]
	// Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
	// correct value for each service region is cited in the [Synthetic Monitoring
	// documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
	// the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
	// `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
	// managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
	// each provider ensures all providers interact with the same SM API.
	SmUrl pulumix.Input[*string]
	// Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
	StoreDashboardSha256 pulumix.Input[*bool]
	// Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be
	// set via the `GRAFANA_TLS_CERT` environment variable.
	TlsCert pulumix.Input[*string]
	// Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via
	// the `GRAFANA_TLS_KEY` environment variable.
	TlsKey pulumix.Input[*string]
	// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
	Url pulumix.Input[*string]
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToOutput(ctx context.Context) pulumix.Output[Provider] {
	return pulumix.Output[Provider]{
		OutputState: o.OutputState,
	}
}

// API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via
// the `GRAFANA_AUTH` environment variable.
func (o ProviderOutput) Auth() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.Auth })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively
// be set via the `GRAFANA_CA_CERT` environment variable.
func (o ProviderOutput) CaCert() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.CaCert })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Access Policy Token (or API key) for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_API_KEY` environment
// variable.
func (o ProviderOutput) CloudApiKey() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.CloudApiKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
func (o ProviderOutput) CloudApiUrl() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.CloudApiUrl })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
func (o ProviderOutput) OncallAccessToken() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.OncallAccessToken })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
func (o ProviderOutput) OncallUrl() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.OncallUrl })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
func (o ProviderOutput) SmAccessToken() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.SmAccessToken })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Synthetic monitoring backend address. May alternatively be set via the `GRAFANA_SM_URL` environment variable. The
// correct value for each service region is cited in the [Synthetic Monitoring
// documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/#probe-api-server-url). Note
// the `sm_url` value is optional, but it must correspond with the value specified as the `region_slug` in the
// `grafana_cloud_stack` resource. Also note that when a Terraform configuration contains multiple provider instances
// managing SM resources associated with the same Grafana stack, specifying an explicit `sm_url` set to the same value for
// each provider ensures all providers interact with the same SM API.
func (o ProviderOutput) SmUrl() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.SmUrl })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be
// set via the `GRAFANA_TLS_CERT` environment variable.
func (o ProviderOutput) TlsCert() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.TlsCert })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via
// the `GRAFANA_TLS_KEY` environment variable.
func (o ProviderOutput) TlsKey() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.TlsKey })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
func (o ProviderOutput) Url() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.Url })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ProviderOutput{})
}
