// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use the `teamSync` attribute of the `Team` resource instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewTeamExternalGroup(ctx, "test-team-group", &grafana.TeamExternalGroupArgs{
//				Groups: pulumi.StringArray{
//					pulumi.String("test-group-1"),
//					pulumi.String("test-group-2"),
//				},
//				TeamId: pulumi.String("1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/teamExternalGroup:TeamExternalGroup main {{team_id}}
//
// ```
type TeamExternalGroup struct {
	pulumi.CustomResourceState

	// The team external groups list
	Groups pulumix.ArrayOutput[string] `pulumi:"groups"`
	// The Team ID
	TeamId pulumix.Output[string] `pulumi:"teamId"`
}

// NewTeamExternalGroup registers a new resource with the given unique name, arguments, and options.
func NewTeamExternalGroup(ctx *pulumi.Context,
	name string, args *TeamExternalGroupArgs, opts ...pulumi.ResourceOption) (*TeamExternalGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Groups == nil {
		return nil, errors.New("invalid value for required argument 'Groups'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamExternalGroup
	err := ctx.RegisterResource("grafana:index/teamExternalGroup:TeamExternalGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamExternalGroup gets an existing TeamExternalGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamExternalGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamExternalGroupState, opts ...pulumi.ResourceOption) (*TeamExternalGroup, error) {
	var resource TeamExternalGroup
	err := ctx.ReadResource("grafana:index/teamExternalGroup:TeamExternalGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamExternalGroup resources.
type teamExternalGroupState struct {
	// The team external groups list
	Groups []string `pulumi:"groups"`
	// The Team ID
	TeamId *string `pulumi:"teamId"`
}

type TeamExternalGroupState struct {
	// The team external groups list
	Groups pulumix.Input[[]string]
	// The Team ID
	TeamId pulumix.Input[*string]
}

func (TeamExternalGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamExternalGroupState)(nil)).Elem()
}

type teamExternalGroupArgs struct {
	// The team external groups list
	Groups []string `pulumi:"groups"`
	// The Team ID
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a TeamExternalGroup resource.
type TeamExternalGroupArgs struct {
	// The team external groups list
	Groups pulumix.Input[[]string]
	// The Team ID
	TeamId pulumix.Input[string]
}

func (TeamExternalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamExternalGroupArgs)(nil)).Elem()
}

type TeamExternalGroupOutput struct{ *pulumi.OutputState }

func (TeamExternalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamExternalGroup)(nil)).Elem()
}

func (o TeamExternalGroupOutput) ToTeamExternalGroupOutput() TeamExternalGroupOutput {
	return o
}

func (o TeamExternalGroupOutput) ToTeamExternalGroupOutputWithContext(ctx context.Context) TeamExternalGroupOutput {
	return o
}

func (o TeamExternalGroupOutput) ToOutput(ctx context.Context) pulumix.Output[TeamExternalGroup] {
	return pulumix.Output[TeamExternalGroup]{
		OutputState: o.OutputState,
	}
}

// The team external groups list
func (o TeamExternalGroupOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TeamExternalGroup](o, func(v TeamExternalGroup) pulumix.ArrayOutput[string] { return v.Groups })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The Team ID
func (o TeamExternalGroupOutput) TeamId() pulumix.Output[string] {
	value := pulumix.Apply[TeamExternalGroup](o, func(v TeamExternalGroup) pulumix.Output[string] { return v.TeamId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(TeamExternalGroupOutput{})
}
