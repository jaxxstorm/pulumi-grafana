// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Grafana Alerting rule groups.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/alerting/alerting-rules/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#alert-rules)
//
// This resource requires Grafana 9.1.0 or later.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ruleFolder, err := grafana.NewFolder(ctx, "ruleFolder", &grafana.FolderArgs{
//				Title: pulumi.String("My Alert Rule Folder"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"hide":          false,
//				"intervalMs":    1000,
//				"maxDataPoints": 43200,
//				"refId":         "A",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = grafana.NewRuleGroup(ctx, "myAlertRule", &grafana.RuleGroupArgs{
//				FolderUid:       ruleFolder.Uid,
//				IntervalSeconds: pulumi.Int(240),
//				OrgId:           pulumi.String("1"),
//				Rules: grafana.RuleGroupRuleArray{
//					&grafana.RuleGroupRuleArgs{
//						Name:         pulumi.String("My Alert Rule 1"),
//						For:          pulumi.String("2m"),
//						Condition:    pulumi.String("B"),
//						NoDataState:  pulumi.String("NoData"),
//						ExecErrState: pulumi.String("Alerting"),
//						Annotations: pulumi.StringMap{
//							"a": pulumi.String("b"),
//							"c": pulumi.String("d"),
//						},
//						Labels: pulumi.StringMap{
//							"e": pulumi.String("f"),
//							"g": pulumi.String("h"),
//						},
//						IsPaused: pulumi.Bool(false),
//						Datas: grafana.RuleGroupRuleDataArray{
//							&grafana.RuleGroupRuleDataArgs{
//								RefId:     pulumi.String("A"),
//								QueryType: pulumi.String(""),
//								RelativeTimeRange: &grafana.RuleGroupRuleDataRelativeTimeRangeArgs{
//									From: pulumi.Int(600),
//									To:   pulumi.Int(0),
//								},
//								DatasourceUid: pulumi.String("PD8C576611E62080A"),
//								Model:         pulumi.String(json0),
//							},
//							&grafana.RuleGroupRuleDataArgs{
//								RefId:     pulumi.String("B"),
//								QueryType: pulumi.String(""),
//								RelativeTimeRange: &grafana.RuleGroupRuleDataRelativeTimeRangeArgs{
//									From: pulumi.Int(0),
//									To:   pulumi.Int(0),
//								},
//								DatasourceUid: pulumi.String("-100"),
//								Model: pulumi.String(`{
//	    "conditions": [
//	        {
//	        "evaluator": {
//	            "params": [
//	            3
//	            ],
//	            "type": "gt"
//	        },
//	        "operator": {
//	            "type": "and"
//	        },
//	        "query": {
//	            "params": [
//	            "A"
//	            ]
//	        },
//	        "reducer": {
//	            "params": [],
//	            "type": "last"
//	        },
//	        "type": "query"
//	        }
//	    ],
//	    "datasource": {
//	        "type": "__expr__",
//	        "uid": "-100"
//	    },
//	    "hide": false,
//	    "intervalMs": 1000,
//	    "maxDataPoints": 43200,
//	    "refId": "B",
//	    "type": "classic_conditions"
//	}
//
// `),
//
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/ruleGroup:RuleGroup rule_group_name {{folder_uid}};{{rule_group_name}}
//
// ```
type RuleGroup struct {
	pulumi.CustomResourceState

	// The UID of the folder that the group belongs to.
	FolderUid pulumix.Output[string] `pulumi:"folderUid"`
	// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
	IntervalSeconds pulumix.Output[int] `pulumi:"intervalSeconds"`
	// The name of the rule group.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ID of the org to which the group belongs.
	OrgId pulumix.Output[string] `pulumi:"orgId"`
	// The rules within the group.
	Rules pulumix.GArrayOutput[RuleGroupRule, RuleGroupRuleOutput] `pulumi:"rules"`
}

// NewRuleGroup registers a new resource with the given unique name, arguments, and options.
func NewRuleGroup(ctx *pulumi.Context,
	name string, args *RuleGroupArgs, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderUid == nil {
		return nil, errors.New("invalid value for required argument 'FolderUid'")
	}
	if args.IntervalSeconds == nil {
		return nil, errors.New("invalid value for required argument 'IntervalSeconds'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleGroup
	err := ctx.RegisterResource("grafana:index/ruleGroup:RuleGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleGroup gets an existing RuleGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleGroupState, opts ...pulumi.ResourceOption) (*RuleGroup, error) {
	var resource RuleGroup
	err := ctx.ReadResource("grafana:index/ruleGroup:RuleGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleGroup resources.
type ruleGroupState struct {
	// The UID of the folder that the group belongs to.
	FolderUid *string `pulumi:"folderUid"`
	// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
	IntervalSeconds *int `pulumi:"intervalSeconds"`
	// The name of the rule group.
	Name *string `pulumi:"name"`
	// The ID of the org to which the group belongs.
	OrgId *string `pulumi:"orgId"`
	// The rules within the group.
	Rules []RuleGroupRule `pulumi:"rules"`
}

type RuleGroupState struct {
	// The UID of the folder that the group belongs to.
	FolderUid pulumix.Input[*string]
	// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
	IntervalSeconds pulumix.Input[*int]
	// The name of the rule group.
	Name pulumix.Input[*string]
	// The ID of the org to which the group belongs.
	OrgId pulumix.Input[*string]
	// The rules within the group.
	Rules pulumix.Input[[]*RuleGroupRuleArgs]
}

func (RuleGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupState)(nil)).Elem()
}

type ruleGroupArgs struct {
	// The UID of the folder that the group belongs to.
	FolderUid string `pulumi:"folderUid"`
	// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
	IntervalSeconds int `pulumi:"intervalSeconds"`
	// The name of the rule group.
	Name *string `pulumi:"name"`
	// The ID of the org to which the group belongs.
	OrgId string `pulumi:"orgId"`
	// The rules within the group.
	Rules []RuleGroupRule `pulumi:"rules"`
}

// The set of arguments for constructing a RuleGroup resource.
type RuleGroupArgs struct {
	// The UID of the folder that the group belongs to.
	FolderUid pulumix.Input[string]
	// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
	IntervalSeconds pulumix.Input[int]
	// The name of the rule group.
	Name pulumix.Input[*string]
	// The ID of the org to which the group belongs.
	OrgId pulumix.Input[string]
	// The rules within the group.
	Rules pulumix.Input[[]*RuleGroupRuleArgs]
}

func (RuleGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleGroupArgs)(nil)).Elem()
}

type RuleGroupOutput struct{ *pulumi.OutputState }

func (RuleGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroup)(nil)).Elem()
}

func (o RuleGroupOutput) ToRuleGroupOutput() RuleGroupOutput {
	return o
}

func (o RuleGroupOutput) ToRuleGroupOutputWithContext(ctx context.Context) RuleGroupOutput {
	return o
}

func (o RuleGroupOutput) ToOutput(ctx context.Context) pulumix.Output[RuleGroup] {
	return pulumix.Output[RuleGroup]{
		OutputState: o.OutputState,
	}
}

// The UID of the folder that the group belongs to.
func (o RuleGroupOutput) FolderUid() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.FolderUid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
func (o RuleGroupOutput) IntervalSeconds() pulumix.Output[int] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[int] { return v.IntervalSeconds })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The name of the rule group.
func (o RuleGroupOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the org to which the group belongs.
func (o RuleGroupOutput) OrgId() pulumix.Output[string] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.Output[string] { return v.OrgId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The rules within the group.
func (o RuleGroupOutput) Rules() pulumix.GArrayOutput[RuleGroupRule, RuleGroupRuleOutput] {
	value := pulumix.Apply[RuleGroup](o, func(v RuleGroup) pulumix.GArrayOutput[RuleGroupRule, RuleGroupRuleOutput] { return v.Rules })
	unwrapped := pulumix.Flatten[[]RuleGroupRule, pulumix.GArrayOutput[RuleGroupRule, RuleGroupRuleOutput]](value)
	return pulumix.GArrayOutput[RuleGroupRule, RuleGroupRuleOutput]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RuleGroupOutput{})
}
