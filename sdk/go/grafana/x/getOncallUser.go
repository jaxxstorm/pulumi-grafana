// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/users/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.GetOncallUser(ctx, &grafana.GetOncallUserArgs{
//				Username: "alex",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetOncallUser(ctx *pulumi.Context, args *GetOncallUserArgs, opts ...pulumi.InvokeOption) (*GetOncallUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOncallUserResult
	err := ctx.Invoke("grafana:index/getOncallUser:getOncallUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOncallUser.
type GetOncallUserArgs struct {
	// The username of the user.
	Username string `pulumi:"username"`
}

// A collection of values returned by getOncallUser.
type GetOncallUserResult struct {
	// The email of the user.
	Email string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The role of the user.
	Role string `pulumi:"role"`
	// The username of the user.
	Username string `pulumi:"username"`
}

func GetOncallUserOutput(ctx *pulumi.Context, args GetOncallUserOutputArgs, opts ...pulumi.InvokeOption) GetOncallUserResultOutput {
	outputResult := pulumix.ApplyErr[*GetOncallUserArgs](args.ToOutput(), func(plainArgs *GetOncallUserArgs) (*GetOncallUserResult, error) {
		return GetOncallUser(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetOncallUserResultOutput, *GetOncallUserResult](outputResult)
}

// A collection of arguments for invoking getOncallUser.
type GetOncallUserOutputArgs struct {
	// The username of the user.
	Username pulumix.Input[string] `pulumi:"username"`
}

func (args GetOncallUserOutputArgs) ToOutput() pulumix.Output[*GetOncallUserArgs] {
	allArgs := pulumix.All(
		args.Username.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetOncallUserArgs {
		return &GetOncallUserArgs{
			Username: resolvedArgs[0].(string),
		}
	})
}

type GetOncallUserResultOutput struct{ *pulumi.OutputState }

func (GetOncallUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOncallUserResult)(nil)).Elem()
}

func (o GetOncallUserResultOutput) ToOutput(context.Context) pulumix.Output[*GetOncallUserResult] {
	return pulumix.Output[*GetOncallUserResult]{
		OutputState: o.OutputState,
	}
}

func (o GetOncallUserResultOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallUserResult](o, func(v *GetOncallUserResult) string { return v.Email })
}

func (o GetOncallUserResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallUserResult](o, func(v *GetOncallUserResult) string { return v.Id })
}

func (o GetOncallUserResultOutput) Role() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallUserResult](o, func(v *GetOncallUserResult) string { return v.Role })
}

func (o GetOncallUserResultOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallUserResult](o, func(v *GetOncallUserResult) string { return v.Username })
}
