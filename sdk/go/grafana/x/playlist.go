// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/create-manage-playlists/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/playlist/)
type Playlist struct {
	pulumi.CustomResourceState

	Interval pulumix.Output[string]                                 `pulumi:"interval"`
	Items    pulumix.GArrayOutput[PlaylistItem, PlaylistItemOutput] `pulumi:"items"`
	// The name of the playlist.
	Name pulumix.Output[string] `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
}

// NewPlaylist registers a new resource with the given unique name, arguments, and options.
func NewPlaylist(ctx *pulumi.Context,
	name string, args *PlaylistArgs, opts ...pulumi.ResourceOption) (*Playlist, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Playlist
	err := ctx.RegisterResource("grafana:index/playlist:Playlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaylist gets an existing Playlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaylist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaylistState, opts ...pulumi.ResourceOption) (*Playlist, error) {
	var resource Playlist
	err := ctx.ReadResource("grafana:index/playlist:Playlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Playlist resources.
type playlistState struct {
	Interval *string        `pulumi:"interval"`
	Items    []PlaylistItem `pulumi:"items"`
	// The name of the playlist.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

type PlaylistState struct {
	Interval pulumix.Input[*string]
	Items    pulumix.Input[[]*PlaylistItemArgs]
	// The name of the playlist.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
}

func (PlaylistState) ElementType() reflect.Type {
	return reflect.TypeOf((*playlistState)(nil)).Elem()
}

type playlistArgs struct {
	Interval string         `pulumi:"interval"`
	Items    []PlaylistItem `pulumi:"items"`
	// The name of the playlist.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

// The set of arguments for constructing a Playlist resource.
type PlaylistArgs struct {
	Interval pulumix.Input[string]
	Items    pulumix.Input[[]*PlaylistItemArgs]
	// The name of the playlist.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
}

func (PlaylistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playlistArgs)(nil)).Elem()
}

type PlaylistOutput struct{ *pulumi.OutputState }

func (PlaylistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Playlist)(nil)).Elem()
}

func (o PlaylistOutput) ToPlaylistOutput() PlaylistOutput {
	return o
}

func (o PlaylistOutput) ToPlaylistOutputWithContext(ctx context.Context) PlaylistOutput {
	return o
}

func (o PlaylistOutput) ToOutput(ctx context.Context) pulumix.Output[Playlist] {
	return pulumix.Output[Playlist]{
		OutputState: o.OutputState,
	}
}

func (o PlaylistOutput) Interval() pulumix.Output[string] {
	value := pulumix.Apply[Playlist](o, func(v Playlist) pulumix.Output[string] { return v.Interval })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o PlaylistOutput) Items() pulumix.GArrayOutput[PlaylistItem, PlaylistItemOutput] {
	value := pulumix.Apply[Playlist](o, func(v Playlist) pulumix.GArrayOutput[PlaylistItem, PlaylistItemOutput] { return v.Items })
	unwrapped := pulumix.Flatten[[]PlaylistItem, pulumix.GArrayOutput[PlaylistItem, PlaylistItemOutput]](value)
	return pulumix.GArrayOutput[PlaylistItem, PlaylistItemOutput]{OutputState: unwrapped.OutputState}
}

// The name of the playlist.
func (o PlaylistOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Playlist](o, func(v Playlist) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o PlaylistOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[Playlist](o, func(v Playlist) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(PlaylistOutput{})
}
