// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CloudAccessPolicyRealm struct {
	// The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
	Identifier    string                              `pulumi:"identifier"`
	LabelPolicies []CloudAccessPolicyRealmLabelPolicy `pulumi:"labelPolicies"`
	// Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
	Type string `pulumi:"type"`
}

type CloudAccessPolicyRealmArgs struct {
	// The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
	Identifier    pulumix.Input[string]                                   `pulumi:"identifier"`
	LabelPolicies pulumix.Input[[]*CloudAccessPolicyRealmLabelPolicyArgs] `pulumi:"labelPolicies"`
	// Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
	Type pulumix.Input[string] `pulumi:"type"`
}

func (CloudAccessPolicyRealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealm)(nil)).Elem()
}

func (i CloudAccessPolicyRealmArgs) ToCloudAccessPolicyRealmOutput() CloudAccessPolicyRealmOutput {
	return i.ToCloudAccessPolicyRealmOutputWithContext(context.Background())
}

func (i CloudAccessPolicyRealmArgs) ToCloudAccessPolicyRealmOutputWithContext(ctx context.Context) CloudAccessPolicyRealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccessPolicyRealmOutput)
}

func (i *CloudAccessPolicyRealmArgs) ToOutput(ctx context.Context) pulumix.Output[*CloudAccessPolicyRealmArgs] {
	return pulumix.Val(i)
}

type CloudAccessPolicyRealmOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyRealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealm)(nil)).Elem()
}

func (o CloudAccessPolicyRealmOutput) ToCloudAccessPolicyRealmOutput() CloudAccessPolicyRealmOutput {
	return o
}

func (o CloudAccessPolicyRealmOutput) ToCloudAccessPolicyRealmOutputWithContext(ctx context.Context) CloudAccessPolicyRealmOutput {
	return o
}

func (o CloudAccessPolicyRealmOutput) ToOutput(ctx context.Context) pulumix.Output[CloudAccessPolicyRealm] {
	return pulumix.Output[CloudAccessPolicyRealm]{
		OutputState: o.OutputState,
	}
}

// The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
func (o CloudAccessPolicyRealmOutput) Identifier() pulumix.Output[string] {
	return pulumix.Apply[CloudAccessPolicyRealm](o, func(v CloudAccessPolicyRealm) string { return v.Identifier })
}

func (o CloudAccessPolicyRealmOutput) LabelPolicies() pulumix.GArrayOutput[CloudAccessPolicyRealmLabelPolicy, CloudAccessPolicyRealmLabelPolicyOutput] {
	value := pulumix.Apply[CloudAccessPolicyRealm](o, func(v CloudAccessPolicyRealm) []CloudAccessPolicyRealmLabelPolicy { return v.LabelPolicies })
	return pulumix.GArrayOutput[CloudAccessPolicyRealmLabelPolicy, CloudAccessPolicyRealmLabelPolicyOutput]{OutputState: value.OutputState}
}

// Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
func (o CloudAccessPolicyRealmOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[CloudAccessPolicyRealm](o, func(v CloudAccessPolicyRealm) string { return v.Type })
}

type CloudAccessPolicyRealmLabelPolicy struct {
	Selector string `pulumi:"selector"`
}

type CloudAccessPolicyRealmLabelPolicyArgs struct {
	Selector pulumix.Input[string] `pulumi:"selector"`
}

func (CloudAccessPolicyRealmLabelPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealmLabelPolicy)(nil)).Elem()
}

func (i CloudAccessPolicyRealmLabelPolicyArgs) ToCloudAccessPolicyRealmLabelPolicyOutput() CloudAccessPolicyRealmLabelPolicyOutput {
	return i.ToCloudAccessPolicyRealmLabelPolicyOutputWithContext(context.Background())
}

func (i CloudAccessPolicyRealmLabelPolicyArgs) ToCloudAccessPolicyRealmLabelPolicyOutputWithContext(ctx context.Context) CloudAccessPolicyRealmLabelPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccessPolicyRealmLabelPolicyOutput)
}

func (i *CloudAccessPolicyRealmLabelPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*CloudAccessPolicyRealmLabelPolicyArgs] {
	return pulumix.Val(i)
}

type CloudAccessPolicyRealmLabelPolicyOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyRealmLabelPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealmLabelPolicy)(nil)).Elem()
}

func (o CloudAccessPolicyRealmLabelPolicyOutput) ToCloudAccessPolicyRealmLabelPolicyOutput() CloudAccessPolicyRealmLabelPolicyOutput {
	return o
}

func (o CloudAccessPolicyRealmLabelPolicyOutput) ToCloudAccessPolicyRealmLabelPolicyOutputWithContext(ctx context.Context) CloudAccessPolicyRealmLabelPolicyOutput {
	return o
}

func (o CloudAccessPolicyRealmLabelPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CloudAccessPolicyRealmLabelPolicy] {
	return pulumix.Output[CloudAccessPolicyRealmLabelPolicy]{
		OutputState: o.OutputState,
	}
}

func (o CloudAccessPolicyRealmLabelPolicyOutput) Selector() pulumix.Output[string] {
	return pulumix.Apply[CloudAccessPolicyRealmLabelPolicy](o, func(v CloudAccessPolicyRealmLabelPolicy) string { return v.Selector })
}

type ContactPointAlertmanager struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url string `pulumi:"url"`
}

type ContactPointAlertmanagerArgs struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword pulumix.Input[*string] `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser pulumix.Input[*string] `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointAlertmanagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return i.ToContactPointAlertmanagerOutputWithContext(context.Background())
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointAlertmanagerOutput)
}

func (i *ContactPointAlertmanagerArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointAlertmanagerArgs] {
	return pulumix.Val(i)
}

type ContactPointAlertmanagerOutput struct{ *pulumi.OutputState }

func (ContactPointAlertmanagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return o
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return o
}

func (o ContactPointAlertmanagerOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointAlertmanager] {
	return pulumix.Output[ContactPointAlertmanager]{
		OutputState: o.OutputState,
	}
}

// The password component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthPassword() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointAlertmanager](o, func(v ContactPointAlertmanager) *string { return v.BasicAuthPassword })
}

// The username component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthUser() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointAlertmanager](o, func(v ContactPointAlertmanager) *string { return v.BasicAuthUser })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointAlertmanagerOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointAlertmanager](o, func(v ContactPointAlertmanager) *bool { return v.DisableResolveMessage })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointAlertmanagerOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointAlertmanager](o, func(v ContactPointAlertmanager) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The UID of the contact point.
func (o ContactPointAlertmanagerOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointAlertmanager](o, func(v ContactPointAlertmanager) *string { return v.Uid })
}

// The URL of the Alertmanager instance.
func (o ContactPointAlertmanagerOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointAlertmanager](o, func(v ContactPointAlertmanager) string { return v.Url })
}

type ContactPointDingding struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The DingDing webhook URL.
	Url string `pulumi:"url"`
}

type ContactPointDingdingArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumix.Input[*string] `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType pulumix.Input[*string] `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The templated title of the message.
	Title pulumix.Input[*string] `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The DingDing webhook URL.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointDingdingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return i.ToContactPointDingdingOutputWithContext(context.Background())
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDingdingOutput)
}

func (i *ContactPointDingdingArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointDingdingArgs] {
	return pulumix.Val(i)
}

type ContactPointDingdingOutput struct{ *pulumi.OutputState }

func (ContactPointDingdingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return o
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return o
}

func (o ContactPointDingdingOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointDingding] {
	return pulumix.Output[ContactPointDingding]{
		OutputState: o.OutputState,
	}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDingdingOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointDingding](o, func(v ContactPointDingding) *bool { return v.DisableResolveMessage })
}

// The templated content of the message.
func (o ContactPointDingdingOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointDingding](o, func(v ContactPointDingding) *string { return v.Message })
}

// The format of message to send - either 'link' or 'actionCard'
func (o ContactPointDingdingOutput) MessageType() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointDingding](o, func(v ContactPointDingding) *string { return v.MessageType })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDingdingOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointDingding](o, func(v ContactPointDingding) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The templated title of the message.
func (o ContactPointDingdingOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointDingding](o, func(v ContactPointDingding) *string { return v.Title })
}

// The UID of the contact point.
func (o ContactPointDingdingOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointDingding](o, func(v ContactPointDingding) *string { return v.Uid })
}

// The DingDing webhook URL.
func (o ContactPointDingdingOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointDingding](o, func(v ContactPointDingding) string { return v.Url })
}

type ContactPointDiscord struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl *string `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The discord webhook URL.
	Url string `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername *bool `pulumi:"useDiscordUsername"`
}

type ContactPointDiscordArgs struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl pulumix.Input[*string] `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message pulumix.Input[*string] `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The discord webhook URL.
	Url pulumix.Input[string] `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername pulumix.Input[*bool] `pulumi:"useDiscordUsername"`
}

func (ContactPointDiscordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return i.ToContactPointDiscordOutputWithContext(context.Background())
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDiscordOutput)
}

func (i *ContactPointDiscordArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointDiscordArgs] {
	return pulumix.Val(i)
}

type ContactPointDiscordOutput struct{ *pulumi.OutputState }

func (ContactPointDiscordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return o
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return o
}

func (o ContactPointDiscordOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointDiscord] {
	return pulumix.Output[ContactPointDiscord]{
		OutputState: o.OutputState,
	}
}

// The URL of a custom avatar image to use. Defaults to “.
func (o ContactPointDiscordOutput) AvatarUrl() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointDiscord](o, func(v ContactPointDiscord) *string { return v.AvatarUrl })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDiscordOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointDiscord](o, func(v ContactPointDiscord) *bool { return v.DisableResolveMessage })
}

// The templated content of the message. Defaults to “.
func (o ContactPointDiscordOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointDiscord](o, func(v ContactPointDiscord) *string { return v.Message })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDiscordOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointDiscord](o, func(v ContactPointDiscord) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The UID of the contact point.
func (o ContactPointDiscordOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointDiscord](o, func(v ContactPointDiscord) *string { return v.Uid })
}

// The discord webhook URL.
func (o ContactPointDiscordOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointDiscord](o, func(v ContactPointDiscord) string { return v.Url })
}

// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
func (o ContactPointDiscordOutput) UseDiscordUsername() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointDiscord](o, func(v ContactPointDiscord) *bool { return v.UseDiscordUsername })
}

type ContactPointEmail struct {
	// The addresses to send emails to.
	Addresses []string `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail *bool `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject *string `pulumi:"subject"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

type ContactPointEmailArgs struct {
	// The addresses to send emails to.
	Addresses pulumix.Input[[]string] `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message pulumix.Input[*string] `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail pulumix.Input[*bool] `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject pulumix.Input[*string] `pulumi:"subject"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (ContactPointEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (i ContactPointEmailArgs) ToContactPointEmailOutput() ContactPointEmailOutput {
	return i.ToContactPointEmailOutputWithContext(context.Background())
}

func (i ContactPointEmailArgs) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointEmailOutput)
}

func (i *ContactPointEmailArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointEmailArgs] {
	return pulumix.Val(i)
}

type ContactPointEmailOutput struct{ *pulumi.OutputState }

func (ContactPointEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (o ContactPointEmailOutput) ToContactPointEmailOutput() ContactPointEmailOutput {
	return o
}

func (o ContactPointEmailOutput) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return o
}

func (o ContactPointEmailOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointEmail] {
	return pulumix.Output[ContactPointEmail]{
		OutputState: o.OutputState,
	}
}

// The addresses to send emails to.
func (o ContactPointEmailOutput) Addresses() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[ContactPointEmail](o, func(v ContactPointEmail) []string { return v.Addresses })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointEmailOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointEmail](o, func(v ContactPointEmail) *bool { return v.DisableResolveMessage })
}

// The templated content of the email. Defaults to “.
func (o ContactPointEmailOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointEmail](o, func(v ContactPointEmail) *string { return v.Message })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointEmailOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointEmail](o, func(v ContactPointEmail) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
func (o ContactPointEmailOutput) SingleEmail() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointEmail](o, func(v ContactPointEmail) *bool { return v.SingleEmail })
}

// The templated subject line of the email. Defaults to “.
func (o ContactPointEmailOutput) Subject() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointEmail](o, func(v ContactPointEmail) *string { return v.Subject })
}

// The UID of the contact point.
func (o ContactPointEmailOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointEmail](o, func(v ContactPointEmail) *string { return v.Uid })
}

type ContactPointGooglechat struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url string `pulumi:"url"`
}

type ContactPointGooglechatArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumix.Input[*string] `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointGooglechatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return i.ToContactPointGooglechatOutputWithContext(context.Background())
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointGooglechatOutput)
}

func (i *ContactPointGooglechatArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointGooglechatArgs] {
	return pulumix.Val(i)
}

type ContactPointGooglechatOutput struct{ *pulumi.OutputState }

func (ContactPointGooglechatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return o
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return o
}

func (o ContactPointGooglechatOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointGooglechat] {
	return pulumix.Output[ContactPointGooglechat]{
		OutputState: o.OutputState,
	}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointGooglechatOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointGooglechat](o, func(v ContactPointGooglechat) *bool { return v.DisableResolveMessage })
}

// The templated content of the message.
func (o ContactPointGooglechatOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointGooglechat](o, func(v ContactPointGooglechat) *string { return v.Message })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointGooglechatOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointGooglechat](o, func(v ContactPointGooglechat) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The UID of the contact point.
func (o ContactPointGooglechatOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointGooglechat](o, func(v ContactPointGooglechat) *string { return v.Uid })
}

// The Google Chat webhook URL.
func (o ContactPointGooglechatOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointGooglechat](o, func(v ContactPointGooglechat) string { return v.Url })
}

type ContactPointKafka struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl string `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic string `pulumi:"topic"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

type ContactPointKafkaArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl pulumix.Input[string] `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic pulumix.Input[string] `pulumi:"topic"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (ContactPointKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return i.ToContactPointKafkaOutputWithContext(context.Background())
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointKafkaOutput)
}

func (i *ContactPointKafkaArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointKafkaArgs] {
	return pulumix.Val(i)
}

type ContactPointKafkaOutput struct{ *pulumi.OutputState }

func (ContactPointKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return o
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return o
}

func (o ContactPointKafkaOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointKafka] {
	return pulumix.Output[ContactPointKafka]{
		OutputState: o.OutputState,
	}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointKafkaOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointKafka](o, func(v ContactPointKafka) *bool { return v.DisableResolveMessage })
}

// The URL of the Kafka REST proxy to send requests to.
func (o ContactPointKafkaOutput) RestProxyUrl() pulumix.Output[string] {
	return pulumix.Apply[ContactPointKafka](o, func(v ContactPointKafka) string { return v.RestProxyUrl })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointKafkaOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointKafka](o, func(v ContactPointKafka) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The name of the Kafka topic to publish to.
func (o ContactPointKafkaOutput) Topic() pulumix.Output[string] {
	return pulumix.Apply[ContactPointKafka](o, func(v ContactPointKafka) string { return v.Topic })
}

// The UID of the contact point.
func (o ContactPointKafkaOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointKafka](o, func(v ContactPointKafka) *string { return v.Uid })
}

type ContactPointOpsgeny struct {
	// The OpsGenie API key to use.
	ApiKey string `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose *bool `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority *bool `pulumi:"overridePriority"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs *string `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url *string `pulumi:"url"`
}

type ContactPointOpsgenyArgs struct {
	// The OpsGenie API key to use.
	ApiKey pulumix.Input[string] `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose pulumix.Input[*bool] `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumix.Input[*string] `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority pulumix.Input[*bool] `pulumi:"overridePriority"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs pulumix.Input[*string] `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url pulumix.Input[*string] `pulumi:"url"`
}

func (ContactPointOpsgenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return i.ToContactPointOpsgenyOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyOutput)
}

func (i *ContactPointOpsgenyArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointOpsgenyArgs] {
	return pulumix.Val(i)
}

type ContactPointOpsgenyOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return o
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return o
}

func (o ContactPointOpsgenyOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointOpsgeny] {
	return pulumix.Output[ContactPointOpsgeny]{
		OutputState: o.OutputState,
	}
}

// The OpsGenie API key to use.
func (o ContactPointOpsgenyOutput) ApiKey() pulumix.Output[string] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) string { return v.ApiKey })
}

// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
func (o ContactPointOpsgenyOutput) AutoClose() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *bool { return v.AutoClose })
}

// A templated high-level description to use for the alert.
func (o ContactPointOpsgenyOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *string { return v.Description })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointOpsgenyOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *bool { return v.DisableResolveMessage })
}

// The templated content of the message.
func (o ContactPointOpsgenyOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *string { return v.Message })
}

// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
func (o ContactPointOpsgenyOutput) OverridePriority() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *bool { return v.OverridePriority })
}

// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
func (o ContactPointOpsgenyOutput) SendTagsAs() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *string { return v.SendTagsAs })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointOpsgenyOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The UID of the contact point.
func (o ContactPointOpsgenyOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *string { return v.Uid })
}

// Allows customization of the OpsGenie API URL.
func (o ContactPointOpsgenyOutput) Url() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointOpsgeny](o, func(v ContactPointOpsgeny) *string { return v.Url })
}

type ContactPointPagerduty struct {
	// The class or type of event, for example `ping failure`.
	Class *string `pulumi:"class"`
	// The name of the monitoring client that is triggering this event.
	Client *string `pulumi:"client"`
	// The URL of the monitoring client that is triggering this event.
	ClientUrl *string `pulumi:"clientUrl"`
	// The component being affected by the event.
	Component *string `pulumi:"component"`
	// A set of arbitrary key/value pairs that provide further detail about the incident.
	Details map[string]string `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group *string `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey string `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity *string `pulumi:"severity"`
	// The unique location of the affected system.
	Source *string `pulumi:"source"`
	// The templated summary message of the event.
	Summary *string `pulumi:"summary"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

type ContactPointPagerdutyArgs struct {
	// The class or type of event, for example `ping failure`.
	Class pulumix.Input[*string] `pulumi:"class"`
	// The name of the monitoring client that is triggering this event.
	Client pulumix.Input[*string] `pulumi:"client"`
	// The URL of the monitoring client that is triggering this event.
	ClientUrl pulumix.Input[*string] `pulumi:"clientUrl"`
	// The component being affected by the event.
	Component pulumix.Input[*string] `pulumi:"component"`
	// A set of arbitrary key/value pairs that provide further detail about the incident.
	Details pulumix.Input[map[string]string] `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group pulumix.Input[*string] `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey pulumix.Input[string] `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity pulumix.Input[*string] `pulumi:"severity"`
	// The unique location of the affected system.
	Source pulumix.Input[*string] `pulumi:"source"`
	// The templated summary message of the event.
	Summary pulumix.Input[*string] `pulumi:"summary"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (ContactPointPagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return i.ToContactPointPagerdutyOutputWithContext(context.Background())
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPagerdutyOutput)
}

func (i *ContactPointPagerdutyArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointPagerdutyArgs] {
	return pulumix.Val(i)
}

type ContactPointPagerdutyOutput struct{ *pulumi.OutputState }

func (ContactPointPagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return o
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return o
}

func (o ContactPointPagerdutyOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointPagerduty] {
	return pulumix.Output[ContactPointPagerduty]{
		OutputState: o.OutputState,
	}
}

// The class or type of event, for example `ping failure`.
func (o ContactPointPagerdutyOutput) Class() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Class })
}

// The name of the monitoring client that is triggering this event.
func (o ContactPointPagerdutyOutput) Client() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Client })
}

// The URL of the monitoring client that is triggering this event.
func (o ContactPointPagerdutyOutput) ClientUrl() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.ClientUrl })
}

// The component being affected by the event.
func (o ContactPointPagerdutyOutput) Component() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Component })
}

// A set of arbitrary key/value pairs that provide further detail about the incident.
func (o ContactPointPagerdutyOutput) Details() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) map[string]string { return v.Details })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPagerdutyOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *bool { return v.DisableResolveMessage })
}

// The group to which the provided component belongs to.
func (o ContactPointPagerdutyOutput) Group() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Group })
}

// The PagerDuty API key.
func (o ContactPointPagerdutyOutput) IntegrationKey() pulumix.Output[string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) string { return v.IntegrationKey })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPagerdutyOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The PagerDuty event severity level. Default is `critical`.
func (o ContactPointPagerdutyOutput) Severity() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Severity })
}

// The unique location of the affected system.
func (o ContactPointPagerdutyOutput) Source() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Source })
}

// The templated summary message of the event.
func (o ContactPointPagerdutyOutput) Summary() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Summary })
}

// The UID of the contact point.
func (o ContactPointPagerdutyOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPagerduty](o, func(v ContactPointPagerduty) *string { return v.Uid })
}

type ContactPointPushover struct {
	// The Pushover API token.
	ApiToken string `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device *string `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire *int `pulumi:"expire"`
	// The templated notification message content.
	Message *string `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority *int `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound *string `pulumi:"okSound"`
	// The priority level of the event.
	Priority *int `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry *int `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The sound associated with the notification.
	Sound *string `pulumi:"sound"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The Pushover user key.
	UserKey string `pulumi:"userKey"`
}

type ContactPointPushoverArgs struct {
	// The Pushover API token.
	ApiToken pulumix.Input[string] `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device pulumix.Input[*string] `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire pulumix.Input[*int] `pulumi:"expire"`
	// The templated notification message content.
	Message pulumix.Input[*string] `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority pulumix.Input[*int] `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound pulumix.Input[*string] `pulumi:"okSound"`
	// The priority level of the event.
	Priority pulumix.Input[*int] `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry pulumix.Input[*int] `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The sound associated with the notification.
	Sound pulumix.Input[*string] `pulumi:"sound"`
	// The templated title of the message.
	Title pulumix.Input[*string] `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The Pushover user key.
	UserKey pulumix.Input[string] `pulumi:"userKey"`
}

func (ContactPointPushoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return i.ToContactPointPushoverOutputWithContext(context.Background())
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPushoverOutput)
}

func (i *ContactPointPushoverArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointPushoverArgs] {
	return pulumix.Val(i)
}

type ContactPointPushoverOutput struct{ *pulumi.OutputState }

func (ContactPointPushoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return o
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return o
}

func (o ContactPointPushoverOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointPushover] {
	return pulumix.Output[ContactPointPushover]{
		OutputState: o.OutputState,
	}
}

// The Pushover API token.
func (o ContactPointPushoverOutput) ApiToken() pulumix.Output[string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) string { return v.ApiToken })
}

// Comma-separated list of devices to which the event is associated.
func (o ContactPointPushoverOutput) Device() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *string { return v.Device })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPushoverOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *bool { return v.DisableResolveMessage })
}

// How many seconds for which the notification will continue to be retried by Pushover.
func (o ContactPointPushoverOutput) Expire() pulumix.Output[*int] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *int { return v.Expire })
}

// The templated notification message content.
func (o ContactPointPushoverOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *string { return v.Message })
}

// The priority level of the resolved event.
func (o ContactPointPushoverOutput) OkPriority() pulumix.Output[*int] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *int { return v.OkPriority })
}

// The sound associated with the resolved notification.
func (o ContactPointPushoverOutput) OkSound() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *string { return v.OkSound })
}

// The priority level of the event.
func (o ContactPointPushoverOutput) Priority() pulumix.Output[*int] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *int { return v.Priority })
}

// How often, in seconds, the Pushover servers will send the same notification to the user.
func (o ContactPointPushoverOutput) Retry() pulumix.Output[*int] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *int { return v.Retry })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPushoverOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The sound associated with the notification.
func (o ContactPointPushoverOutput) Sound() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *string { return v.Sound })
}

// The templated title of the message.
func (o ContactPointPushoverOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *string { return v.Title })
}

// The UID of the contact point.
func (o ContactPointPushoverOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) *string { return v.Uid })
}

// The Pushover user key.
func (o ContactPointPushoverOutput) UserKey() pulumix.Output[string] {
	return pulumix.Apply[ContactPointPushover](o, func(v ContactPointPushover) string { return v.UserKey })
}

type ContactPointSensugo struct {
	// The SensuGo API key.
	ApiKey string `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check *string `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity *string `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler *string `pulumi:"handler"`
	// Templated message content describing the alert.
	Message *string `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace *string `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url string `pulumi:"url"`
}

type ContactPointSensugoArgs struct {
	// The SensuGo API key.
	ApiKey pulumix.Input[string] `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check pulumix.Input[*string] `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity pulumix.Input[*string] `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler pulumix.Input[*string] `pulumi:"handler"`
	// Templated message content describing the alert.
	Message pulumix.Input[*string] `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace pulumix.Input[*string] `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointSensugoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return i.ToContactPointSensugoOutputWithContext(context.Background())
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSensugoOutput)
}

func (i *ContactPointSensugoArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointSensugoArgs] {
	return pulumix.Val(i)
}

type ContactPointSensugoOutput struct{ *pulumi.OutputState }

func (ContactPointSensugoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return o
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return o
}

func (o ContactPointSensugoOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointSensugo] {
	return pulumix.Output[ContactPointSensugo]{
		OutputState: o.OutputState,
	}
}

// The SensuGo API key.
func (o ContactPointSensugoOutput) ApiKey() pulumix.Output[string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) string { return v.ApiKey })
}

// The SensuGo check to which the event should be routed.
func (o ContactPointSensugoOutput) Check() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) *string { return v.Check })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSensugoOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) *bool { return v.DisableResolveMessage })
}

// The entity being monitored.
func (o ContactPointSensugoOutput) Entity() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) *string { return v.Entity })
}

// A custom handler to execute in addition to the check.
func (o ContactPointSensugoOutput) Handler() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) *string { return v.Handler })
}

// Templated message content describing the alert.
func (o ContactPointSensugoOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) *string { return v.Message })
}

// The namespace in which the check resides.
func (o ContactPointSensugoOutput) Namespace() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) *string { return v.Namespace })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSensugoOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The UID of the contact point.
func (o ContactPointSensugoOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) *string { return v.Uid })
}

// The SensuGo URL to send requests to.
func (o ContactPointSensugoOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointSensugo](o, func(v ContactPointSensugo) string { return v.Url })
}

type ContactPointSlack struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji *string `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl *string `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel *string `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups *string `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers *string `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient *string `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated content of the message.
	Text *string `pulumi:"text"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token *string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url *string `pulumi:"url"`
	// Username for the bot to use.
	Username *string `pulumi:"username"`
}

type ContactPointSlackArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl pulumix.Input[*string] `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji pulumix.Input[*string] `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl pulumix.Input[*string] `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel pulumix.Input[*string] `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups pulumix.Input[*string] `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers pulumix.Input[*string] `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient pulumix.Input[*string] `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// Templated content of the message.
	Text pulumix.Input[*string] `pulumi:"text"`
	// Templated title of the message.
	Title pulumix.Input[*string] `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token pulumix.Input[*string] `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url pulumix.Input[*string] `pulumi:"url"`
	// Username for the bot to use.
	Username pulumix.Input[*string] `pulumi:"username"`
}

func (ContactPointSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (i ContactPointSlackArgs) ToContactPointSlackOutput() ContactPointSlackOutput {
	return i.ToContactPointSlackOutputWithContext(context.Background())
}

func (i ContactPointSlackArgs) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSlackOutput)
}

func (i *ContactPointSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointSlackArgs] {
	return pulumix.Val(i)
}

type ContactPointSlackOutput struct{ *pulumi.OutputState }

func (ContactPointSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (o ContactPointSlackOutput) ToContactPointSlackOutput() ContactPointSlackOutput {
	return o
}

func (o ContactPointSlackOutput) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return o
}

func (o ContactPointSlackOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointSlack] {
	return pulumix.Output[ContactPointSlack]{
		OutputState: o.OutputState,
	}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSlackOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *bool { return v.DisableResolveMessage })
}

// Use this to override the Slack API endpoint URL to send requests to.
func (o ContactPointSlackOutput) EndpointUrl() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.EndpointUrl })
}

// The name of a Slack workspace emoji to use as the bot icon.
func (o ContactPointSlackOutput) IconEmoji() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.IconEmoji })
}

// A URL of an image to use as the bot icon.
func (o ContactPointSlackOutput) IconUrl() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.IconUrl })
}

// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
func (o ContactPointSlackOutput) MentionChannel() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.MentionChannel })
}

// Comma-separated list of groups to mention in the message.
func (o ContactPointSlackOutput) MentionGroups() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.MentionGroups })
}

// Comma-separated list of users to mention in the message.
func (o ContactPointSlackOutput) MentionUsers() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.MentionUsers })
}

// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
func (o ContactPointSlackOutput) Recipient() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.Recipient })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSlackOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Templated content of the message.
func (o ContactPointSlackOutput) Text() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.Text })
}

// Templated title of the message.
func (o ContactPointSlackOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.Title })
}

// A Slack API token,for sending messages directly without the webhook method.
func (o ContactPointSlackOutput) Token() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.Token })
}

// The UID of the contact point.
func (o ContactPointSlackOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.Uid })
}

// A Slack webhook URL,for sending messages via the webhook method.
func (o ContactPointSlackOutput) Url() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.Url })
}

// Username for the bot to use.
func (o ContactPointSlackOutput) Username() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointSlack](o, func(v ContactPointSlack) *string { return v.Username })
}

type ContactPointTeam struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message *string `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle *string `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Teams webhook URL.
	Url string `pulumi:"url"`
}

type ContactPointTeamArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message pulumix.Input[*string] `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle pulumix.Input[*string] `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The templated title of the message.
	Title pulumix.Input[*string] `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// A Teams webhook URL.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (i ContactPointTeamArgs) ToContactPointTeamOutput() ContactPointTeamOutput {
	return i.ToContactPointTeamOutputWithContext(context.Background())
}

func (i ContactPointTeamArgs) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTeamOutput)
}

func (i *ContactPointTeamArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointTeamArgs] {
	return pulumix.Val(i)
}

type ContactPointTeamOutput struct{ *pulumi.OutputState }

func (ContactPointTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (o ContactPointTeamOutput) ToContactPointTeamOutput() ContactPointTeamOutput {
	return o
}

func (o ContactPointTeamOutput) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return o
}

func (o ContactPointTeamOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointTeam] {
	return pulumix.Output[ContactPointTeam]{
		OutputState: o.OutputState,
	}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTeamOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointTeam](o, func(v ContactPointTeam) *bool { return v.DisableResolveMessage })
}

// The templated message content to send.
func (o ContactPointTeamOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointTeam](o, func(v ContactPointTeam) *string { return v.Message })
}

// The templated subtitle for each message section.
func (o ContactPointTeamOutput) SectionTitle() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointTeam](o, func(v ContactPointTeam) *string { return v.SectionTitle })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTeamOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointTeam](o, func(v ContactPointTeam) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The templated title of the message.
func (o ContactPointTeamOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointTeam](o, func(v ContactPointTeam) *string { return v.Title })
}

// The UID of the contact point.
func (o ContactPointTeamOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointTeam](o, func(v ContactPointTeam) *string { return v.Uid })
}

// A Teams webhook URL.
func (o ContactPointTeamOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointTeam](o, func(v ContactPointTeam) string { return v.Url })
}

type ContactPointTelegram struct {
	// The chat ID to send messages to.
	ChatId string `pulumi:"chatId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The Telegram bot token.
	Token string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

type ContactPointTelegramArgs struct {
	// The chat ID to send messages to.
	ChatId pulumix.Input[string] `pulumi:"chatId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumix.Input[*string] `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The Telegram bot token.
	Token pulumix.Input[string] `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (ContactPointTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return i.ToContactPointTelegramOutputWithContext(context.Background())
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTelegramOutput)
}

func (i *ContactPointTelegramArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointTelegramArgs] {
	return pulumix.Val(i)
}

type ContactPointTelegramOutput struct{ *pulumi.OutputState }

func (ContactPointTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return o
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return o
}

func (o ContactPointTelegramOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointTelegram] {
	return pulumix.Output[ContactPointTelegram]{
		OutputState: o.OutputState,
	}
}

// The chat ID to send messages to.
func (o ContactPointTelegramOutput) ChatId() pulumix.Output[string] {
	return pulumix.Apply[ContactPointTelegram](o, func(v ContactPointTelegram) string { return v.ChatId })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTelegramOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointTelegram](o, func(v ContactPointTelegram) *bool { return v.DisableResolveMessage })
}

// The templated content of the message.
func (o ContactPointTelegramOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointTelegram](o, func(v ContactPointTelegram) *string { return v.Message })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTelegramOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointTelegram](o, func(v ContactPointTelegram) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The Telegram bot token.
func (o ContactPointTelegramOutput) Token() pulumix.Output[string] {
	return pulumix.Apply[ContactPointTelegram](o, func(v ContactPointTelegram) string { return v.Token })
}

// The UID of the contact point.
func (o ContactPointTelegramOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointTelegram](o, func(v ContactPointTelegram) *string { return v.Uid })
}

type ContactPointThreema struct {
	// The Threema API key.
	ApiSecret string `pulumi:"apiSecret"`
	// The templated description of the message.
	Description string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId string `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

type ContactPointThreemaArgs struct {
	// The Threema API key.
	ApiSecret pulumix.Input[string] `pulumi:"apiSecret"`
	// The templated description of the message.
	Description pulumix.Input[string] `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId pulumix.Input[string] `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId pulumix.Input[string] `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The templated title of the message.
	Title pulumix.Input[string] `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (ContactPointThreemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return i.ToContactPointThreemaOutputWithContext(context.Background())
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointThreemaOutput)
}

func (i *ContactPointThreemaArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointThreemaArgs] {
	return pulumix.Val(i)
}

type ContactPointThreemaOutput struct{ *pulumi.OutputState }

func (ContactPointThreemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return o
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return o
}

func (o ContactPointThreemaOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointThreema] {
	return pulumix.Output[ContactPointThreema]{
		OutputState: o.OutputState,
	}
}

// The Threema API key.
func (o ContactPointThreemaOutput) ApiSecret() pulumix.Output[string] {
	return pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) string { return v.ApiSecret })
}

// The templated description of the message.
func (o ContactPointThreemaOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) string { return v.Description })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointThreemaOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) *bool { return v.DisableResolveMessage })
}

// The Threema gateway ID.
func (o ContactPointThreemaOutput) GatewayId() pulumix.Output[string] {
	return pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) string { return v.GatewayId })
}

// The ID of the recipient of the message.
func (o ContactPointThreemaOutput) RecipientId() pulumix.Output[string] {
	return pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) string { return v.RecipientId })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointThreemaOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The templated title of the message.
func (o ContactPointThreemaOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) string { return v.Title })
}

// The UID of the contact point.
func (o ContactPointThreemaOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointThreema](o, func(v ContactPointThreema) *string { return v.Uid })
}

type ContactPointVictorop struct {
	// Templated description of the message.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title to display.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url string `pulumi:"url"`
}

type ContactPointVictoropArgs struct {
	// Templated description of the message.
	Description pulumix.Input[*string] `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType pulumix.Input[*string] `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// Templated title to display.
	Title pulumix.Input[*string] `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointVictoropArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return i.ToContactPointVictoropOutputWithContext(context.Background())
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointVictoropOutput)
}

func (i *ContactPointVictoropArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointVictoropArgs] {
	return pulumix.Val(i)
}

type ContactPointVictoropOutput struct{ *pulumi.OutputState }

func (ContactPointVictoropOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return o
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return o
}

func (o ContactPointVictoropOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointVictorop] {
	return pulumix.Output[ContactPointVictorop]{
		OutputState: o.OutputState,
	}
}

// Templated description of the message.
func (o ContactPointVictoropOutput) Description() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointVictorop](o, func(v ContactPointVictorop) *string { return v.Description })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointVictoropOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointVictorop](o, func(v ContactPointVictorop) *bool { return v.DisableResolveMessage })
}

// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
func (o ContactPointVictoropOutput) MessageType() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointVictorop](o, func(v ContactPointVictorop) *string { return v.MessageType })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointVictoropOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointVictorop](o, func(v ContactPointVictorop) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Templated title to display.
func (o ContactPointVictoropOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointVictorop](o, func(v ContactPointVictorop) *string { return v.Title })
}

// The UID of the contact point.
func (o ContactPointVictoropOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointVictorop](o, func(v ContactPointVictorop) *string { return v.Uid })
}

// The VictorOps webhook URL.
func (o ContactPointVictoropOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointVictorop](o, func(v ContactPointVictorop) string { return v.Url })
}

type ContactPointWebhook struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials *string `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme *string `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts *int `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url string `pulumi:"url"`
}

type ContactPointWebhookArgs struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials pulumix.Input[*string] `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme pulumix.Input[*string] `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword pulumix.Input[*string] `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser pulumix.Input[*string] `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod pulumix.Input[*string] `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts pulumix.Input[*int] `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message pulumix.Input[*string] `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// Templated title of the message.
	Title pulumix.Input[*string] `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return i.ToContactPointWebhookOutputWithContext(context.Background())
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookOutput)
}

func (i *ContactPointWebhookArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointWebhookArgs] {
	return pulumix.Val(i)
}

type ContactPointWebhookOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return o
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return o
}

func (o ContactPointWebhookOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointWebhook] {
	return pulumix.Output[ContactPointWebhook]{
		OutputState: o.OutputState,
	}
}

// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationCredentials() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.AuthorizationCredentials })
}

// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationScheme() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.AuthorizationScheme })
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthPassword() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.BasicAuthPassword })
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthUser() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.BasicAuthUser })
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWebhookOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *bool { return v.DisableResolveMessage })
}

// The HTTP method to use in the request. Defaults to `POST`.
func (o ContactPointWebhookOutput) HttpMethod() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.HttpMethod })
}

// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
func (o ContactPointWebhookOutput) MaxAlerts() pulumix.Output[*int] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *int { return v.MaxAlerts })
}

// Custom message. You can use template variables.
func (o ContactPointWebhookOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.Message })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWebhookOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// Templated title of the message.
func (o ContactPointWebhookOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.Title })
}

// The UID of the contact point.
func (o ContactPointWebhookOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) *string { return v.Uid })
}

// The URL to send webhook requests to.
func (o ContactPointWebhookOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointWebhook](o, func(v ContactPointWebhook) string { return v.Url })
}

type ContactPointWecom struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message to send.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The WeCom webhook URL.
	Url string `pulumi:"url"`
}

type ContactPointWecomArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumix.Input[*bool] `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message pulumix.Input[*string] `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumix.Input[map[string]string] `pulumi:"settings"`
	// The templated title of the message to send.
	Title pulumix.Input[*string] `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumix.Input[*string] `pulumi:"uid"`
	// The WeCom webhook URL.
	Url pulumix.Input[string] `pulumi:"url"`
}

func (ContactPointWecomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (i ContactPointWecomArgs) ToContactPointWecomOutput() ContactPointWecomOutput {
	return i.ToContactPointWecomOutputWithContext(context.Background())
}

func (i ContactPointWecomArgs) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWecomOutput)
}

func (i *ContactPointWecomArgs) ToOutput(ctx context.Context) pulumix.Output[*ContactPointWecomArgs] {
	return pulumix.Val(i)
}

type ContactPointWecomOutput struct{ *pulumi.OutputState }

func (ContactPointWecomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (o ContactPointWecomOutput) ToContactPointWecomOutput() ContactPointWecomOutput {
	return o
}

func (o ContactPointWecomOutput) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return o
}

func (o ContactPointWecomOutput) ToOutput(ctx context.Context) pulumix.Output[ContactPointWecom] {
	return pulumix.Output[ContactPointWecom]{
		OutputState: o.OutputState,
	}
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWecomOutput) DisableResolveMessage() pulumix.Output[*bool] {
	return pulumix.Apply[ContactPointWecom](o, func(v ContactPointWecom) *bool { return v.DisableResolveMessage })
}

// The templated content of the message to send.
func (o ContactPointWecomOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWecom](o, func(v ContactPointWecom) *string { return v.Message })
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWecomOutput) Settings() pulumix.MapOutput[string] {
	value := pulumix.Apply[ContactPointWecom](o, func(v ContactPointWecom) map[string]string { return v.Settings })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The templated title of the message to send.
func (o ContactPointWecomOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWecom](o, func(v ContactPointWecom) *string { return v.Title })
}

// The UID of the contact point.
func (o ContactPointWecomOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[ContactPointWecom](o, func(v ContactPointWecom) *string { return v.Uid })
}

// The WeCom webhook URL.
func (o ContactPointWecomOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[ContactPointWecom](o, func(v ContactPointWecom) string { return v.Url })
}

type DashboardPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId *int `pulumi:"userId"`
}

type DashboardPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumix.Input[string] `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role pulumix.Input[*string] `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumix.Input[*string] `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId pulumix.Input[*int] `pulumi:"userId"`
}

func (DashboardPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return i.ToDashboardPermissionPermissionOutputWithContext(context.Background())
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionPermissionOutput)
}

func (i *DashboardPermissionPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DashboardPermissionPermissionArgs] {
	return pulumix.Val(i)
}

type DashboardPermissionPermissionOutput struct{ *pulumi.OutputState }

func (DashboardPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return o
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return o
}

func (o DashboardPermissionPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DashboardPermissionPermission] {
	return pulumix.Output[DashboardPermissionPermission]{
		OutputState: o.OutputState,
	}
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o DashboardPermissionPermissionOutput) Permission() pulumix.Output[string] {
	return pulumix.Apply[DashboardPermissionPermission](o, func(v DashboardPermissionPermission) string { return v.Permission })
}

// Manage permissions for `Viewer` or `Editor` roles.
func (o DashboardPermissionPermissionOutput) Role() pulumix.Output[*string] {
	return pulumix.Apply[DashboardPermissionPermission](o, func(v DashboardPermissionPermission) *string { return v.Role })
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) TeamId() pulumix.Output[*string] {
	return pulumix.Apply[DashboardPermissionPermission](o, func(v DashboardPermissionPermission) *string { return v.TeamId })
}

// ID of the user to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) UserId() pulumix.Output[*int] {
	return pulumix.Apply[DashboardPermissionPermission](o, func(v DashboardPermissionPermission) *int { return v.UserId })
}

type DataSourcePermissionPermission struct {
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`. Can only be set from Grafana v9.2.3+. Defaults to ``.
	BuiltInRole *string `pulumi:"builtInRole"`
	// Permission to associate with item. Options: `Query` or `Edit` (`Edit` can only be used with Grafana v9.2.3+).
	Permission string `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId *int `pulumi:"userId"`
}

type DataSourcePermissionPermissionArgs struct {
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`. Can only be set from Grafana v9.2.3+. Defaults to ``.
	BuiltInRole pulumix.Input[*string] `pulumi:"builtInRole"`
	// Permission to associate with item. Options: `Query` or `Edit` (`Edit` can only be used with Grafana v9.2.3+).
	Permission pulumix.Input[string] `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumix.Input[*string] `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId pulumix.Input[*int] `pulumi:"userId"`
}

func (DataSourcePermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return i.ToDataSourcePermissionPermissionOutputWithContext(context.Background())
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionPermissionOutput)
}

func (i *DataSourcePermissionPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*DataSourcePermissionPermissionArgs] {
	return pulumix.Val(i)
}

type DataSourcePermissionPermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return o
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return o
}

func (o DataSourcePermissionPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[DataSourcePermissionPermission] {
	return pulumix.Output[DataSourcePermissionPermission]{
		OutputState: o.OutputState,
	}
}

// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`. Can only be set from Grafana v9.2.3+. Defaults to “.
func (o DataSourcePermissionPermissionOutput) BuiltInRole() pulumix.Output[*string] {
	return pulumix.Apply[DataSourcePermissionPermission](o, func(v DataSourcePermissionPermission) *string { return v.BuiltInRole })
}

// Permission to associate with item. Options: `Query` or `Edit` (`Edit` can only be used with Grafana v9.2.3+).
func (o DataSourcePermissionPermissionOutput) Permission() pulumix.Output[string] {
	return pulumix.Apply[DataSourcePermissionPermission](o, func(v DataSourcePermissionPermission) string { return v.Permission })
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) TeamId() pulumix.Output[*string] {
	return pulumix.Apply[DataSourcePermissionPermission](o, func(v DataSourcePermissionPermission) *string { return v.TeamId })
}

// ID of the user to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) UserId() pulumix.Output[*int] {
	return pulumix.Apply[DataSourcePermissionPermission](o, func(v DataSourcePermissionPermission) *int { return v.UserId })
}

type FolderPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId *int `pulumi:"userId"`
}

type FolderPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumix.Input[string] `pulumi:"permission"`
	// Manage permissions for `Viewer` or `Editor` roles.
	Role pulumix.Input[*string] `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumix.Input[*string] `pulumi:"teamId"`
	// ID of the user to manage permissions for. Defaults to `0`.
	UserId pulumix.Input[*int] `pulumi:"userId"`
}

func (FolderPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return i.ToFolderPermissionPermissionOutputWithContext(context.Background())
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPermissionOutput)
}

func (i *FolderPermissionPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*FolderPermissionPermissionArgs] {
	return pulumix.Val(i)
}

type FolderPermissionPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return o
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return o
}

func (o FolderPermissionPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[FolderPermissionPermission] {
	return pulumix.Output[FolderPermissionPermission]{
		OutputState: o.OutputState,
	}
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o FolderPermissionPermissionOutput) Permission() pulumix.Output[string] {
	return pulumix.Apply[FolderPermissionPermission](o, func(v FolderPermissionPermission) string { return v.Permission })
}

// Manage permissions for `Viewer` or `Editor` roles.
func (o FolderPermissionPermissionOutput) Role() pulumix.Output[*string] {
	return pulumix.Apply[FolderPermissionPermission](o, func(v FolderPermissionPermission) *string { return v.Role })
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) TeamId() pulumix.Output[*string] {
	return pulumix.Apply[FolderPermissionPermission](o, func(v FolderPermissionPermission) *string { return v.TeamId })
}

// ID of the user to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) UserId() pulumix.Output[*int] {
	return pulumix.Apply[FolderPermissionPermission](o, func(v FolderPermissionPermission) *int { return v.UserId })
}

type MachineLearningHolidayCustomPeriod struct {
	EndTime string `pulumi:"endTime"`
	// The name of the custom period.
	Name      *string `pulumi:"name"`
	StartTime string  `pulumi:"startTime"`
}

type MachineLearningHolidayCustomPeriodArgs struct {
	EndTime pulumix.Input[string] `pulumi:"endTime"`
	// The name of the custom period.
	Name      pulumix.Input[*string] `pulumi:"name"`
	StartTime pulumix.Input[string]  `pulumi:"startTime"`
}

func (MachineLearningHolidayCustomPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningHolidayCustomPeriod)(nil)).Elem()
}

func (i MachineLearningHolidayCustomPeriodArgs) ToMachineLearningHolidayCustomPeriodOutput() MachineLearningHolidayCustomPeriodOutput {
	return i.ToMachineLearningHolidayCustomPeriodOutputWithContext(context.Background())
}

func (i MachineLearningHolidayCustomPeriodArgs) ToMachineLearningHolidayCustomPeriodOutputWithContext(ctx context.Context) MachineLearningHolidayCustomPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningHolidayCustomPeriodOutput)
}

func (i *MachineLearningHolidayCustomPeriodArgs) ToOutput(ctx context.Context) pulumix.Output[*MachineLearningHolidayCustomPeriodArgs] {
	return pulumix.Val(i)
}

type MachineLearningHolidayCustomPeriodOutput struct{ *pulumi.OutputState }

func (MachineLearningHolidayCustomPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningHolidayCustomPeriod)(nil)).Elem()
}

func (o MachineLearningHolidayCustomPeriodOutput) ToMachineLearningHolidayCustomPeriodOutput() MachineLearningHolidayCustomPeriodOutput {
	return o
}

func (o MachineLearningHolidayCustomPeriodOutput) ToMachineLearningHolidayCustomPeriodOutputWithContext(ctx context.Context) MachineLearningHolidayCustomPeriodOutput {
	return o
}

func (o MachineLearningHolidayCustomPeriodOutput) ToOutput(ctx context.Context) pulumix.Output[MachineLearningHolidayCustomPeriod] {
	return pulumix.Output[MachineLearningHolidayCustomPeriod]{
		OutputState: o.OutputState,
	}
}

func (o MachineLearningHolidayCustomPeriodOutput) EndTime() pulumix.Output[string] {
	return pulumix.Apply[MachineLearningHolidayCustomPeriod](o, func(v MachineLearningHolidayCustomPeriod) string { return v.EndTime })
}

// The name of the custom period.
func (o MachineLearningHolidayCustomPeriodOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[MachineLearningHolidayCustomPeriod](o, func(v MachineLearningHolidayCustomPeriod) *string { return v.Name })
}

func (o MachineLearningHolidayCustomPeriodOutput) StartTime() pulumix.Output[string] {
	return pulumix.Apply[MachineLearningHolidayCustomPeriod](o, func(v MachineLearningHolidayCustomPeriod) string { return v.StartTime })
}

type MachineLearningOutlierDetectorAlgorithm struct {
	// For DBSCAN only, specify the configuration map
	Config *MachineLearningOutlierDetectorAlgorithmConfig `pulumi:"config"`
	// The name of the algorithm to use ('mad' or 'dbscan').
	Name string `pulumi:"name"`
	// Specify the sensitivity of the detector (in range [0,1]).
	Sensitivity float64 `pulumi:"sensitivity"`
}

type MachineLearningOutlierDetectorAlgorithmArgs struct {
	// For DBSCAN only, specify the configuration map
	Config pulumix.Input[*MachineLearningOutlierDetectorAlgorithmConfigArgs] `pulumi:"config"`
	// The name of the algorithm to use ('mad' or 'dbscan').
	Name pulumix.Input[string] `pulumi:"name"`
	// Specify the sensitivity of the detector (in range [0,1]).
	Sensitivity pulumix.Input[float64] `pulumi:"sensitivity"`
}

func (MachineLearningOutlierDetectorAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithm)(nil)).Elem()
}

func (i MachineLearningOutlierDetectorAlgorithmArgs) ToMachineLearningOutlierDetectorAlgorithmOutput() MachineLearningOutlierDetectorAlgorithmOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmOutputWithContext(context.Background())
}

func (i MachineLearningOutlierDetectorAlgorithmArgs) ToMachineLearningOutlierDetectorAlgorithmOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmOutput)
}

func (i *MachineLearningOutlierDetectorAlgorithmArgs) ToOutput(ctx context.Context) pulumix.Output[*MachineLearningOutlierDetectorAlgorithmArgs] {
	return pulumix.Val(i)
}

type MachineLearningOutlierDetectorAlgorithmOutput struct{ *pulumi.OutputState }

func (MachineLearningOutlierDetectorAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithm)(nil)).Elem()
}

func (o MachineLearningOutlierDetectorAlgorithmOutput) ToMachineLearningOutlierDetectorAlgorithmOutput() MachineLearningOutlierDetectorAlgorithmOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmOutput) ToMachineLearningOutlierDetectorAlgorithmOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmOutput) ToOutput(ctx context.Context) pulumix.Output[MachineLearningOutlierDetectorAlgorithm] {
	return pulumix.Output[MachineLearningOutlierDetectorAlgorithm]{
		OutputState: o.OutputState,
	}
}

// For DBSCAN only, specify the configuration map
func (o MachineLearningOutlierDetectorAlgorithmOutput) Config() pulumix.GPtrOutput[MachineLearningOutlierDetectorAlgorithmConfig, MachineLearningOutlierDetectorAlgorithmConfigOutput] {
	value := pulumix.Apply[MachineLearningOutlierDetectorAlgorithm](o, func(v MachineLearningOutlierDetectorAlgorithm) *MachineLearningOutlierDetectorAlgorithmConfig {
		return v.Config
	})
	return pulumix.GPtrOutput[MachineLearningOutlierDetectorAlgorithmConfig, MachineLearningOutlierDetectorAlgorithmConfigOutput]{OutputState: value.OutputState}
}

// The name of the algorithm to use ('mad' or 'dbscan').
func (o MachineLearningOutlierDetectorAlgorithmOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[MachineLearningOutlierDetectorAlgorithm](o, func(v MachineLearningOutlierDetectorAlgorithm) string { return v.Name })
}

// Specify the sensitivity of the detector (in range [0,1]).
func (o MachineLearningOutlierDetectorAlgorithmOutput) Sensitivity() pulumix.Output[float64] {
	return pulumix.Apply[MachineLearningOutlierDetectorAlgorithm](o, func(v MachineLearningOutlierDetectorAlgorithm) float64 { return v.Sensitivity })
}

type MachineLearningOutlierDetectorAlgorithmConfig struct {
	Epsilon float64 `pulumi:"epsilon"`
}

type MachineLearningOutlierDetectorAlgorithmConfigArgs struct {
	Epsilon pulumix.Input[float64] `pulumi:"epsilon"`
}

func (MachineLearningOutlierDetectorAlgorithmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmConfig)(nil)).Elem()
}

func (i MachineLearningOutlierDetectorAlgorithmConfigArgs) ToMachineLearningOutlierDetectorAlgorithmConfigOutput() MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmConfigOutputWithContext(context.Background())
}

func (i MachineLearningOutlierDetectorAlgorithmConfigArgs) ToMachineLearningOutlierDetectorAlgorithmConfigOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmConfigOutput)
}

func (i *MachineLearningOutlierDetectorAlgorithmConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*MachineLearningOutlierDetectorAlgorithmConfigArgs] {
	return pulumix.Val(i)
}

type MachineLearningOutlierDetectorAlgorithmConfigOutput struct{ *pulumi.OutputState }

func (MachineLearningOutlierDetectorAlgorithmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmConfig)(nil)).Elem()
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) ToMachineLearningOutlierDetectorAlgorithmConfigOutput() MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) ToMachineLearningOutlierDetectorAlgorithmConfigOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) ToOutput(ctx context.Context) pulumix.Output[MachineLearningOutlierDetectorAlgorithmConfig] {
	return pulumix.Output[MachineLearningOutlierDetectorAlgorithmConfig]{
		OutputState: o.OutputState,
	}
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) Epsilon() pulumix.Output[float64] {
	return pulumix.Apply[MachineLearningOutlierDetectorAlgorithmConfig](o, func(v MachineLearningOutlierDetectorAlgorithmConfig) float64 { return v.Epsilon })
}

type MuteTimingInterval struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths []string `pulumi:"daysOfMonths"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months []string `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times []MuteTimingIntervalTime `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays []string `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years []string `pulumi:"years"`
}

type MuteTimingIntervalArgs struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths pulumix.Input[[]string] `pulumi:"daysOfMonths"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months pulumix.Input[[]string] `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times pulumix.Input[[]*MuteTimingIntervalTimeArgs] `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays pulumix.Input[[]string] `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years pulumix.Input[[]string] `pulumi:"years"`
}

func (MuteTimingIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return i.ToMuteTimingIntervalOutputWithContext(context.Background())
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalOutput)
}

func (i *MuteTimingIntervalArgs) ToOutput(ctx context.Context) pulumix.Output[*MuteTimingIntervalArgs] {
	return pulumix.Val(i)
}

type MuteTimingIntervalOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return o
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return o
}

func (o MuteTimingIntervalOutput) ToOutput(ctx context.Context) pulumix.Output[MuteTimingInterval] {
	return pulumix.Output[MuteTimingInterval]{
		OutputState: o.OutputState,
	}
}

// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
func (o MuteTimingIntervalOutput) DaysOfMonths() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MuteTimingInterval](o, func(v MuteTimingInterval) []string { return v.DaysOfMonths })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
func (o MuteTimingIntervalOutput) Months() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MuteTimingInterval](o, func(v MuteTimingInterval) []string { return v.Months })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// The time ranges, represented in minutes, during which to mute in a given day.
func (o MuteTimingIntervalOutput) Times() pulumix.GArrayOutput[MuteTimingIntervalTime, MuteTimingIntervalTimeOutput] {
	value := pulumix.Apply[MuteTimingInterval](o, func(v MuteTimingInterval) []MuteTimingIntervalTime { return v.Times })
	return pulumix.GArrayOutput[MuteTimingIntervalTime, MuteTimingIntervalTimeOutput]{OutputState: value.OutputState}
}

// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
func (o MuteTimingIntervalOutput) Weekdays() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MuteTimingInterval](o, func(v MuteTimingInterval) []string { return v.Weekdays })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// A positive inclusive range of years, e.g. "2030" or "2025:2026".
func (o MuteTimingIntervalOutput) Years() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[MuteTimingInterval](o, func(v MuteTimingInterval) []string { return v.Years })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type MuteTimingIntervalTime struct {
	End   string `pulumi:"end"`
	Start string `pulumi:"start"`
}

type MuteTimingIntervalTimeArgs struct {
	End   pulumix.Input[string] `pulumi:"end"`
	Start pulumix.Input[string] `pulumi:"start"`
}

func (MuteTimingIntervalTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return i.ToMuteTimingIntervalTimeOutputWithContext(context.Background())
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalTimeOutput)
}

func (i *MuteTimingIntervalTimeArgs) ToOutput(ctx context.Context) pulumix.Output[*MuteTimingIntervalTimeArgs] {
	return pulumix.Val(i)
}

type MuteTimingIntervalTimeOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return o
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return o
}

func (o MuteTimingIntervalTimeOutput) ToOutput(ctx context.Context) pulumix.Output[MuteTimingIntervalTime] {
	return pulumix.Output[MuteTimingIntervalTime]{
		OutputState: o.OutputState,
	}
}

func (o MuteTimingIntervalTimeOutput) End() pulumix.Output[string] {
	return pulumix.Apply[MuteTimingIntervalTime](o, func(v MuteTimingIntervalTime) string { return v.End })
}

func (o MuteTimingIntervalTimeOutput) Start() pulumix.Output[string] {
	return pulumix.Apply[MuteTimingIntervalTime](o, func(v MuteTimingIntervalTime) string { return v.Start })
}

type NotificationPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

type NotificationPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumix.Input[string] `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumix.Input[*bool] `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumix.Input[[]string] `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumix.Input[*string] `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumix.Input[*string] `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers pulumix.Input[[]*NotificationPolicyPolicyMatcherArgs] `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumix.Input[[]string] `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies pulumix.Input[[]*NotificationPolicyPolicyPolicyArgs] `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumix.Input[*string] `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyOutput)
}

func (i *NotificationPolicyPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicy] {
	return pulumix.Output[NotificationPolicyPolicy]{
		OutputState: o.OutputState,
	}
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyOutput) ContactPoint() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) string { return v.ContactPoint })
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyOutput) Continue() pulumix.Output[*bool] {
	return pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) *bool { return v.Continue })
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyOutput) GroupBies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) []string { return v.GroupBies })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyOutput) GroupInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) *string { return v.GroupInterval })
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyOutput) GroupWait() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) *string { return v.GroupWait })
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyOutput) Matchers() pulumix.GArrayOutput[NotificationPolicyPolicyMatcher, NotificationPolicyPolicyMatcherOutput] {
	value := pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) []NotificationPolicyPolicyMatcher { return v.Matchers })
	return pulumix.GArrayOutput[NotificationPolicyPolicyMatcher, NotificationPolicyPolicyMatcherOutput]{OutputState: value.OutputState}
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyOutput) MuteTimings() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) []string { return v.MuteTimings })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyOutput) Policies() pulumix.GArrayOutput[NotificationPolicyPolicyPolicy, NotificationPolicyPolicyPolicyOutput] {
	value := pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) []NotificationPolicyPolicyPolicy { return v.Policies })
	return pulumix.GArrayOutput[NotificationPolicyPolicyPolicy, NotificationPolicyPolicyPolicyOutput]{OutputState: value.OutputState}
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyOutput) RepeatInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicy](o, func(v NotificationPolicyPolicy) *string { return v.RepeatInterval })
}

type NotificationPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

type NotificationPolicyPolicyMatcherArgs struct {
	Label pulumix.Input[string] `pulumi:"label"`
	Match pulumix.Input[string] `pulumi:"match"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (NotificationPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyMatcherOutput)
}

func (i *NotificationPolicyPolicyMatcherArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyMatcherArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicyMatcher] {
	return pulumix.Output[NotificationPolicyPolicyMatcher]{
		OutputState: o.OutputState,
	}
}

func (o NotificationPolicyPolicyMatcherOutput) Label() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyMatcher) string { return v.Label })
}

func (o NotificationPolicyPolicyMatcherOutput) Match() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyMatcher) string { return v.Match })
}

func (o NotificationPolicyPolicyMatcherOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyMatcher) string { return v.Value })
}

type NotificationPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

type NotificationPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumix.Input[string] `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumix.Input[*bool] `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumix.Input[[]string] `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumix.Input[*string] `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumix.Input[*string] `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers pulumix.Input[[]*NotificationPolicyPolicyPolicyMatcherArgs] `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumix.Input[[]string] `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies pulumix.Input[[]*NotificationPolicyPolicyPolicyPolicyArgs] `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumix.Input[*string] `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyOutput)
}

func (i *NotificationPolicyPolicyPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyPolicyArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicyPolicy] {
	return pulumix.Output[NotificationPolicyPolicyPolicy]{
		OutputState: o.OutputState,
	}
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyOutput) ContactPoint() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) string { return v.ContactPoint })
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyOutput) Continue() pulumix.Output[*bool] {
	return pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) *bool { return v.Continue })
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyPolicyOutput) GroupBies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) []string { return v.GroupBies })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyOutput) GroupInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) *string { return v.GroupInterval })
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyOutput) GroupWait() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) *string { return v.GroupWait })
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyOutput) Matchers() pulumix.GArrayOutput[NotificationPolicyPolicyPolicyMatcher, NotificationPolicyPolicyPolicyMatcherOutput] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyMatcher { return v.Matchers })
	return pulumix.GArrayOutput[NotificationPolicyPolicyPolicyMatcher, NotificationPolicyPolicyPolicyMatcherOutput]{OutputState: value.OutputState}
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyOutput) MuteTimings() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) []string { return v.MuteTimings })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyOutput) Policies() pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicy, NotificationPolicyPolicyPolicyPolicyOutput] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicy { return v.Policies })
	return pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicy, NotificationPolicyPolicyPolicyPolicyOutput]{OutputState: value.OutputState}
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyOutput) RepeatInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicy) *string { return v.RepeatInterval })
}

type NotificationPolicyPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

type NotificationPolicyPolicyPolicyMatcherArgs struct {
	Label pulumix.Input[string] `pulumi:"label"`
	Match pulumix.Input[string] `pulumi:"match"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyMatcherOutput)
}

func (i *NotificationPolicyPolicyPolicyMatcherArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyPolicyMatcherArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicyPolicyMatcher] {
	return pulumix.Output[NotificationPolicyPolicyPolicyMatcher]{
		OutputState: o.OutputState,
	}
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) Label() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Label })
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) Match() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Match })
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Value })
}

type NotificationPolicyPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

type NotificationPolicyPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumix.Input[string] `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumix.Input[*bool] `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumix.Input[[]string] `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumix.Input[*string] `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumix.Input[*string] `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers pulumix.Input[[]*NotificationPolicyPolicyPolicyPolicyMatcherArgs] `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumix.Input[[]string] `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies pulumix.Input[[]*NotificationPolicyPolicyPolicyPolicyPolicyArgs] `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumix.Input[*string] `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyOutput)
}

func (i *NotificationPolicyPolicyPolicyPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyPolicyPolicyArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicyPolicyPolicy] {
	return pulumix.Output[NotificationPolicyPolicyPolicyPolicy]{
		OutputState: o.OutputState,
	}
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) string { return v.ContactPoint })
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Continue() pulumix.Output[*bool] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) *bool { return v.Continue })
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupBies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.GroupBies })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupInterval })
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupWait() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupWait })
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Matchers() pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicyMatcher, NotificationPolicyPolicyPolicyPolicyMatcherOutput] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	})
	return pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicyMatcher, NotificationPolicyPolicyPolicyPolicyMatcherOutput]{OutputState: value.OutputState}
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.MuteTimings })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Policies() pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicyPolicy, NotificationPolicyPolicyPolicyPolicyPolicyOutput] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicy {
		return v.Policies
	})
	return pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicyPolicy, NotificationPolicyPolicyPolicyPolicyPolicyOutput]{OutputState: value.OutputState}
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval })
}

type NotificationPolicyPolicyPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

type NotificationPolicyPolicyPolicyPolicyMatcherArgs struct {
	Label pulumix.Input[string] `pulumi:"label"`
	Match pulumix.Input[string] `pulumi:"match"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyMatcherOutput)
}

func (i *NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyPolicyPolicyMatcherArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicyPolicyPolicyMatcher] {
	return pulumix.Output[NotificationPolicyPolicyPolicyPolicyMatcher]{
		OutputState: o.OutputState,
	}
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Label })
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Match })
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Value })
}

type NotificationPolicyPolicyPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

type NotificationPolicyPolicyPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumix.Input[string] `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumix.Input[*bool] `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
	GroupBies pulumix.Input[[]string] `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumix.Input[*string] `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumix.Input[*string] `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers pulumix.Input[[]*NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs] `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumix.Input[[]string] `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumix.Input[*string] `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyOutput)
}

func (i *NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyPolicyPolicyPolicyArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicyPolicyPolicyPolicy] {
	return pulumix.Output[NotificationPolicyPolicyPolicyPolicyPolicy]{
		OutputState: o.OutputState,
	}
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) string { return v.ContactPoint })
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Continue() pulumix.Output[*bool] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) *bool { return v.Continue })
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupBies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.GroupBies })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupInterval })
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupWait() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupWait })
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Matchers() pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicyPolicyMatcher, NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	})
	return pulumix.GArrayOutput[NotificationPolicyPolicyPolicyPolicyPolicyMatcher, NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput]{OutputState: value.OutputState}
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.MuteTimings })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumix.Output[*string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicy](o, func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval })
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcher struct {
	Label string `pulumi:"label"`
	Match string `pulumi:"match"`
	Value string `pulumi:"value"`
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs struct {
	Label pulumix.Input[string] `pulumi:"label"`
	Match pulumix.Input[string] `pulumi:"match"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput)
}

func (i *NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToOutput(ctx context.Context) pulumix.Output[*NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs] {
	return pulumix.Val(i)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationPolicyPolicyPolicyPolicyPolicyMatcher] {
	return pulumix.Output[NotificationPolicyPolicyPolicyPolicyPolicyMatcher]{
		OutputState: o.OutputState,
	}
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Label })
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Match })
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[NotificationPolicyPolicyPolicyPolicyPolicyMatcher](o, func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Value })
}

type OncallIntegrationDefaultRoute struct {
	// The ID of the escalation chain.
	EscalationChainId *string `pulumi:"escalationChainId"`
	// The ID of this resource.
	Id *string `pulumi:"id"`
	// MS teams-specific settings for a route.
	Msteams *OncallIntegrationDefaultRouteMsteams `pulumi:"msteams"`
	// Slack-specific settings for a route.
	Slack *OncallIntegrationDefaultRouteSlack `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram *OncallIntegrationDefaultRouteTelegram `pulumi:"telegram"`
}

type OncallIntegrationDefaultRouteArgs struct {
	// The ID of the escalation chain.
	EscalationChainId pulumix.Input[*string] `pulumi:"escalationChainId"`
	// The ID of this resource.
	Id pulumix.Input[*string] `pulumi:"id"`
	// MS teams-specific settings for a route.
	Msteams pulumix.Input[*OncallIntegrationDefaultRouteMsteamsArgs] `pulumi:"msteams"`
	// Slack-specific settings for a route.
	Slack pulumix.Input[*OncallIntegrationDefaultRouteSlackArgs] `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram pulumix.Input[*OncallIntegrationDefaultRouteTelegramArgs] `pulumi:"telegram"`
}

func (OncallIntegrationDefaultRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput {
	return i.ToOncallIntegrationDefaultRouteOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRouteOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteOutput)
}

func (i *OncallIntegrationDefaultRouteArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationDefaultRouteArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationDefaultRouteOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput {
	return o
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRouteOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteOutput {
	return o
}

func (o OncallIntegrationDefaultRouteOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationDefaultRoute] {
	return pulumix.Output[OncallIntegrationDefaultRoute]{
		OutputState: o.OutputState,
	}
}

// The ID of the escalation chain.
func (o OncallIntegrationDefaultRouteOutput) EscalationChainId() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationDefaultRoute](o, func(v OncallIntegrationDefaultRoute) *string { return v.EscalationChainId })
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationDefaultRoute](o, func(v OncallIntegrationDefaultRoute) *string { return v.Id })
}

// MS teams-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Msteams() pulumix.GPtrOutput[OncallIntegrationDefaultRouteMsteams, OncallIntegrationDefaultRouteMsteamsOutput] {
	value := pulumix.Apply[OncallIntegrationDefaultRoute](o, func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteMsteams { return v.Msteams })
	return pulumix.GPtrOutput[OncallIntegrationDefaultRouteMsteams, OncallIntegrationDefaultRouteMsteamsOutput]{OutputState: value.OutputState}
}

// Slack-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Slack() pulumix.GPtrOutput[OncallIntegrationDefaultRouteSlack, OncallIntegrationDefaultRouteSlackOutput] {
	value := pulumix.Apply[OncallIntegrationDefaultRoute](o, func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteSlack { return v.Slack })
	return pulumix.GPtrOutput[OncallIntegrationDefaultRouteSlack, OncallIntegrationDefaultRouteSlackOutput]{OutputState: value.OutputState}
}

// Telegram-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Telegram() pulumix.GPtrOutput[OncallIntegrationDefaultRouteTelegram, OncallIntegrationDefaultRouteTelegramOutput] {
	value := pulumix.Apply[OncallIntegrationDefaultRoute](o, func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteTelegram { return v.Telegram })
	return pulumix.GPtrOutput[OncallIntegrationDefaultRouteTelegram, OncallIntegrationDefaultRouteTelegramOutput]{OutputState: value.OutputState}
}

type OncallIntegrationDefaultRouteMsteams struct {
	Enabled *bool `pulumi:"enabled"`
	// The ID of this resource.
	Id *string `pulumi:"id"`
}

type OncallIntegrationDefaultRouteMsteamsArgs struct {
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The ID of this resource.
	Id pulumix.Input[*string] `pulumi:"id"`
}

func (OncallIntegrationDefaultRouteMsteamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput {
	return i.ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteMsteamsOutput)
}

func (i *OncallIntegrationDefaultRouteMsteamsArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationDefaultRouteMsteamsArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationDefaultRouteMsteamsOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteMsteamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationDefaultRouteMsteams] {
	return pulumix.Output[OncallIntegrationDefaultRouteMsteams]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[OncallIntegrationDefaultRouteMsteams](o, func(v OncallIntegrationDefaultRouteMsteams) *bool { return v.Enabled })
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteMsteamsOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationDefaultRouteMsteams](o, func(v OncallIntegrationDefaultRouteMsteams) *string { return v.Id })
}

type OncallIntegrationDefaultRouteSlack struct {
	ChannelId *string `pulumi:"channelId"`
	Enabled   *bool   `pulumi:"enabled"`
}

type OncallIntegrationDefaultRouteSlackArgs struct {
	ChannelId pulumix.Input[*string] `pulumi:"channelId"`
	Enabled   pulumix.Input[*bool]   `pulumi:"enabled"`
}

func (OncallIntegrationDefaultRouteSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput {
	return i.ToOncallIntegrationDefaultRouteSlackOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteSlackOutput)
}

func (i *OncallIntegrationDefaultRouteSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationDefaultRouteSlackArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationDefaultRouteSlackOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationDefaultRouteSlack] {
	return pulumix.Output[OncallIntegrationDefaultRouteSlack]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationDefaultRouteSlackOutput) ChannelId() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationDefaultRouteSlack](o, func(v OncallIntegrationDefaultRouteSlack) *string { return v.ChannelId })
}

func (o OncallIntegrationDefaultRouteSlackOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[OncallIntegrationDefaultRouteSlack](o, func(v OncallIntegrationDefaultRouteSlack) *bool { return v.Enabled })
}

type OncallIntegrationDefaultRouteTelegram struct {
	Enabled *bool `pulumi:"enabled"`
	// The ID of this resource.
	Id *string `pulumi:"id"`
}

type OncallIntegrationDefaultRouteTelegramArgs struct {
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// The ID of this resource.
	Id pulumix.Input[*string] `pulumi:"id"`
}

func (OncallIntegrationDefaultRouteTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput {
	return i.ToOncallIntegrationDefaultRouteTelegramOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteTelegramOutput)
}

func (i *OncallIntegrationDefaultRouteTelegramArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationDefaultRouteTelegramArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationDefaultRouteTelegramOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationDefaultRouteTelegram] {
	return pulumix.Output[OncallIntegrationDefaultRouteTelegram]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationDefaultRouteTelegramOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[OncallIntegrationDefaultRouteTelegram](o, func(v OncallIntegrationDefaultRouteTelegram) *bool { return v.Enabled })
}

// The ID of this resource.
func (o OncallIntegrationDefaultRouteTelegramOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationDefaultRouteTelegram](o, func(v OncallIntegrationDefaultRouteTelegram) *string { return v.Id })
}

type OncallIntegrationTemplates struct {
	// Template for sending a signal to acknowledge the Incident.
	AcknowledgeSignal *string `pulumi:"acknowledgeSignal"`
	// Templates for Email.
	Email *OncallIntegrationTemplatesEmail `pulumi:"email"`
	// Template for the key by which alerts are grouped.
	GroupingKey *string `pulumi:"groupingKey"`
	// Templates for Microsoft Teams.
	MicrosoftTeams *OncallIntegrationTemplatesMicrosoftTeams `pulumi:"microsoftTeams"`
	// Templates for Phone Call.
	PhoneCall *OncallIntegrationTemplatesPhoneCall `pulumi:"phoneCall"`
	// Template for sending a signal to resolve the Incident.
	ResolveSignal *string `pulumi:"resolveSignal"`
	// Templates for Slack.
	Slack *OncallIntegrationTemplatesSlack `pulumi:"slack"`
	// Templates for SMS.
	Sms *OncallIntegrationTemplatesSms `pulumi:"sms"`
	// Template for a source link.
	SourceLink *string `pulumi:"sourceLink"`
	// Templates for Telegram.
	Telegram *OncallIntegrationTemplatesTelegram `pulumi:"telegram"`
	// Templates for Web.
	Web *OncallIntegrationTemplatesWeb `pulumi:"web"`
}

type OncallIntegrationTemplatesArgs struct {
	// Template for sending a signal to acknowledge the Incident.
	AcknowledgeSignal pulumix.Input[*string] `pulumi:"acknowledgeSignal"`
	// Templates for Email.
	Email pulumix.Input[*OncallIntegrationTemplatesEmailArgs] `pulumi:"email"`
	// Template for the key by which alerts are grouped.
	GroupingKey pulumix.Input[*string] `pulumi:"groupingKey"`
	// Templates for Microsoft Teams.
	MicrosoftTeams pulumix.Input[*OncallIntegrationTemplatesMicrosoftTeamsArgs] `pulumi:"microsoftTeams"`
	// Templates for Phone Call.
	PhoneCall pulumix.Input[*OncallIntegrationTemplatesPhoneCallArgs] `pulumi:"phoneCall"`
	// Template for sending a signal to resolve the Incident.
	ResolveSignal pulumix.Input[*string] `pulumi:"resolveSignal"`
	// Templates for Slack.
	Slack pulumix.Input[*OncallIntegrationTemplatesSlackArgs] `pulumi:"slack"`
	// Templates for SMS.
	Sms pulumix.Input[*OncallIntegrationTemplatesSmsArgs] `pulumi:"sms"`
	// Template for a source link.
	SourceLink pulumix.Input[*string] `pulumi:"sourceLink"`
	// Templates for Telegram.
	Telegram pulumix.Input[*OncallIntegrationTemplatesTelegramArgs] `pulumi:"telegram"`
	// Templates for Web.
	Web pulumix.Input[*OncallIntegrationTemplatesWebArgs] `pulumi:"web"`
}

func (OncallIntegrationTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplates)(nil)).Elem()
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput {
	return i.ToOncallIntegrationTemplatesOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesOutputWithContext(ctx context.Context) OncallIntegrationTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesOutput)
}

func (i *OncallIntegrationTemplatesArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplates)(nil)).Elem()
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput {
	return o
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesOutputWithContext(ctx context.Context) OncallIntegrationTemplatesOutput {
	return o
}

func (o OncallIntegrationTemplatesOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplates] {
	return pulumix.Output[OncallIntegrationTemplates]{
		OutputState: o.OutputState,
	}
}

// Template for sending a signal to acknowledge the Incident.
func (o OncallIntegrationTemplatesOutput) AcknowledgeSignal() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *string { return v.AcknowledgeSignal })
}

// Templates for Email.
func (o OncallIntegrationTemplatesOutput) Email() pulumix.GPtrOutput[OncallIntegrationTemplatesEmail, OncallIntegrationTemplatesEmailOutput] {
	value := pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesEmail { return v.Email })
	return pulumix.GPtrOutput[OncallIntegrationTemplatesEmail, OncallIntegrationTemplatesEmailOutput]{OutputState: value.OutputState}
}

// Template for the key by which alerts are grouped.
func (o OncallIntegrationTemplatesOutput) GroupingKey() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *string { return v.GroupingKey })
}

// Templates for Microsoft Teams.
func (o OncallIntegrationTemplatesOutput) MicrosoftTeams() pulumix.GPtrOutput[OncallIntegrationTemplatesMicrosoftTeams, OncallIntegrationTemplatesMicrosoftTeamsOutput] {
	value := pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesMicrosoftTeams { return v.MicrosoftTeams })
	return pulumix.GPtrOutput[OncallIntegrationTemplatesMicrosoftTeams, OncallIntegrationTemplatesMicrosoftTeamsOutput]{OutputState: value.OutputState}
}

// Templates for Phone Call.
func (o OncallIntegrationTemplatesOutput) PhoneCall() pulumix.GPtrOutput[OncallIntegrationTemplatesPhoneCall, OncallIntegrationTemplatesPhoneCallOutput] {
	value := pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesPhoneCall { return v.PhoneCall })
	return pulumix.GPtrOutput[OncallIntegrationTemplatesPhoneCall, OncallIntegrationTemplatesPhoneCallOutput]{OutputState: value.OutputState}
}

// Template for sending a signal to resolve the Incident.
func (o OncallIntegrationTemplatesOutput) ResolveSignal() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *string { return v.ResolveSignal })
}

// Templates for Slack.
func (o OncallIntegrationTemplatesOutput) Slack() pulumix.GPtrOutput[OncallIntegrationTemplatesSlack, OncallIntegrationTemplatesSlackOutput] {
	value := pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesSlack { return v.Slack })
	return pulumix.GPtrOutput[OncallIntegrationTemplatesSlack, OncallIntegrationTemplatesSlackOutput]{OutputState: value.OutputState}
}

// Templates for SMS.
func (o OncallIntegrationTemplatesOutput) Sms() pulumix.GPtrOutput[OncallIntegrationTemplatesSms, OncallIntegrationTemplatesSmsOutput] {
	value := pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesSms { return v.Sms })
	return pulumix.GPtrOutput[OncallIntegrationTemplatesSms, OncallIntegrationTemplatesSmsOutput]{OutputState: value.OutputState}
}

// Template for a source link.
func (o OncallIntegrationTemplatesOutput) SourceLink() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *string { return v.SourceLink })
}

// Templates for Telegram.
func (o OncallIntegrationTemplatesOutput) Telegram() pulumix.GPtrOutput[OncallIntegrationTemplatesTelegram, OncallIntegrationTemplatesTelegramOutput] {
	value := pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesTelegram { return v.Telegram })
	return pulumix.GPtrOutput[OncallIntegrationTemplatesTelegram, OncallIntegrationTemplatesTelegramOutput]{OutputState: value.OutputState}
}

// Templates for Web.
func (o OncallIntegrationTemplatesOutput) Web() pulumix.GPtrOutput[OncallIntegrationTemplatesWeb, OncallIntegrationTemplatesWebOutput] {
	value := pulumix.Apply[OncallIntegrationTemplates](o, func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesWeb { return v.Web })
	return pulumix.GPtrOutput[OncallIntegrationTemplatesWeb, OncallIntegrationTemplatesWebOutput]{OutputState: value.OutputState}
}

type OncallIntegrationTemplatesEmail struct {
	Message *string `pulumi:"message"`
	Title   *string `pulumi:"title"`
}

type OncallIntegrationTemplatesEmailArgs struct {
	Message pulumix.Input[*string] `pulumi:"message"`
	Title   pulumix.Input[*string] `pulumi:"title"`
}

func (OncallIntegrationTemplatesEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesEmail)(nil)).Elem()
}

func (i OncallIntegrationTemplatesEmailArgs) ToOncallIntegrationTemplatesEmailOutput() OncallIntegrationTemplatesEmailOutput {
	return i.ToOncallIntegrationTemplatesEmailOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesEmailArgs) ToOncallIntegrationTemplatesEmailOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesEmailOutput)
}

func (i *OncallIntegrationTemplatesEmailArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesEmailArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesEmailOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesEmail)(nil)).Elem()
}

func (o OncallIntegrationTemplatesEmailOutput) ToOncallIntegrationTemplatesEmailOutput() OncallIntegrationTemplatesEmailOutput {
	return o
}

func (o OncallIntegrationTemplatesEmailOutput) ToOncallIntegrationTemplatesEmailOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailOutput {
	return o
}

func (o OncallIntegrationTemplatesEmailOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplatesEmail] {
	return pulumix.Output[OncallIntegrationTemplatesEmail]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationTemplatesEmailOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesEmail](o, func(v OncallIntegrationTemplatesEmail) *string { return v.Message })
}

func (o OncallIntegrationTemplatesEmailOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesEmail](o, func(v OncallIntegrationTemplatesEmail) *string { return v.Title })
}

type OncallIntegrationTemplatesMicrosoftTeams struct {
	ImageUrl *string `pulumi:"imageUrl"`
	Message  *string `pulumi:"message"`
	Title    *string `pulumi:"title"`
}

type OncallIntegrationTemplatesMicrosoftTeamsArgs struct {
	ImageUrl pulumix.Input[*string] `pulumi:"imageUrl"`
	Message  pulumix.Input[*string] `pulumi:"message"`
	Title    pulumix.Input[*string] `pulumi:"title"`
}

func (OncallIntegrationTemplatesMicrosoftTeamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesMicrosoftTeams)(nil)).Elem()
}

func (i OncallIntegrationTemplatesMicrosoftTeamsArgs) ToOncallIntegrationTemplatesMicrosoftTeamsOutput() OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return i.ToOncallIntegrationTemplatesMicrosoftTeamsOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesMicrosoftTeamsArgs) ToOncallIntegrationTemplatesMicrosoftTeamsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesMicrosoftTeamsOutput)
}

func (i *OncallIntegrationTemplatesMicrosoftTeamsArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesMicrosoftTeamsArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesMicrosoftTeamsOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesMicrosoftTeamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesMicrosoftTeams)(nil)).Elem()
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ToOncallIntegrationTemplatesMicrosoftTeamsOutput() OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return o
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ToOncallIntegrationTemplatesMicrosoftTeamsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return o
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplatesMicrosoftTeams] {
	return pulumix.Output[OncallIntegrationTemplatesMicrosoftTeams]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ImageUrl() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesMicrosoftTeams](o, func(v OncallIntegrationTemplatesMicrosoftTeams) *string { return v.ImageUrl })
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesMicrosoftTeams](o, func(v OncallIntegrationTemplatesMicrosoftTeams) *string { return v.Message })
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesMicrosoftTeams](o, func(v OncallIntegrationTemplatesMicrosoftTeams) *string { return v.Title })
}

type OncallIntegrationTemplatesPhoneCall struct {
	Title *string `pulumi:"title"`
}

type OncallIntegrationTemplatesPhoneCallArgs struct {
	Title pulumix.Input[*string] `pulumi:"title"`
}

func (OncallIntegrationTemplatesPhoneCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesPhoneCall)(nil)).Elem()
}

func (i OncallIntegrationTemplatesPhoneCallArgs) ToOncallIntegrationTemplatesPhoneCallOutput() OncallIntegrationTemplatesPhoneCallOutput {
	return i.ToOncallIntegrationTemplatesPhoneCallOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesPhoneCallArgs) ToOncallIntegrationTemplatesPhoneCallOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesPhoneCallOutput)
}

func (i *OncallIntegrationTemplatesPhoneCallArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesPhoneCallArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesPhoneCallOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesPhoneCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesPhoneCall)(nil)).Elem()
}

func (o OncallIntegrationTemplatesPhoneCallOutput) ToOncallIntegrationTemplatesPhoneCallOutput() OncallIntegrationTemplatesPhoneCallOutput {
	return o
}

func (o OncallIntegrationTemplatesPhoneCallOutput) ToOncallIntegrationTemplatesPhoneCallOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallOutput {
	return o
}

func (o OncallIntegrationTemplatesPhoneCallOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplatesPhoneCall] {
	return pulumix.Output[OncallIntegrationTemplatesPhoneCall]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationTemplatesPhoneCallOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesPhoneCall](o, func(v OncallIntegrationTemplatesPhoneCall) *string { return v.Title })
}

type OncallIntegrationTemplatesSlack struct {
	ImageUrl *string `pulumi:"imageUrl"`
	Message  *string `pulumi:"message"`
	Title    *string `pulumi:"title"`
}

type OncallIntegrationTemplatesSlackArgs struct {
	ImageUrl pulumix.Input[*string] `pulumi:"imageUrl"`
	Message  pulumix.Input[*string] `pulumi:"message"`
	Title    pulumix.Input[*string] `pulumi:"title"`
}

func (OncallIntegrationTemplatesSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput {
	return i.ToOncallIntegrationTemplatesSlackOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSlackOutput)
}

func (i *OncallIntegrationTemplatesSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesSlackArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesSlackOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplatesSlack] {
	return pulumix.Output[OncallIntegrationTemplatesSlack]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationTemplatesSlackOutput) ImageUrl() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesSlack](o, func(v OncallIntegrationTemplatesSlack) *string { return v.ImageUrl })
}

func (o OncallIntegrationTemplatesSlackOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesSlack](o, func(v OncallIntegrationTemplatesSlack) *string { return v.Message })
}

func (o OncallIntegrationTemplatesSlackOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesSlack](o, func(v OncallIntegrationTemplatesSlack) *string { return v.Title })
}

type OncallIntegrationTemplatesSms struct {
	Title *string `pulumi:"title"`
}

type OncallIntegrationTemplatesSmsArgs struct {
	Title pulumix.Input[*string] `pulumi:"title"`
}

func (OncallIntegrationTemplatesSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSms)(nil)).Elem()
}

func (i OncallIntegrationTemplatesSmsArgs) ToOncallIntegrationTemplatesSmsOutput() OncallIntegrationTemplatesSmsOutput {
	return i.ToOncallIntegrationTemplatesSmsOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSmsArgs) ToOncallIntegrationTemplatesSmsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSmsOutput)
}

func (i *OncallIntegrationTemplatesSmsArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesSmsArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesSmsOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSms)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSmsOutput) ToOncallIntegrationTemplatesSmsOutput() OncallIntegrationTemplatesSmsOutput {
	return o
}

func (o OncallIntegrationTemplatesSmsOutput) ToOncallIntegrationTemplatesSmsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsOutput {
	return o
}

func (o OncallIntegrationTemplatesSmsOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplatesSms] {
	return pulumix.Output[OncallIntegrationTemplatesSms]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationTemplatesSmsOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesSms](o, func(v OncallIntegrationTemplatesSms) *string { return v.Title })
}

type OncallIntegrationTemplatesTelegram struct {
	ImageUrl *string `pulumi:"imageUrl"`
	Message  *string `pulumi:"message"`
	Title    *string `pulumi:"title"`
}

type OncallIntegrationTemplatesTelegramArgs struct {
	ImageUrl pulumix.Input[*string] `pulumi:"imageUrl"`
	Message  pulumix.Input[*string] `pulumi:"message"`
	Title    pulumix.Input[*string] `pulumi:"title"`
}

func (OncallIntegrationTemplatesTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesTelegram)(nil)).Elem()
}

func (i OncallIntegrationTemplatesTelegramArgs) ToOncallIntegrationTemplatesTelegramOutput() OncallIntegrationTemplatesTelegramOutput {
	return i.ToOncallIntegrationTemplatesTelegramOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesTelegramArgs) ToOncallIntegrationTemplatesTelegramOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesTelegramOutput)
}

func (i *OncallIntegrationTemplatesTelegramArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesTelegramArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesTelegramOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesTelegram)(nil)).Elem()
}

func (o OncallIntegrationTemplatesTelegramOutput) ToOncallIntegrationTemplatesTelegramOutput() OncallIntegrationTemplatesTelegramOutput {
	return o
}

func (o OncallIntegrationTemplatesTelegramOutput) ToOncallIntegrationTemplatesTelegramOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramOutput {
	return o
}

func (o OncallIntegrationTemplatesTelegramOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplatesTelegram] {
	return pulumix.Output[OncallIntegrationTemplatesTelegram]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationTemplatesTelegramOutput) ImageUrl() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesTelegram](o, func(v OncallIntegrationTemplatesTelegram) *string { return v.ImageUrl })
}

func (o OncallIntegrationTemplatesTelegramOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesTelegram](o, func(v OncallIntegrationTemplatesTelegram) *string { return v.Message })
}

func (o OncallIntegrationTemplatesTelegramOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesTelegram](o, func(v OncallIntegrationTemplatesTelegram) *string { return v.Title })
}

type OncallIntegrationTemplatesWeb struct {
	ImageUrl *string `pulumi:"imageUrl"`
	Message  *string `pulumi:"message"`
	Title    *string `pulumi:"title"`
}

type OncallIntegrationTemplatesWebArgs struct {
	ImageUrl pulumix.Input[*string] `pulumi:"imageUrl"`
	Message  pulumix.Input[*string] `pulumi:"message"`
	Title    pulumix.Input[*string] `pulumi:"title"`
}

func (OncallIntegrationTemplatesWebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesWeb)(nil)).Elem()
}

func (i OncallIntegrationTemplatesWebArgs) ToOncallIntegrationTemplatesWebOutput() OncallIntegrationTemplatesWebOutput {
	return i.ToOncallIntegrationTemplatesWebOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesWebArgs) ToOncallIntegrationTemplatesWebOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesWebOutput)
}

func (i *OncallIntegrationTemplatesWebArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallIntegrationTemplatesWebArgs] {
	return pulumix.Val(i)
}

type OncallIntegrationTemplatesWebOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesWeb)(nil)).Elem()
}

func (o OncallIntegrationTemplatesWebOutput) ToOncallIntegrationTemplatesWebOutput() OncallIntegrationTemplatesWebOutput {
	return o
}

func (o OncallIntegrationTemplatesWebOutput) ToOncallIntegrationTemplatesWebOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebOutput {
	return o
}

func (o OncallIntegrationTemplatesWebOutput) ToOutput(ctx context.Context) pulumix.Output[OncallIntegrationTemplatesWeb] {
	return pulumix.Output[OncallIntegrationTemplatesWeb]{
		OutputState: o.OutputState,
	}
}

func (o OncallIntegrationTemplatesWebOutput) ImageUrl() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesWeb](o, func(v OncallIntegrationTemplatesWeb) *string { return v.ImageUrl })
}

func (o OncallIntegrationTemplatesWebOutput) Message() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesWeb](o, func(v OncallIntegrationTemplatesWeb) *string { return v.Message })
}

func (o OncallIntegrationTemplatesWebOutput) Title() pulumix.Output[*string] {
	return pulumix.Apply[OncallIntegrationTemplatesWeb](o, func(v OncallIntegrationTemplatesWeb) *string { return v.Title })
}

type OncallRouteMsteams struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id *string `pulumi:"id"`
}

type OncallRouteMsteamsArgs struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id pulumix.Input[*string] `pulumi:"id"`
}

func (OncallRouteMsteamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteMsteams)(nil)).Elem()
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput {
	return i.ToOncallRouteMsteamsOutputWithContext(context.Background())
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsOutputWithContext(ctx context.Context) OncallRouteMsteamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMsteamsOutput)
}

func (i *OncallRouteMsteamsArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallRouteMsteamsArgs] {
	return pulumix.Val(i)
}

type OncallRouteMsteamsOutput struct{ *pulumi.OutputState }

func (OncallRouteMsteamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteMsteams)(nil)).Elem()
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput {
	return o
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsOutputWithContext(ctx context.Context) OncallRouteMsteamsOutput {
	return o
}

func (o OncallRouteMsteamsOutput) ToOutput(ctx context.Context) pulumix.Output[OncallRouteMsteams] {
	return pulumix.Output[OncallRouteMsteams]{
		OutputState: o.OutputState,
	}
}

// Enable notification in MS teams. Defaults to `true`.
func (o OncallRouteMsteamsOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[OncallRouteMsteams](o, func(v OncallRouteMsteams) *bool { return v.Enabled })
}

// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
func (o OncallRouteMsteamsOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OncallRouteMsteams](o, func(v OncallRouteMsteams) *string { return v.Id })
}

type OncallRouteSlack struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId *string `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

type OncallRouteSlackArgs struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId pulumix.Input[*string] `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
}

func (OncallRouteSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteSlack)(nil)).Elem()
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackOutput() OncallRouteSlackOutput {
	return i.ToOncallRouteSlackOutputWithContext(context.Background())
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackOutputWithContext(ctx context.Context) OncallRouteSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteSlackOutput)
}

func (i *OncallRouteSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallRouteSlackArgs] {
	return pulumix.Val(i)
}

type OncallRouteSlackOutput struct{ *pulumi.OutputState }

func (OncallRouteSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteSlack)(nil)).Elem()
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackOutput() OncallRouteSlackOutput {
	return o
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackOutputWithContext(ctx context.Context) OncallRouteSlackOutput {
	return o
}

func (o OncallRouteSlackOutput) ToOutput(ctx context.Context) pulumix.Output[OncallRouteSlack] {
	return pulumix.Output[OncallRouteSlack]{
		OutputState: o.OutputState,
	}
}

// Slack channel id. Alerts will be directed to this channel in Slack.
func (o OncallRouteSlackOutput) ChannelId() pulumix.Output[*string] {
	return pulumix.Apply[OncallRouteSlack](o, func(v OncallRouteSlack) *string { return v.ChannelId })
}

// Enable notification in Slack. Defaults to `true`.
func (o OncallRouteSlackOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[OncallRouteSlack](o, func(v OncallRouteSlack) *bool { return v.Enabled })
}

type OncallRouteTelegram struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id *string `pulumi:"id"`
}

type OncallRouteTelegramArgs struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled pulumix.Input[*bool] `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id pulumix.Input[*string] `pulumi:"id"`
}

func (OncallRouteTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteTelegram)(nil)).Elem()
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramOutput() OncallRouteTelegramOutput {
	return i.ToOncallRouteTelegramOutputWithContext(context.Background())
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramOutputWithContext(ctx context.Context) OncallRouteTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteTelegramOutput)
}

func (i *OncallRouteTelegramArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallRouteTelegramArgs] {
	return pulumix.Val(i)
}

type OncallRouteTelegramOutput struct{ *pulumi.OutputState }

func (OncallRouteTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteTelegram)(nil)).Elem()
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramOutput() OncallRouteTelegramOutput {
	return o
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramOutputWithContext(ctx context.Context) OncallRouteTelegramOutput {
	return o
}

func (o OncallRouteTelegramOutput) ToOutput(ctx context.Context) pulumix.Output[OncallRouteTelegram] {
	return pulumix.Output[OncallRouteTelegram]{
		OutputState: o.OutputState,
	}
}

// Enable notification in Telegram. Defaults to `true`.
func (o OncallRouteTelegramOutput) Enabled() pulumix.Output[*bool] {
	return pulumix.Apply[OncallRouteTelegram](o, func(v OncallRouteTelegram) *bool { return v.Enabled })
}

// Telegram channel id. Alerts will be directed to this channel in Telegram.
func (o OncallRouteTelegramOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[OncallRouteTelegram](o, func(v OncallRouteTelegram) *string { return v.Id })
}

type OncallScheduleSlack struct {
	// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
	ChannelId *string `pulumi:"channelId"`
	// Slack user group id. Members of user group will be updated when on-call users change.
	UserGroupId *string `pulumi:"userGroupId"`
}

type OncallScheduleSlackArgs struct {
	// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
	ChannelId pulumix.Input[*string] `pulumi:"channelId"`
	// Slack user group id. Members of user group will be updated when on-call users change.
	UserGroupId pulumix.Input[*string] `pulumi:"userGroupId"`
}

func (OncallScheduleSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallScheduleSlack)(nil)).Elem()
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackOutput() OncallScheduleSlackOutput {
	return i.ToOncallScheduleSlackOutputWithContext(context.Background())
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackOutputWithContext(ctx context.Context) OncallScheduleSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleSlackOutput)
}

func (i *OncallScheduleSlackArgs) ToOutput(ctx context.Context) pulumix.Output[*OncallScheduleSlackArgs] {
	return pulumix.Val(i)
}

type OncallScheduleSlackOutput struct{ *pulumi.OutputState }

func (OncallScheduleSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallScheduleSlack)(nil)).Elem()
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackOutput() OncallScheduleSlackOutput {
	return o
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackOutputWithContext(ctx context.Context) OncallScheduleSlackOutput {
	return o
}

func (o OncallScheduleSlackOutput) ToOutput(ctx context.Context) pulumix.Output[OncallScheduleSlack] {
	return pulumix.Output[OncallScheduleSlack]{
		OutputState: o.OutputState,
	}
}

// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
func (o OncallScheduleSlackOutput) ChannelId() pulumix.Output[*string] {
	return pulumix.Apply[OncallScheduleSlack](o, func(v OncallScheduleSlack) *string { return v.ChannelId })
}

// Slack user group id. Members of user group will be updated when on-call users change.
func (o OncallScheduleSlackOutput) UserGroupId() pulumix.Output[*string] {
	return pulumix.Apply[OncallScheduleSlack](o, func(v OncallScheduleSlack) *string { return v.UserGroupId })
}

type PlaylistItem struct {
	// The ID of this resource.
	Id    *string `pulumi:"id"`
	Order int     `pulumi:"order"`
	Title string  `pulumi:"title"`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

type PlaylistItemArgs struct {
	// The ID of this resource.
	Id    pulumix.Input[*string] `pulumi:"id"`
	Order pulumix.Input[int]     `pulumi:"order"`
	Title pulumix.Input[string]  `pulumi:"title"`
	Type  pulumix.Input[*string] `pulumi:"type"`
	Value pulumix.Input[*string] `pulumi:"value"`
}

func (PlaylistItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (i PlaylistItemArgs) ToPlaylistItemOutput() PlaylistItemOutput {
	return i.ToPlaylistItemOutputWithContext(context.Background())
}

func (i PlaylistItemArgs) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistItemOutput)
}

func (i *PlaylistItemArgs) ToOutput(ctx context.Context) pulumix.Output[*PlaylistItemArgs] {
	return pulumix.Val(i)
}

type PlaylistItemOutput struct{ *pulumi.OutputState }

func (PlaylistItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (o PlaylistItemOutput) ToPlaylistItemOutput() PlaylistItemOutput {
	return o
}

func (o PlaylistItemOutput) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return o
}

func (o PlaylistItemOutput) ToOutput(ctx context.Context) pulumix.Output[PlaylistItem] {
	return pulumix.Output[PlaylistItem]{
		OutputState: o.OutputState,
	}
}

// The ID of this resource.
func (o PlaylistItemOutput) Id() pulumix.Output[*string] {
	return pulumix.Apply[PlaylistItem](o, func(v PlaylistItem) *string { return v.Id })
}

func (o PlaylistItemOutput) Order() pulumix.Output[int] {
	return pulumix.Apply[PlaylistItem](o, func(v PlaylistItem) int { return v.Order })
}

func (o PlaylistItemOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[PlaylistItem](o, func(v PlaylistItem) string { return v.Title })
}

func (o PlaylistItemOutput) Type() pulumix.Output[*string] {
	return pulumix.Apply[PlaylistItem](o, func(v PlaylistItem) *string { return v.Type })
}

func (o PlaylistItemOutput) Value() pulumix.Output[*string] {
	return pulumix.Apply[PlaylistItem](o, func(v PlaylistItem) *string { return v.Value })
}

type ReportSchedule struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval *string `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
	EndTime *string `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency string `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth *bool `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
	StartTime *string `pulumi:"startTime"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly *bool `pulumi:"workdaysOnly"`
}

type ReportScheduleArgs struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval pulumix.Input[*string] `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
	EndTime pulumix.Input[*string] `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency pulumix.Input[string] `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth pulumix.Input[*bool] `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
	StartTime pulumix.Input[*string] `pulumi:"startTime"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly pulumix.Input[*bool] `pulumi:"workdaysOnly"`
}

func (ReportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (i ReportScheduleArgs) ToReportScheduleOutput() ReportScheduleOutput {
	return i.ToReportScheduleOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput)
}

func (i *ReportScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[*ReportScheduleArgs] {
	return pulumix.Val(i)
}

type ReportScheduleOutput struct{ *pulumi.OutputState }

func (ReportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (o ReportScheduleOutput) ToReportScheduleOutput() ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[ReportSchedule] {
	return pulumix.Output[ReportSchedule]{
		OutputState: o.OutputState,
	}
}

// Custom interval of the report.
// **Note:** This field is only available when frequency is set to `custom`.
func (o ReportScheduleOutput) CustomInterval() pulumix.Output[*string] {
	return pulumix.Apply[ReportSchedule](o, func(v ReportSchedule) *string { return v.CustomInterval })
}

// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana.
func (o ReportScheduleOutput) EndTime() pulumix.Output[*string] {
	return pulumix.Apply[ReportSchedule](o, func(v ReportSchedule) *string { return v.EndTime })
}

// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
func (o ReportScheduleOutput) Frequency() pulumix.Output[string] {
	return pulumix.Apply[ReportSchedule](o, func(v ReportSchedule) string { return v.Frequency })
}

// Send the report on the last day of the month Defaults to `false`.
func (o ReportScheduleOutput) LastDayOfMonth() pulumix.Output[*bool] {
	return pulumix.Apply[ReportSchedule](o, func(v ReportSchedule) *bool { return v.LastDayOfMonth })
}

// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana.
func (o ReportScheduleOutput) StartTime() pulumix.Output[*string] {
	return pulumix.Apply[ReportSchedule](o, func(v ReportSchedule) *string { return v.StartTime })
}

// Whether to send the report only on work days. Defaults to `false`.
func (o ReportScheduleOutput) WorkdaysOnly() pulumix.Output[*bool] {
	return pulumix.Apply[ReportSchedule](o, func(v ReportSchedule) *bool { return v.WorkdaysOnly })
}

type ReportTimeRange struct {
	// Start of the time range.
	From *string `pulumi:"from"`
	// End of the time range.
	To *string `pulumi:"to"`
}

type ReportTimeRangeArgs struct {
	// Start of the time range.
	From pulumix.Input[*string] `pulumi:"from"`
	// End of the time range.
	To pulumix.Input[*string] `pulumi:"to"`
}

func (ReportTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeRange)(nil)).Elem()
}

func (i ReportTimeRangeArgs) ToReportTimeRangeOutput() ReportTimeRangeOutput {
	return i.ToReportTimeRangeOutputWithContext(context.Background())
}

func (i ReportTimeRangeArgs) ToReportTimeRangeOutputWithContext(ctx context.Context) ReportTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimeRangeOutput)
}

func (i *ReportTimeRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*ReportTimeRangeArgs] {
	return pulumix.Val(i)
}

type ReportTimeRangeOutput struct{ *pulumi.OutputState }

func (ReportTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimeRange)(nil)).Elem()
}

func (o ReportTimeRangeOutput) ToReportTimeRangeOutput() ReportTimeRangeOutput {
	return o
}

func (o ReportTimeRangeOutput) ToReportTimeRangeOutputWithContext(ctx context.Context) ReportTimeRangeOutput {
	return o
}

func (o ReportTimeRangeOutput) ToOutput(ctx context.Context) pulumix.Output[ReportTimeRange] {
	return pulumix.Output[ReportTimeRange]{
		OutputState: o.OutputState,
	}
}

// Start of the time range.
func (o ReportTimeRangeOutput) From() pulumix.Output[*string] {
	return pulumix.Apply[ReportTimeRange](o, func(v ReportTimeRange) *string { return v.From })
}

// End of the time range.
func (o ReportTimeRangeOutput) To() pulumix.Output[*string] {
	return pulumix.Apply[ReportTimeRange](o, func(v ReportTimeRange) *string { return v.To })
}

type RolePermission struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action string `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
	Scope *string `pulumi:"scope"`
}

type RolePermissionArgs struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action pulumix.Input[string] `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
	Scope pulumix.Input[*string] `pulumi:"scope"`
}

func (RolePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (i RolePermissionArgs) ToRolePermissionOutput() RolePermissionOutput {
	return i.ToRolePermissionOutputWithContext(context.Background())
}

func (i RolePermissionArgs) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionOutput)
}

func (i *RolePermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*RolePermissionArgs] {
	return pulumix.Val(i)
}

type RolePermissionOutput struct{ *pulumi.OutputState }

func (RolePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (o RolePermissionOutput) ToRolePermissionOutput() RolePermissionOutput {
	return o
}

func (o RolePermissionOutput) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return o
}

func (o RolePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[RolePermission] {
	return pulumix.Output[RolePermission]{
		OutputState: o.OutputState,
	}
}

// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
func (o RolePermissionOutput) Action() pulumix.Output[string] {
	return pulumix.Apply[RolePermission](o, func(v RolePermission) string { return v.Action })
}

// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to “.
func (o RolePermissionOutput) Scope() pulumix.Output[*string] {
	return pulumix.Apply[RolePermission](o, func(v RolePermission) *string { return v.Scope })
}

type RuleGroupRule struct {
	// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
	Annotations map[string]string `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition string `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas []RuleGroupRuleData `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
	ExecErrState *string `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For *string `pulumi:"for"`
	// Sets whether the alert should be paused or not. Defaults to `false`.
	IsPaused *bool `pulumi:"isPaused"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels map[string]string `pulumi:"labels"`
	// The name of the alert rule.
	Name string `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
	NoDataState *string `pulumi:"noDataState"`
	// The unique identifier of the alert rule.
	Uid *string `pulumi:"uid"`
}

type RuleGroupRuleArgs struct {
	// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
	Annotations pulumix.Input[map[string]string] `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition pulumix.Input[string] `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas pulumix.Input[[]*RuleGroupRuleDataArgs] `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
	ExecErrState pulumix.Input[*string] `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For pulumix.Input[*string] `pulumi:"for"`
	// Sets whether the alert should be paused or not. Defaults to `false`.
	IsPaused pulumix.Input[*bool] `pulumi:"isPaused"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels pulumix.Input[map[string]string] `pulumi:"labels"`
	// The name of the alert rule.
	Name pulumix.Input[string] `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
	NoDataState pulumix.Input[*string] `pulumi:"noDataState"`
	// The unique identifier of the alert rule.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (RuleGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return i.ToRuleGroupRuleOutputWithContext(context.Background())
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleOutput)
}

func (i *RuleGroupRuleArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleGroupRuleArgs] {
	return pulumix.Val(i)
}

type RuleGroupRuleOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return o
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return o
}

func (o RuleGroupRuleOutput) ToOutput(ctx context.Context) pulumix.Output[RuleGroupRule] {
	return pulumix.Output[RuleGroupRule]{
		OutputState: o.OutputState,
	}
}

// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Annotations() pulumix.MapOutput[string] {
	value := pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) map[string]string { return v.Annotations })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The `refId` of the query node in the `data` field to use as the alert condition.
func (o RuleGroupRuleOutput) Condition() pulumix.Output[string] {
	return pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) string { return v.Condition })
}

// A sequence of stages that describe the contents of the rule.
func (o RuleGroupRuleOutput) Datas() pulumix.GArrayOutput[RuleGroupRuleData, RuleGroupRuleDataOutput] {
	value := pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) []RuleGroupRuleData { return v.Datas })
	return pulumix.GArrayOutput[RuleGroupRuleData, RuleGroupRuleDataOutput]{OutputState: value.OutputState}
}

// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting. Defaults to `Alerting`.
func (o RuleGroupRuleOutput) ExecErrState() pulumix.Output[*string] {
	return pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) *string { return v.ExecErrState })
}

// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
func (o RuleGroupRuleOutput) For() pulumix.Output[*string] {
	return pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) *string { return v.For })
}

// Sets whether the alert should be paused or not. Defaults to `false`.
func (o RuleGroupRuleOutput) IsPaused() pulumix.Output[*bool] {
	return pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) *bool { return v.IsPaused })
}

// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Labels() pulumix.MapOutput[string] {
	value := pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) map[string]string { return v.Labels })
	return pulumix.MapOutput[string]{OutputState: value.OutputState}
}

// The name of the alert rule.
func (o RuleGroupRuleOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) string { return v.Name })
}

// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting. Defaults to `NoData`.
func (o RuleGroupRuleOutput) NoDataState() pulumix.Output[*string] {
	return pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) *string { return v.NoDataState })
}

// The unique identifier of the alert rule.
func (o RuleGroupRuleOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[RuleGroupRule](o, func(v RuleGroupRule) *string { return v.Uid })
}

type RuleGroupRuleData struct {
	DatasourceUid     string                             `pulumi:"datasourceUid"`
	Model             string                             `pulumi:"model"`
	QueryType         *string                            `pulumi:"queryType"`
	RefId             string                             `pulumi:"refId"`
	RelativeTimeRange RuleGroupRuleDataRelativeTimeRange `pulumi:"relativeTimeRange"`
}

type RuleGroupRuleDataArgs struct {
	DatasourceUid     pulumix.Input[string]                                  `pulumi:"datasourceUid"`
	Model             pulumix.Input[string]                                  `pulumi:"model"`
	QueryType         pulumix.Input[*string]                                 `pulumi:"queryType"`
	RefId             pulumix.Input[string]                                  `pulumi:"refId"`
	RelativeTimeRange pulumix.Input[*RuleGroupRuleDataRelativeTimeRangeArgs] `pulumi:"relativeTimeRange"`
}

func (RuleGroupRuleDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return i.ToRuleGroupRuleDataOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataOutput)
}

func (i *RuleGroupRuleDataArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleGroupRuleDataArgs] {
	return pulumix.Val(i)
}

type RuleGroupRuleDataOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return o
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return o
}

func (o RuleGroupRuleDataOutput) ToOutput(ctx context.Context) pulumix.Output[RuleGroupRuleData] {
	return pulumix.Output[RuleGroupRuleData]{
		OutputState: o.OutputState,
	}
}

func (o RuleGroupRuleDataOutput) DatasourceUid() pulumix.Output[string] {
	return pulumix.Apply[RuleGroupRuleData](o, func(v RuleGroupRuleData) string { return v.DatasourceUid })
}

func (o RuleGroupRuleDataOutput) Model() pulumix.Output[string] {
	return pulumix.Apply[RuleGroupRuleData](o, func(v RuleGroupRuleData) string { return v.Model })
}

func (o RuleGroupRuleDataOutput) QueryType() pulumix.Output[*string] {
	return pulumix.Apply[RuleGroupRuleData](o, func(v RuleGroupRuleData) *string { return v.QueryType })
}

func (o RuleGroupRuleDataOutput) RefId() pulumix.Output[string] {
	return pulumix.Apply[RuleGroupRuleData](o, func(v RuleGroupRuleData) string { return v.RefId })
}

func (o RuleGroupRuleDataOutput) RelativeTimeRange() pulumix.GPtrOutput[RuleGroupRuleDataRelativeTimeRange, RuleGroupRuleDataRelativeTimeRangeOutput] {
	value := pulumix.Apply[RuleGroupRuleData](o, func(v RuleGroupRuleData) RuleGroupRuleDataRelativeTimeRange { return v.RelativeTimeRange })
	return pulumix.GPtrOutput[RuleGroupRuleDataRelativeTimeRange, RuleGroupRuleDataRelativeTimeRangeOutput]{OutputState: value.OutputState}
}

type RuleGroupRuleDataRelativeTimeRange struct {
	From int `pulumi:"from"`
	To   int `pulumi:"to"`
}

type RuleGroupRuleDataRelativeTimeRangeArgs struct {
	From pulumix.Input[int] `pulumi:"from"`
	To   pulumix.Input[int] `pulumi:"to"`
}

func (RuleGroupRuleDataRelativeTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return i.ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataRelativeTimeRangeOutput)
}

func (i *RuleGroupRuleDataRelativeTimeRangeArgs) ToOutput(ctx context.Context) pulumix.Output[*RuleGroupRuleDataRelativeTimeRangeArgs] {
	return pulumix.Val(i)
}

type RuleGroupRuleDataRelativeTimeRangeOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataRelativeTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToOutput(ctx context.Context) pulumix.Output[RuleGroupRuleDataRelativeTimeRange] {
	return pulumix.Output[RuleGroupRuleDataRelativeTimeRange]{
		OutputState: o.OutputState,
	}
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) From() pulumix.Output[int] {
	return pulumix.Apply[RuleGroupRuleDataRelativeTimeRange](o, func(v RuleGroupRuleDataRelativeTimeRange) int { return v.From })
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) To() pulumix.Output[int] {
	return pulumix.Apply[RuleGroupRuleDataRelativeTimeRange](o, func(v RuleGroupRuleDataRelativeTimeRange) int { return v.To })
}

type SLOAlerting struct {
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations []SLOAlertingAnnotation `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns []SLOAlertingFastburn `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels []SLOAlertingLabel `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns []SLOAlertingSlowburn `pulumi:"slowburns"`
}

type SLOAlertingArgs struct {
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations pulumix.Input[[]*SLOAlertingAnnotationArgs] `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns pulumix.Input[[]*SLOAlertingFastburnArgs] `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels pulumix.Input[[]*SLOAlertingLabelArgs] `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns pulumix.Input[[]*SLOAlertingSlowburnArgs] `pulumi:"slowburns"`
}

func (SLOAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlerting)(nil)).Elem()
}

func (i SLOAlertingArgs) ToSLOAlertingOutput() SLOAlertingOutput {
	return i.ToSLOAlertingOutputWithContext(context.Background())
}

func (i SLOAlertingArgs) ToSLOAlertingOutputWithContext(ctx context.Context) SLOAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingOutput)
}

func (i *SLOAlertingArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingArgs] {
	return pulumix.Val(i)
}

type SLOAlertingOutput struct{ *pulumi.OutputState }

func (SLOAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlerting)(nil)).Elem()
}

func (o SLOAlertingOutput) ToSLOAlertingOutput() SLOAlertingOutput {
	return o
}

func (o SLOAlertingOutput) ToSLOAlertingOutputWithContext(ctx context.Context) SLOAlertingOutput {
	return o
}

func (o SLOAlertingOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlerting] {
	return pulumix.Output[SLOAlerting]{
		OutputState: o.OutputState,
	}
}

// Annotations will be attached to all alerts generated by any of these rules.
func (o SLOAlertingOutput) Annotations() pulumix.GArrayOutput[SLOAlertingAnnotation, SLOAlertingAnnotationOutput] {
	value := pulumix.Apply[SLOAlerting](o, func(v SLOAlerting) []SLOAlertingAnnotation { return v.Annotations })
	return pulumix.GArrayOutput[SLOAlertingAnnotation, SLOAlertingAnnotationOutput]{OutputState: value.OutputState}
}

// Alerting Rules generated for Fast Burn alerts
func (o SLOAlertingOutput) Fastburns() pulumix.GArrayOutput[SLOAlertingFastburn, SLOAlertingFastburnOutput] {
	value := pulumix.Apply[SLOAlerting](o, func(v SLOAlerting) []SLOAlertingFastburn { return v.Fastburns })
	return pulumix.GArrayOutput[SLOAlertingFastburn, SLOAlertingFastburnOutput]{OutputState: value.OutputState}
}

// Labels will be attached to all alerts generated by any of these rules.
func (o SLOAlertingOutput) Labels() pulumix.GArrayOutput[SLOAlertingLabel, SLOAlertingLabelOutput] {
	value := pulumix.Apply[SLOAlerting](o, func(v SLOAlerting) []SLOAlertingLabel { return v.Labels })
	return pulumix.GArrayOutput[SLOAlertingLabel, SLOAlertingLabelOutput]{OutputState: value.OutputState}
}

// Alerting Rules generated for Slow Burn alerts
func (o SLOAlertingOutput) Slowburns() pulumix.GArrayOutput[SLOAlertingSlowburn, SLOAlertingSlowburnOutput] {
	value := pulumix.Apply[SLOAlerting](o, func(v SLOAlerting) []SLOAlertingSlowburn { return v.Slowburns })
	return pulumix.GArrayOutput[SLOAlertingSlowburn, SLOAlertingSlowburnOutput]{OutputState: value.OutputState}
}

type SLOAlertingAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SLOAlertingAnnotationArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SLOAlertingAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAnnotation)(nil)).Elem()
}

func (i SLOAlertingAnnotationArgs) ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput {
	return i.ToSLOAlertingAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingAnnotationArgs) ToSLOAlertingAnnotationOutputWithContext(ctx context.Context) SLOAlertingAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAnnotationOutput)
}

func (i *SLOAlertingAnnotationArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingAnnotationArgs] {
	return pulumix.Val(i)
}

type SLOAlertingAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAnnotation)(nil)).Elem()
}

func (o SLOAlertingAnnotationOutput) ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput {
	return o
}

func (o SLOAlertingAnnotationOutput) ToSLOAlertingAnnotationOutputWithContext(ctx context.Context) SLOAlertingAnnotationOutput {
	return o
}

func (o SLOAlertingAnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingAnnotation] {
	return pulumix.Output[SLOAlertingAnnotation]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingAnnotationOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingAnnotation](o, func(v SLOAlertingAnnotation) string { return v.Key })
}

func (o SLOAlertingAnnotationOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingAnnotation](o, func(v SLOAlertingAnnotation) string { return v.Value })
}

type SLOAlertingFastburn struct {
	Annotations []SLOAlertingFastburnAnnotation `pulumi:"annotations"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	Labels []SLOAlertingFastburnLabel `pulumi:"labels"`
}

type SLOAlertingFastburnArgs struct {
	Annotations pulumix.Input[[]*SLOAlertingFastburnAnnotationArgs] `pulumi:"annotations"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	Labels pulumix.Input[[]*SLOAlertingFastburnLabelArgs] `pulumi:"labels"`
}

func (SLOAlertingFastburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburn)(nil)).Elem()
}

func (i SLOAlertingFastburnArgs) ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput {
	return i.ToSLOAlertingFastburnOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnArgs) ToSLOAlertingFastburnOutputWithContext(ctx context.Context) SLOAlertingFastburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnOutput)
}

func (i *SLOAlertingFastburnArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingFastburnArgs] {
	return pulumix.Val(i)
}

type SLOAlertingFastburnOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburn)(nil)).Elem()
}

func (o SLOAlertingFastburnOutput) ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput {
	return o
}

func (o SLOAlertingFastburnOutput) ToSLOAlertingFastburnOutputWithContext(ctx context.Context) SLOAlertingFastburnOutput {
	return o
}

func (o SLOAlertingFastburnOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingFastburn] {
	return pulumix.Output[SLOAlertingFastburn]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingFastburnOutput) Annotations() pulumix.GArrayOutput[SLOAlertingFastburnAnnotation, SLOAlertingFastburnAnnotationOutput] {
	value := pulumix.Apply[SLOAlertingFastburn](o, func(v SLOAlertingFastburn) []SLOAlertingFastburnAnnotation { return v.Annotations })
	return pulumix.GArrayOutput[SLOAlertingFastburnAnnotation, SLOAlertingFastburnAnnotationOutput]{OutputState: value.OutputState}
}

// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
func (o SLOAlertingFastburnOutput) Labels() pulumix.GArrayOutput[SLOAlertingFastburnLabel, SLOAlertingFastburnLabelOutput] {
	value := pulumix.Apply[SLOAlertingFastburn](o, func(v SLOAlertingFastburn) []SLOAlertingFastburnLabel { return v.Labels })
	return pulumix.GArrayOutput[SLOAlertingFastburnLabel, SLOAlertingFastburnLabelOutput]{OutputState: value.OutputState}
}

type SLOAlertingFastburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SLOAlertingFastburnAnnotationArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SLOAlertingFastburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingFastburnAnnotationArgs) ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput {
	return i.ToSLOAlertingFastburnAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnAnnotationArgs) ToSLOAlertingFastburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnAnnotationOutput)
}

func (i *SLOAlertingFastburnAnnotationArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingFastburnAnnotationArgs] {
	return pulumix.Val(i)
}

type SLOAlertingFastburnAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingFastburnAnnotationOutput) ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationOutput) ToSLOAlertingFastburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingFastburnAnnotation] {
	return pulumix.Output[SLOAlertingFastburnAnnotation]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingFastburnAnnotationOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingFastburnAnnotation](o, func(v SLOAlertingFastburnAnnotation) string { return v.Key })
}

func (o SLOAlertingFastburnAnnotationOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingFastburnAnnotation](o, func(v SLOAlertingFastburnAnnotation) string { return v.Value })
}

type SLOAlertingFastburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SLOAlertingFastburnLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SLOAlertingFastburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnLabel)(nil)).Elem()
}

func (i SLOAlertingFastburnLabelArgs) ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput {
	return i.ToSLOAlertingFastburnLabelOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnLabelArgs) ToSLOAlertingFastburnLabelOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnLabelOutput)
}

func (i *SLOAlertingFastburnLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingFastburnLabelArgs] {
	return pulumix.Val(i)
}

type SLOAlertingFastburnLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnLabel)(nil)).Elem()
}

func (o SLOAlertingFastburnLabelOutput) ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput {
	return o
}

func (o SLOAlertingFastburnLabelOutput) ToSLOAlertingFastburnLabelOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelOutput {
	return o
}

func (o SLOAlertingFastburnLabelOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingFastburnLabel] {
	return pulumix.Output[SLOAlertingFastburnLabel]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingFastburnLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingFastburnLabel](o, func(v SLOAlertingFastburnLabel) string { return v.Key })
}

func (o SLOAlertingFastburnLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingFastburnLabel](o, func(v SLOAlertingFastburnLabel) string { return v.Value })
}

type SLOAlertingLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SLOAlertingLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SLOAlertingLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingLabel)(nil)).Elem()
}

func (i SLOAlertingLabelArgs) ToSLOAlertingLabelOutput() SLOAlertingLabelOutput {
	return i.ToSLOAlertingLabelOutputWithContext(context.Background())
}

func (i SLOAlertingLabelArgs) ToSLOAlertingLabelOutputWithContext(ctx context.Context) SLOAlertingLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingLabelOutput)
}

func (i *SLOAlertingLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingLabelArgs] {
	return pulumix.Val(i)
}

type SLOAlertingLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingLabel)(nil)).Elem()
}

func (o SLOAlertingLabelOutput) ToSLOAlertingLabelOutput() SLOAlertingLabelOutput {
	return o
}

func (o SLOAlertingLabelOutput) ToSLOAlertingLabelOutputWithContext(ctx context.Context) SLOAlertingLabelOutput {
	return o
}

func (o SLOAlertingLabelOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingLabel] {
	return pulumix.Output[SLOAlertingLabel]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingLabel](o, func(v SLOAlertingLabel) string { return v.Key })
}

func (o SLOAlertingLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingLabel](o, func(v SLOAlertingLabel) string { return v.Value })
}

type SLOAlertingSlowburn struct {
	Annotations []SLOAlertingSlowburnAnnotation `pulumi:"annotations"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	Labels []SLOAlertingSlowburnLabel `pulumi:"labels"`
}

type SLOAlertingSlowburnArgs struct {
	Annotations pulumix.Input[[]*SLOAlertingSlowburnAnnotationArgs] `pulumi:"annotations"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	Labels pulumix.Input[[]*SLOAlertingSlowburnLabelArgs] `pulumi:"labels"`
}

func (SLOAlertingSlowburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburn)(nil)).Elem()
}

func (i SLOAlertingSlowburnArgs) ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput {
	return i.ToSLOAlertingSlowburnOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnArgs) ToSLOAlertingSlowburnOutputWithContext(ctx context.Context) SLOAlertingSlowburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnOutput)
}

func (i *SLOAlertingSlowburnArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingSlowburnArgs] {
	return pulumix.Val(i)
}

type SLOAlertingSlowburnOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburn)(nil)).Elem()
}

func (o SLOAlertingSlowburnOutput) ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput {
	return o
}

func (o SLOAlertingSlowburnOutput) ToSLOAlertingSlowburnOutputWithContext(ctx context.Context) SLOAlertingSlowburnOutput {
	return o
}

func (o SLOAlertingSlowburnOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingSlowburn] {
	return pulumix.Output[SLOAlertingSlowburn]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingSlowburnOutput) Annotations() pulumix.GArrayOutput[SLOAlertingSlowburnAnnotation, SLOAlertingSlowburnAnnotationOutput] {
	value := pulumix.Apply[SLOAlertingSlowburn](o, func(v SLOAlertingSlowburn) []SLOAlertingSlowburnAnnotation { return v.Annotations })
	return pulumix.GArrayOutput[SLOAlertingSlowburnAnnotation, SLOAlertingSlowburnAnnotationOutput]{OutputState: value.OutputState}
}

// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
func (o SLOAlertingSlowburnOutput) Labels() pulumix.GArrayOutput[SLOAlertingSlowburnLabel, SLOAlertingSlowburnLabelOutput] {
	value := pulumix.Apply[SLOAlertingSlowburn](o, func(v SLOAlertingSlowburn) []SLOAlertingSlowburnLabel { return v.Labels })
	return pulumix.GArrayOutput[SLOAlertingSlowburnLabel, SLOAlertingSlowburnLabelOutput]{OutputState: value.OutputState}
}

type SLOAlertingSlowburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SLOAlertingSlowburnAnnotationArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SLOAlertingSlowburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingSlowburnAnnotationArgs) ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput {
	return i.ToSLOAlertingSlowburnAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnAnnotationArgs) ToSLOAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnAnnotationOutput)
}

func (i *SLOAlertingSlowburnAnnotationArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingSlowburnAnnotationArgs] {
	return pulumix.Val(i)
}

type SLOAlertingSlowburnAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingSlowburnAnnotationOutput) ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationOutput) ToSLOAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingSlowburnAnnotation] {
	return pulumix.Output[SLOAlertingSlowburnAnnotation]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingSlowburnAnnotationOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingSlowburnAnnotation](o, func(v SLOAlertingSlowburnAnnotation) string { return v.Key })
}

func (o SLOAlertingSlowburnAnnotationOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingSlowburnAnnotation](o, func(v SLOAlertingSlowburnAnnotation) string { return v.Value })
}

type SLOAlertingSlowburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SLOAlertingSlowburnLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SLOAlertingSlowburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (i SLOAlertingSlowburnLabelArgs) ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput {
	return i.ToSLOAlertingSlowburnLabelOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnLabelArgs) ToSLOAlertingSlowburnLabelOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnLabelOutput)
}

func (i *SLOAlertingSlowburnLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOAlertingSlowburnLabelArgs] {
	return pulumix.Val(i)
}

type SLOAlertingSlowburnLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (o SLOAlertingSlowburnLabelOutput) ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput {
	return o
}

func (o SLOAlertingSlowburnLabelOutput) ToSLOAlertingSlowburnLabelOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelOutput {
	return o
}

func (o SLOAlertingSlowburnLabelOutput) ToOutput(ctx context.Context) pulumix.Output[SLOAlertingSlowburnLabel] {
	return pulumix.Output[SLOAlertingSlowburnLabel]{
		OutputState: o.OutputState,
	}
}

func (o SLOAlertingSlowburnLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingSlowburnLabel](o, func(v SLOAlertingSlowburnLabel) string { return v.Key })
}

func (o SLOAlertingSlowburnLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SLOAlertingSlowburnLabel](o, func(v SLOAlertingSlowburnLabel) string { return v.Value })
}

type SLOLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type SLOLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (SLOLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOLabel)(nil)).Elem()
}

func (i SLOLabelArgs) ToSLOLabelOutput() SLOLabelOutput {
	return i.ToSLOLabelOutputWithContext(context.Background())
}

func (i SLOLabelArgs) ToSLOLabelOutputWithContext(ctx context.Context) SLOLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOLabelOutput)
}

func (i *SLOLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOLabelArgs] {
	return pulumix.Val(i)
}

type SLOLabelOutput struct{ *pulumi.OutputState }

func (SLOLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOLabel)(nil)).Elem()
}

func (o SLOLabelOutput) ToSLOLabelOutput() SLOLabelOutput {
	return o
}

func (o SLOLabelOutput) ToSLOLabelOutputWithContext(ctx context.Context) SLOLabelOutput {
	return o
}

func (o SLOLabelOutput) ToOutput(ctx context.Context) pulumix.Output[SLOLabel] {
	return pulumix.Output[SLOLabel]{
		OutputState: o.OutputState,
	}
}

func (o SLOLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[SLOLabel](o, func(v SLOLabel) string { return v.Key })
}

func (o SLOLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[SLOLabel](o, func(v SLOLabel) string { return v.Value })
}

type SLOObjective struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value float64 `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window string `pulumi:"window"`
}

type SLOObjectiveArgs struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value pulumix.Input[float64] `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window pulumix.Input[string] `pulumi:"window"`
}

func (SLOObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOObjective)(nil)).Elem()
}

func (i SLOObjectiveArgs) ToSLOObjectiveOutput() SLOObjectiveOutput {
	return i.ToSLOObjectiveOutputWithContext(context.Background())
}

func (i SLOObjectiveArgs) ToSLOObjectiveOutputWithContext(ctx context.Context) SLOObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOObjectiveOutput)
}

func (i *SLOObjectiveArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOObjectiveArgs] {
	return pulumix.Val(i)
}

type SLOObjectiveOutput struct{ *pulumi.OutputState }

func (SLOObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOObjective)(nil)).Elem()
}

func (o SLOObjectiveOutput) ToSLOObjectiveOutput() SLOObjectiveOutput {
	return o
}

func (o SLOObjectiveOutput) ToSLOObjectiveOutputWithContext(ctx context.Context) SLOObjectiveOutput {
	return o
}

func (o SLOObjectiveOutput) ToOutput(ctx context.Context) pulumix.Output[SLOObjective] {
	return pulumix.Output[SLOObjective]{
		OutputState: o.OutputState,
	}
}

// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
func (o SLOObjectiveOutput) Value() pulumix.Output[float64] {
	return pulumix.Apply[SLOObjective](o, func(v SLOObjective) float64 { return v.Value })
}

// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
func (o SLOObjectiveOutput) Window() pulumix.Output[string] {
	return pulumix.Apply[SLOObjective](o, func(v SLOObjective) string { return v.Window })
}

type SLOQuery struct {
	Freeform *SLOQueryFreeform `pulumi:"freeform"`
	Ratio    *SLOQueryRatio    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type string `pulumi:"type"`
}

type SLOQueryArgs struct {
	Freeform pulumix.Input[*SLOQueryFreeformArgs] `pulumi:"freeform"`
	Ratio    pulumix.Input[*SLOQueryRatioArgs]    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type pulumix.Input[string] `pulumi:"type"`
}

func (SLOQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQuery)(nil)).Elem()
}

func (i SLOQueryArgs) ToSLOQueryOutput() SLOQueryOutput {
	return i.ToSLOQueryOutputWithContext(context.Background())
}

func (i SLOQueryArgs) ToSLOQueryOutputWithContext(ctx context.Context) SLOQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryOutput)
}

func (i *SLOQueryArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOQueryArgs] {
	return pulumix.Val(i)
}

type SLOQueryOutput struct{ *pulumi.OutputState }

func (SLOQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQuery)(nil)).Elem()
}

func (o SLOQueryOutput) ToSLOQueryOutput() SLOQueryOutput {
	return o
}

func (o SLOQueryOutput) ToSLOQueryOutputWithContext(ctx context.Context) SLOQueryOutput {
	return o
}

func (o SLOQueryOutput) ToOutput(ctx context.Context) pulumix.Output[SLOQuery] {
	return pulumix.Output[SLOQuery]{
		OutputState: o.OutputState,
	}
}

func (o SLOQueryOutput) Freeform() pulumix.GPtrOutput[SLOQueryFreeform, SLOQueryFreeformOutput] {
	value := pulumix.Apply[SLOQuery](o, func(v SLOQuery) *SLOQueryFreeform { return v.Freeform })
	return pulumix.GPtrOutput[SLOQueryFreeform, SLOQueryFreeformOutput]{OutputState: value.OutputState}
}

func (o SLOQueryOutput) Ratio() pulumix.GPtrOutput[SLOQueryRatio, SLOQueryRatioOutput] {
	value := pulumix.Apply[SLOQuery](o, func(v SLOQuery) *SLOQueryRatio { return v.Ratio })
	return pulumix.GPtrOutput[SLOQueryRatio, SLOQueryRatioOutput]{OutputState: value.OutputState}
}

// Query type must be one of: "freeform", "query", "ratio", or "threshold"
func (o SLOQueryOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[SLOQuery](o, func(v SLOQuery) string { return v.Type })
}

type SLOQueryFreeform struct {
	// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
	Query string `pulumi:"query"`
}

type SLOQueryFreeformArgs struct {
	// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
	Query pulumix.Input[string] `pulumi:"query"`
}

func (SLOQueryFreeformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryFreeform)(nil)).Elem()
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformOutput() SLOQueryFreeformOutput {
	return i.ToSLOQueryFreeformOutputWithContext(context.Background())
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformOutputWithContext(ctx context.Context) SLOQueryFreeformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryFreeformOutput)
}

func (i *SLOQueryFreeformArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOQueryFreeformArgs] {
	return pulumix.Val(i)
}

type SLOQueryFreeformOutput struct{ *pulumi.OutputState }

func (SLOQueryFreeformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryFreeform)(nil)).Elem()
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformOutput() SLOQueryFreeformOutput {
	return o
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformOutputWithContext(ctx context.Context) SLOQueryFreeformOutput {
	return o
}

func (o SLOQueryFreeformOutput) ToOutput(ctx context.Context) pulumix.Output[SLOQueryFreeform] {
	return pulumix.Output[SLOQueryFreeform]{
		OutputState: o.OutputState,
	}
}

// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
func (o SLOQueryFreeformOutput) Query() pulumix.Output[string] {
	return pulumix.Apply[SLOQueryFreeform](o, func(v SLOQueryFreeform) string { return v.Query })
}

type SLOQueryRatio struct {
	GroupByLabels []string `pulumi:"groupByLabels"`
	SuccessMetric string   `pulumi:"successMetric"`
	TotalMetric   string   `pulumi:"totalMetric"`
}

type SLOQueryRatioArgs struct {
	GroupByLabels pulumix.Input[[]string] `pulumi:"groupByLabels"`
	SuccessMetric pulumix.Input[string]   `pulumi:"successMetric"`
	TotalMetric   pulumix.Input[string]   `pulumi:"totalMetric"`
}

func (SLOQueryRatioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryRatio)(nil)).Elem()
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioOutput() SLOQueryRatioOutput {
	return i.ToSLOQueryRatioOutputWithContext(context.Background())
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioOutputWithContext(ctx context.Context) SLOQueryRatioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryRatioOutput)
}

func (i *SLOQueryRatioArgs) ToOutput(ctx context.Context) pulumix.Output[*SLOQueryRatioArgs] {
	return pulumix.Val(i)
}

type SLOQueryRatioOutput struct{ *pulumi.OutputState }

func (SLOQueryRatioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryRatio)(nil)).Elem()
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioOutput() SLOQueryRatioOutput {
	return o
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioOutputWithContext(ctx context.Context) SLOQueryRatioOutput {
	return o
}

func (o SLOQueryRatioOutput) ToOutput(ctx context.Context) pulumix.Output[SLOQueryRatio] {
	return pulumix.Output[SLOQueryRatio]{
		OutputState: o.OutputState,
	}
}

func (o SLOQueryRatioOutput) GroupByLabels() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SLOQueryRatio](o, func(v SLOQueryRatio) []string { return v.GroupByLabels })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SLOQueryRatioOutput) SuccessMetric() pulumix.Output[string] {
	return pulumix.Apply[SLOQueryRatio](o, func(v SLOQueryRatio) string { return v.SuccessMetric })
}

func (o SLOQueryRatioOutput) TotalMetric() pulumix.Output[string] {
	return pulumix.Apply[SLOQueryRatio](o, func(v SLOQueryRatio) string { return v.TotalMetric })
}

type ServiceAccountPermissionPermission struct {
	// Permission to associate with item. Must be `Edit` or `Admin`.
	Permission string `pulumi:"permission"`
	// ID of the team to manage permissions for. Specify either this or `userId`. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user to manage permissions for. Specify either this or `teamId`. Defaults to `0`.
	UserId *int `pulumi:"userId"`
}

type ServiceAccountPermissionPermissionArgs struct {
	// Permission to associate with item. Must be `Edit` or `Admin`.
	Permission pulumix.Input[string] `pulumi:"permission"`
	// ID of the team to manage permissions for. Specify either this or `userId`. Defaults to `0`.
	TeamId pulumix.Input[*string] `pulumi:"teamId"`
	// ID of the user to manage permissions for. Specify either this or `teamId`. Defaults to `0`.
	UserId pulumix.Input[*int] `pulumi:"userId"`
}

func (ServiceAccountPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPermissionPermission)(nil)).Elem()
}

func (i ServiceAccountPermissionPermissionArgs) ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput {
	return i.ToServiceAccountPermissionPermissionOutputWithContext(context.Background())
}

func (i ServiceAccountPermissionPermissionArgs) ToServiceAccountPermissionPermissionOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPermissionPermissionOutput)
}

func (i *ServiceAccountPermissionPermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*ServiceAccountPermissionPermissionArgs] {
	return pulumix.Val(i)
}

type ServiceAccountPermissionPermissionOutput struct{ *pulumi.OutputState }

func (ServiceAccountPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPermissionPermission)(nil)).Elem()
}

func (o ServiceAccountPermissionPermissionOutput) ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput {
	return o
}

func (o ServiceAccountPermissionPermissionOutput) ToServiceAccountPermissionPermissionOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionOutput {
	return o
}

func (o ServiceAccountPermissionPermissionOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountPermissionPermission] {
	return pulumix.Output[ServiceAccountPermissionPermission]{
		OutputState: o.OutputState,
	}
}

// Permission to associate with item. Must be `Edit` or `Admin`.
func (o ServiceAccountPermissionPermissionOutput) Permission() pulumix.Output[string] {
	return pulumix.Apply[ServiceAccountPermissionPermission](o, func(v ServiceAccountPermissionPermission) string { return v.Permission })
}

// ID of the team to manage permissions for. Specify either this or `userId`. Defaults to `0`.
func (o ServiceAccountPermissionPermissionOutput) TeamId() pulumix.Output[*string] {
	return pulumix.Apply[ServiceAccountPermissionPermission](o, func(v ServiceAccountPermissionPermission) *string { return v.TeamId })
}

// ID of the user to manage permissions for. Specify either this or `teamId`. Defaults to `0`.
func (o ServiceAccountPermissionPermissionOutput) UserId() pulumix.Output[*int] {
	return pulumix.Apply[ServiceAccountPermissionPermission](o, func(v ServiceAccountPermissionPermission) *int { return v.UserId })
}

type SyntheticMonitoringCheckSettings struct {
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns *SyntheticMonitoringCheckSettingsDns `pulumi:"dns"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http *SyntheticMonitoringCheckSettingsHttp `pulumi:"http"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping *SyntheticMonitoringCheckSettingsPing `pulumi:"ping"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp *SyntheticMonitoringCheckSettingsTcp `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute *SyntheticMonitoringCheckSettingsTraceroute `pulumi:"traceroute"`
}

type SyntheticMonitoringCheckSettingsArgs struct {
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns pulumix.Input[*SyntheticMonitoringCheckSettingsDnsArgs] `pulumi:"dns"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http pulumix.Input[*SyntheticMonitoringCheckSettingsHttpArgs] `pulumi:"http"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping pulumix.Input[*SyntheticMonitoringCheckSettingsPingArgs] `pulumi:"ping"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp pulumix.Input[*SyntheticMonitoringCheckSettingsTcpArgs] `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute pulumix.Input[*SyntheticMonitoringCheckSettingsTracerouteArgs] `pulumi:"traceroute"`
}

func (SyntheticMonitoringCheckSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput {
	return i.ToSyntheticMonitoringCheckSettingsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsOutput)
}

func (i *SyntheticMonitoringCheckSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettings] {
	return pulumix.Output[SyntheticMonitoringCheckSettings]{
		OutputState: o.OutputState,
	}
}

// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
func (o SyntheticMonitoringCheckSettingsOutput) Dns() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsDns, SyntheticMonitoringCheckSettingsDnsOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettings](o, func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsDns { return v.Dns })
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsDns, SyntheticMonitoringCheckSettingsDnsOutput]{OutputState: value.OutputState}
}

// Settings for HTTP check. The target must be a URL (http or https).
func (o SyntheticMonitoringCheckSettingsOutput) Http() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsHttp, SyntheticMonitoringCheckSettingsHttpOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettings](o, func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsHttp { return v.Http })
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsHttp, SyntheticMonitoringCheckSettingsHttpOutput]{OutputState: value.OutputState}
}

// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsOutput) Ping() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsPing, SyntheticMonitoringCheckSettingsPingOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettings](o, func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsPing { return v.Ping })
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsPing, SyntheticMonitoringCheckSettingsPingOutput]{OutputState: value.OutputState}
}

// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsOutput) Tcp() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsTcp, SyntheticMonitoringCheckSettingsTcpOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettings](o, func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTcp { return v.Tcp })
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsTcp, SyntheticMonitoringCheckSettingsTcpOutput]{OutputState: value.OutputState}
}

// Settings for traceroute check. The target must be a valid hostname or IP address
func (o SyntheticMonitoringCheckSettingsOutput) Traceroute() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsTraceroute, SyntheticMonitoringCheckSettingsTracerouteOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettings](o, func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTraceroute {
		return v.Traceroute
	})
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsTraceroute, SyntheticMonitoringCheckSettingsTracerouteOutput]{OutputState: value.OutputState}
}

type SyntheticMonitoringCheckSettingsDns struct {
	IpVersion             *string                                                   `pulumi:"ipVersion"`
	Port                  *int                                                      `pulumi:"port"`
	Protocol              *string                                                   `pulumi:"protocol"`
	RecordType            *string                                                   `pulumi:"recordType"`
	Server                *string                                                   `pulumi:"server"`
	SourceIpAddress       *string                                                   `pulumi:"sourceIpAddress"`
	ValidRCodes           []string                                                  `pulumi:"validRCodes"`
	ValidateAdditionalRrs []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr `pulumi:"validateAdditionalRrs"`
	ValidateAnswerRrs     *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs     `pulumi:"validateAnswerRrs"`
	ValidateAuthorityRrs  *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs  `pulumi:"validateAuthorityRrs"`
}

type SyntheticMonitoringCheckSettingsDnsArgs struct {
	IpVersion             pulumix.Input[*string]                                                        `pulumi:"ipVersion"`
	Port                  pulumix.Input[*int]                                                           `pulumi:"port"`
	Protocol              pulumix.Input[*string]                                                        `pulumi:"protocol"`
	RecordType            pulumix.Input[*string]                                                        `pulumi:"recordType"`
	Server                pulumix.Input[*string]                                                        `pulumi:"server"`
	SourceIpAddress       pulumix.Input[*string]                                                        `pulumi:"sourceIpAddress"`
	ValidRCodes           pulumix.Input[[]string]                                                       `pulumi:"validRCodes"`
	ValidateAdditionalRrs pulumix.Input[[]*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs] `pulumi:"validateAdditionalRrs"`
	ValidateAnswerRrs     pulumix.Input[*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs]      `pulumi:"validateAnswerRrs"`
	ValidateAuthorityRrs  pulumix.Input[*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs]   `pulumi:"validateAuthorityRrs"`
}

func (SyntheticMonitoringCheckSettingsDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsOutput)
}

func (i *SyntheticMonitoringCheckSettingsDnsArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsDnsArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsDnsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsDns] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsDns]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) IpVersion() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *string { return v.IpVersion })
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) Port() pulumix.Output[*int] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *int { return v.Port })
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) Protocol() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *string { return v.Protocol })
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) RecordType() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *string { return v.RecordType })
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) Server() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *string { return v.Server })
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) SourceIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *string { return v.SourceIpAddress })
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidRCodes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) []string { return v.ValidRCodes })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAdditionalRrs() pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr, SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
		return v.ValidateAdditionalRrs
	})
	return pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr, SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAnswerRrs() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs, SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		return v.ValidateAnswerRrs
	})
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs, SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAuthorityRrs() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs, SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDns](o, func(v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		return v.ValidateAuthorityRrs
	})
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs, SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput]{OutputState: value.OutputState}
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr struct {
	FailIfMatchesRegexps    []string `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs struct {
	FailIfMatchesRegexps    pulumix.Input[[]string] `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps pulumix.Input[[]string] `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput)
}

func (i *SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) FailIfMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr](o, func(v SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr) []string {
		return v.FailIfMatchesRegexps
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) FailIfNotMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr](o, func(v SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr) []string {
		return v.FailIfNotMatchesRegexps
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs struct {
	FailIfMatchesRegexps    []string `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs struct {
	FailIfMatchesRegexps    pulumix.Input[[]string] `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps pulumix.Input[[]string] `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput)
}

func (i *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) FailIfMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs](o, func(v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string { return v.FailIfMatchesRegexps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) FailIfNotMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs](o, func(v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string {
		return v.FailIfNotMatchesRegexps
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs struct {
	FailIfMatchesRegexps    []string `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs struct {
	FailIfMatchesRegexps    pulumix.Input[[]string] `pulumi:"failIfMatchesRegexps"`
	FailIfNotMatchesRegexps pulumix.Input[[]string] `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput)
}

func (i *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) FailIfMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs](o, func(v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		return v.FailIfMatchesRegexps
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) FailIfNotMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs](o, func(v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		return v.FailIfNotMatchesRegexps
	})
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type SyntheticMonitoringCheckSettingsHttp struct {
	BasicAuth                     *SyntheticMonitoringCheckSettingsHttpBasicAuth                     `pulumi:"basicAuth"`
	BearerToken                   *string                                                            `pulumi:"bearerToken"`
	Body                          *string                                                            `pulumi:"body"`
	CacheBustingQueryParamName    *string                                                            `pulumi:"cacheBustingQueryParamName"`
	FailIfBodyMatchesRegexps      []string                                                           `pulumi:"failIfBodyMatchesRegexps"`
	FailIfBodyNotMatchesRegexps   []string                                                           `pulumi:"failIfBodyNotMatchesRegexps"`
	FailIfHeaderMatchesRegexps    []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp    `pulumi:"failIfHeaderMatchesRegexps"`
	FailIfHeaderNotMatchesRegexps []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp `pulumi:"failIfHeaderNotMatchesRegexps"`
	FailIfNotSsl                  *bool                                                              `pulumi:"failIfNotSsl"`
	FailIfSsl                     *bool                                                              `pulumi:"failIfSsl"`
	Headers                       []string                                                           `pulumi:"headers"`
	IpVersion                     *string                                                            `pulumi:"ipVersion"`
	Method                        *string                                                            `pulumi:"method"`
	NoFollowRedirects             *bool                                                              `pulumi:"noFollowRedirects"`
	ProxyUrl                      *string                                                            `pulumi:"proxyUrl"`
	TlsConfig                     *SyntheticMonitoringCheckSettingsHttpTlsConfig                     `pulumi:"tlsConfig"`
	ValidHttpVersions             []string                                                           `pulumi:"validHttpVersions"`
	ValidStatusCodes              []int                                                              `pulumi:"validStatusCodes"`
}

type SyntheticMonitoringCheckSettingsHttpArgs struct {
	BasicAuth                     pulumix.Input[*SyntheticMonitoringCheckSettingsHttpBasicAuthArgs]                      `pulumi:"basicAuth"`
	BearerToken                   pulumix.Input[*string]                                                                 `pulumi:"bearerToken"`
	Body                          pulumix.Input[*string]                                                                 `pulumi:"body"`
	CacheBustingQueryParamName    pulumix.Input[*string]                                                                 `pulumi:"cacheBustingQueryParamName"`
	FailIfBodyMatchesRegexps      pulumix.Input[[]string]                                                                `pulumi:"failIfBodyMatchesRegexps"`
	FailIfBodyNotMatchesRegexps   pulumix.Input[[]string]                                                                `pulumi:"failIfBodyNotMatchesRegexps"`
	FailIfHeaderMatchesRegexps    pulumix.Input[[]*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs]    `pulumi:"failIfHeaderMatchesRegexps"`
	FailIfHeaderNotMatchesRegexps pulumix.Input[[]*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs] `pulumi:"failIfHeaderNotMatchesRegexps"`
	FailIfNotSsl                  pulumix.Input[*bool]                                                                   `pulumi:"failIfNotSsl"`
	FailIfSsl                     pulumix.Input[*bool]                                                                   `pulumi:"failIfSsl"`
	Headers                       pulumix.Input[[]string]                                                                `pulumi:"headers"`
	IpVersion                     pulumix.Input[*string]                                                                 `pulumi:"ipVersion"`
	Method                        pulumix.Input[*string]                                                                 `pulumi:"method"`
	NoFollowRedirects             pulumix.Input[*bool]                                                                   `pulumi:"noFollowRedirects"`
	ProxyUrl                      pulumix.Input[*string]                                                                 `pulumi:"proxyUrl"`
	TlsConfig                     pulumix.Input[*SyntheticMonitoringCheckSettingsHttpTlsConfigArgs]                      `pulumi:"tlsConfig"`
	ValidHttpVersions             pulumix.Input[[]string]                                                                `pulumi:"validHttpVersions"`
	ValidStatusCodes              pulumix.Input[[]int]                                                                   `pulumi:"validStatusCodes"`
}

func (SyntheticMonitoringCheckSettingsHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpOutput)
}

func (i *SyntheticMonitoringCheckSettingsHttpArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsHttpArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsHttpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsHttp] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsHttp]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) BasicAuth() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsHttpBasicAuth, SyntheticMonitoringCheckSettingsHttpBasicAuthOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpBasicAuth {
		return v.BasicAuth
	})
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsHttpBasicAuth, SyntheticMonitoringCheckSettingsHttpBasicAuthOutput]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) BearerToken() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.BearerToken })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) Body() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.Body })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) CacheBustingQueryParamName() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.CacheBustingQueryParamName })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfBodyMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.FailIfBodyMatchesRegexps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfBodyNotMatchesRegexps() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.FailIfBodyNotMatchesRegexps })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfHeaderMatchesRegexps() pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp, SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
		return v.FailIfHeaderMatchesRegexps
	})
	return pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp, SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfHeaderNotMatchesRegexps() pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp, SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		return v.FailIfHeaderNotMatchesRegexps
	})
	return pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp, SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfNotSsl() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.FailIfNotSsl })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfSsl() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.FailIfSsl })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) Headers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.Headers })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) IpVersion() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.IpVersion })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) Method() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.Method })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) NoFollowRedirects() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.NoFollowRedirects })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ProxyUrl() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.ProxyUrl })
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) TlsConfig() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsHttpTlsConfig, SyntheticMonitoringCheckSettingsHttpTlsConfigOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpTlsConfig {
		return v.TlsConfig
	})
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsHttpTlsConfig, SyntheticMonitoringCheckSettingsHttpTlsConfigOutput]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ValidHttpVersions() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.ValidHttpVersions })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ValidStatusCodes() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsHttp](o, func(v SyntheticMonitoringCheckSettingsHttp) []int { return v.ValidStatusCodes })
	return pulumix.ArrayOutput[int]{OutputState: value.OutputState}
}

type SyntheticMonitoringCheckSettingsHttpBasicAuth struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthArgs struct {
	Password pulumix.Input[string] `pulumi:"password"`
	Username pulumix.Input[string] `pulumi:"username"`
}

func (SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput)
}

func (i *SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsHttpBasicAuthArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsHttpBasicAuth] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsHttpBasicAuth]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) Password() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpBasicAuth](o, func(v SyntheticMonitoringCheckSettingsHttpBasicAuth) string { return v.Password })
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) Username() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpBasicAuth](o, func(v SyntheticMonitoringCheckSettingsHttpBasicAuth) string { return v.Username })
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp struct {
	AllowMissing *bool  `pulumi:"allowMissing"`
	Header       string `pulumi:"header"`
	Regexp       string `pulumi:"regexp"`
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs struct {
	AllowMissing pulumix.Input[*bool]  `pulumi:"allowMissing"`
	Header       pulumix.Input[string] `pulumi:"header"`
	Regexp       pulumix.Input[string] `pulumi:"regexp"`
}

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput)
}

func (i *SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) AllowMissing() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp](o, func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) *bool { return v.AllowMissing })
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Header() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp](o, func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Header })
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Regexp() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp](o, func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Regexp })
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp struct {
	AllowMissing *bool  `pulumi:"allowMissing"`
	Header       string `pulumi:"header"`
	Regexp       string `pulumi:"regexp"`
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs struct {
	AllowMissing pulumix.Input[*bool]  `pulumi:"allowMissing"`
	Header       pulumix.Input[string] `pulumi:"header"`
	Regexp       pulumix.Input[string] `pulumi:"regexp"`
}

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput)
}

func (i *SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) AllowMissing() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp](o, func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) *bool { return v.AllowMissing })
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Header() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp](o, func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Header })
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Regexp() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp](o, func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Regexp })
}

type SyntheticMonitoringCheckSettingsHttpTlsConfig struct {
	CaCert             *string `pulumi:"caCert"`
	ClientCert         *string `pulumi:"clientCert"`
	ClientKey          *string `pulumi:"clientKey"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	ServerName         *string `pulumi:"serverName"`
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigArgs struct {
	CaCert             pulumix.Input[*string] `pulumi:"caCert"`
	ClientCert         pulumix.Input[*string] `pulumi:"clientCert"`
	ClientKey          pulumix.Input[*string] `pulumi:"clientKey"`
	InsecureSkipVerify pulumix.Input[*bool]   `pulumi:"insecureSkipVerify"`
	ServerName         pulumix.Input[*string] `pulumi:"serverName"`
}

func (SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput)
}

func (i *SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsHttpTlsConfigArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsHttpTlsConfig] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsHttpTlsConfig]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) CaCert() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.CaCert })
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ClientCert() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ClientCert })
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ClientKey() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ClientKey })
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) InsecureSkipVerify() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *bool { return v.InsecureSkipVerify })
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ServerName() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsHttpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ServerName })
}

type SyntheticMonitoringCheckSettingsPing struct {
	DontFragment    *bool   `pulumi:"dontFragment"`
	IpVersion       *string `pulumi:"ipVersion"`
	PayloadSize     *int    `pulumi:"payloadSize"`
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
}

type SyntheticMonitoringCheckSettingsPingArgs struct {
	DontFragment    pulumix.Input[*bool]   `pulumi:"dontFragment"`
	IpVersion       pulumix.Input[*string] `pulumi:"ipVersion"`
	PayloadSize     pulumix.Input[*int]    `pulumi:"payloadSize"`
	SourceIpAddress pulumix.Input[*string] `pulumi:"sourceIpAddress"`
}

func (SyntheticMonitoringCheckSettingsPingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput {
	return i.ToSyntheticMonitoringCheckSettingsPingOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPingOutput)
}

func (i *SyntheticMonitoringCheckSettingsPingArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsPingArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsPingOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsPingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsPing] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsPing]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsPingOutput) DontFragment() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsPing](o, func(v SyntheticMonitoringCheckSettingsPing) *bool { return v.DontFragment })
}

func (o SyntheticMonitoringCheckSettingsPingOutput) IpVersion() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsPing](o, func(v SyntheticMonitoringCheckSettingsPing) *string { return v.IpVersion })
}

func (o SyntheticMonitoringCheckSettingsPingOutput) PayloadSize() pulumix.Output[*int] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsPing](o, func(v SyntheticMonitoringCheckSettingsPing) *int { return v.PayloadSize })
}

func (o SyntheticMonitoringCheckSettingsPingOutput) SourceIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsPing](o, func(v SyntheticMonitoringCheckSettingsPing) *string { return v.SourceIpAddress })
}

type SyntheticMonitoringCheckSettingsTcp struct {
	IpVersion       *string                                            `pulumi:"ipVersion"`
	QueryResponses  []SyntheticMonitoringCheckSettingsTcpQueryResponse `pulumi:"queryResponses"`
	SourceIpAddress *string                                            `pulumi:"sourceIpAddress"`
	Tls             *bool                                              `pulumi:"tls"`
	TlsConfig       *SyntheticMonitoringCheckSettingsTcpTlsConfig      `pulumi:"tlsConfig"`
}

type SyntheticMonitoringCheckSettingsTcpArgs struct {
	IpVersion       pulumix.Input[*string]                                                 `pulumi:"ipVersion"`
	QueryResponses  pulumix.Input[[]*SyntheticMonitoringCheckSettingsTcpQueryResponseArgs] `pulumi:"queryResponses"`
	SourceIpAddress pulumix.Input[*string]                                                 `pulumi:"sourceIpAddress"`
	Tls             pulumix.Input[*bool]                                                   `pulumi:"tls"`
	TlsConfig       pulumix.Input[*SyntheticMonitoringCheckSettingsTcpTlsConfigArgs]       `pulumi:"tlsConfig"`
}

func (SyntheticMonitoringCheckSettingsTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpOutput)
}

func (i *SyntheticMonitoringCheckSettingsTcpArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsTcpArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsTcpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsTcp] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsTcp]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) IpVersion() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcp](o, func(v SyntheticMonitoringCheckSettingsTcp) *string { return v.IpVersion })
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) QueryResponses() pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsTcpQueryResponse, SyntheticMonitoringCheckSettingsTcpQueryResponseOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsTcp](o, func(v SyntheticMonitoringCheckSettingsTcp) []SyntheticMonitoringCheckSettingsTcpQueryResponse {
		return v.QueryResponses
	})
	return pulumix.GArrayOutput[SyntheticMonitoringCheckSettingsTcpQueryResponse, SyntheticMonitoringCheckSettingsTcpQueryResponseOutput]{OutputState: value.OutputState}
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) SourceIpAddress() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcp](o, func(v SyntheticMonitoringCheckSettingsTcp) *string { return v.SourceIpAddress })
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) Tls() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcp](o, func(v SyntheticMonitoringCheckSettingsTcp) *bool { return v.Tls })
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) TlsConfig() pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsTcpTlsConfig, SyntheticMonitoringCheckSettingsTcpTlsConfigOutput] {
	value := pulumix.Apply[SyntheticMonitoringCheckSettingsTcp](o, func(v SyntheticMonitoringCheckSettingsTcp) *SyntheticMonitoringCheckSettingsTcpTlsConfig {
		return v.TlsConfig
	})
	return pulumix.GPtrOutput[SyntheticMonitoringCheckSettingsTcpTlsConfig, SyntheticMonitoringCheckSettingsTcpTlsConfigOutput]{OutputState: value.OutputState}
}

type SyntheticMonitoringCheckSettingsTcpQueryResponse struct {
	Expect   string `pulumi:"expect"`
	Send     string `pulumi:"send"`
	StartTls *bool  `pulumi:"startTls"`
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseArgs struct {
	Expect   pulumix.Input[string] `pulumi:"expect"`
	Send     pulumix.Input[string] `pulumi:"send"`
	StartTls pulumix.Input[*bool]  `pulumi:"startTls"`
}

func (SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput)
}

func (i *SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsTcpQueryResponseArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsTcpQueryResponse] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsTcpQueryResponse]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) Expect() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpQueryResponse](o, func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) string { return v.Expect })
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) Send() pulumix.Output[string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpQueryResponse](o, func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) string { return v.Send })
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) StartTls() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpQueryResponse](o, func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) *bool { return v.StartTls })
}

type SyntheticMonitoringCheckSettingsTcpTlsConfig struct {
	CaCert             *string `pulumi:"caCert"`
	ClientCert         *string `pulumi:"clientCert"`
	ClientKey          *string `pulumi:"clientKey"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	ServerName         *string `pulumi:"serverName"`
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigArgs struct {
	CaCert             pulumix.Input[*string] `pulumi:"caCert"`
	ClientCert         pulumix.Input[*string] `pulumi:"clientCert"`
	ClientKey          pulumix.Input[*string] `pulumi:"clientKey"`
	InsecureSkipVerify pulumix.Input[*bool]   `pulumi:"insecureSkipVerify"`
	ServerName         pulumix.Input[*string] `pulumi:"serverName"`
}

func (SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput)
}

func (i *SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsTcpTlsConfigArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsTcpTlsConfig] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsTcpTlsConfig]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) CaCert() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.CaCert })
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ClientCert() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ClientCert })
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ClientKey() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ClientKey })
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) InsecureSkipVerify() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *bool { return v.InsecureSkipVerify })
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ServerName() pulumix.Output[*string] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTcpTlsConfig](o, func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ServerName })
}

type SyntheticMonitoringCheckSettingsTraceroute struct {
	MaxHops        *int  `pulumi:"maxHops"`
	MaxUnknownHops *int  `pulumi:"maxUnknownHops"`
	PtrLookup      *bool `pulumi:"ptrLookup"`
}

type SyntheticMonitoringCheckSettingsTracerouteArgs struct {
	MaxHops        pulumix.Input[*int]  `pulumi:"maxHops"`
	MaxUnknownHops pulumix.Input[*int]  `pulumi:"maxUnknownHops"`
	PtrLookup      pulumix.Input[*bool] `pulumi:"ptrLookup"`
}

func (SyntheticMonitoringCheckSettingsTracerouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return i.ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTracerouteOutput)
}

func (i *SyntheticMonitoringCheckSettingsTracerouteArgs) ToOutput(ctx context.Context) pulumix.Output[*SyntheticMonitoringCheckSettingsTracerouteArgs] {
	return pulumix.Val(i)
}

type SyntheticMonitoringCheckSettingsTracerouteOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTracerouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringCheckSettingsTraceroute] {
	return pulumix.Output[SyntheticMonitoringCheckSettingsTraceroute]{
		OutputState: o.OutputState,
	}
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) MaxHops() pulumix.Output[*int] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTraceroute](o, func(v SyntheticMonitoringCheckSettingsTraceroute) *int { return v.MaxHops })
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) MaxUnknownHops() pulumix.Output[*int] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTraceroute](o, func(v SyntheticMonitoringCheckSettingsTraceroute) *int { return v.MaxUnknownHops })
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) PtrLookup() pulumix.Output[*bool] {
	return pulumix.Apply[SyntheticMonitoringCheckSettingsTraceroute](o, func(v SyntheticMonitoringCheckSettingsTraceroute) *bool { return v.PtrLookup })
}

type TeamPreferences struct {
	HomeDashboardUid *string `pulumi:"homeDashboardUid"`
	Theme            *string `pulumi:"theme"`
	Timezone         *string `pulumi:"timezone"`
}

type TeamPreferencesArgs struct {
	HomeDashboardUid pulumix.Input[*string] `pulumi:"homeDashboardUid"`
	Theme            pulumix.Input[*string] `pulumi:"theme"`
	Timezone         pulumix.Input[*string] `pulumi:"timezone"`
}

func (TeamPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamPreferences)(nil)).Elem()
}

func (i TeamPreferencesArgs) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return i.ToTeamPreferencesOutputWithContext(context.Background())
}

func (i TeamPreferencesArgs) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesOutput)
}

func (i *TeamPreferencesArgs) ToOutput(ctx context.Context) pulumix.Output[*TeamPreferencesArgs] {
	return pulumix.Val(i)
}

type TeamPreferencesOutput struct{ *pulumi.OutputState }

func (TeamPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return o
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return o
}

func (o TeamPreferencesOutput) ToOutput(ctx context.Context) pulumix.Output[TeamPreferences] {
	return pulumix.Output[TeamPreferences]{
		OutputState: o.OutputState,
	}
}

func (o TeamPreferencesOutput) HomeDashboardUid() pulumix.Output[*string] {
	return pulumix.Apply[TeamPreferences](o, func(v TeamPreferences) *string { return v.HomeDashboardUid })
}

func (o TeamPreferencesOutput) Theme() pulumix.Output[*string] {
	return pulumix.Apply[TeamPreferences](o, func(v TeamPreferences) *string { return v.Theme })
}

func (o TeamPreferencesOutput) Timezone() pulumix.Output[*string] {
	return pulumix.Apply[TeamPreferences](o, func(v TeamPreferences) *string { return v.Timezone })
}

type TeamTeamSync struct {
	Groups []string `pulumi:"groups"`
}

type TeamTeamSyncArgs struct {
	Groups pulumix.Input[[]string] `pulumi:"groups"`
}

func (TeamTeamSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamTeamSync)(nil)).Elem()
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncOutput() TeamTeamSyncOutput {
	return i.ToTeamTeamSyncOutputWithContext(context.Background())
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncOutputWithContext(ctx context.Context) TeamTeamSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamTeamSyncOutput)
}

func (i *TeamTeamSyncArgs) ToOutput(ctx context.Context) pulumix.Output[*TeamTeamSyncArgs] {
	return pulumix.Val(i)
}

type TeamTeamSyncOutput struct{ *pulumi.OutputState }

func (TeamTeamSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamTeamSync)(nil)).Elem()
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncOutput() TeamTeamSyncOutput {
	return o
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncOutputWithContext(ctx context.Context) TeamTeamSyncOutput {
	return o
}

func (o TeamTeamSyncOutput) ToOutput(ctx context.Context) pulumix.Output[TeamTeamSync] {
	return pulumix.Output[TeamTeamSync]{
		OutputState: o.OutputState,
	}
}

func (o TeamTeamSyncOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[TeamTeamSync](o, func(v TeamTeamSync) []string { return v.Groups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetDashboardsDashboard struct {
	FolderTitle string `pulumi:"folderTitle"`
	Title       string `pulumi:"title"`
	Uid         string `pulumi:"uid"`
}

type GetDashboardsDashboardArgs struct {
	FolderTitle pulumix.Input[string] `pulumi:"folderTitle"`
	Title       pulumix.Input[string] `pulumi:"title"`
	Uid         pulumix.Input[string] `pulumi:"uid"`
}

func (GetDashboardsDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return i.ToGetDashboardsDashboardOutputWithContext(context.Background())
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardsDashboardOutput)
}

func (i *GetDashboardsDashboardArgs) ToOutput(ctx context.Context) pulumix.Output[*GetDashboardsDashboardArgs] {
	return pulumix.Val(i)
}

type GetDashboardsDashboardOutput struct{ *pulumi.OutputState }

func (GetDashboardsDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) ToOutput(ctx context.Context) pulumix.Output[GetDashboardsDashboard] {
	return pulumix.Output[GetDashboardsDashboard]{
		OutputState: o.OutputState,
	}
}

func (o GetDashboardsDashboardOutput) FolderTitle() pulumix.Output[string] {
	return pulumix.Apply[GetDashboardsDashboard](o, func(v GetDashboardsDashboard) string { return v.FolderTitle })
}

func (o GetDashboardsDashboardOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[GetDashboardsDashboard](o, func(v GetDashboardsDashboard) string { return v.Title })
}

func (o GetDashboardsDashboardOutput) Uid() pulumix.Output[string] {
	return pulumix.Apply[GetDashboardsDashboard](o, func(v GetDashboardsDashboard) string { return v.Uid })
}

type GetFoldersFolder struct {
	// The ID of this resource.
	Id    int    `pulumi:"id"`
	Title string `pulumi:"title"`
	Uid   string `pulumi:"uid"`
	Url   string `pulumi:"url"`
}

type GetFoldersFolderArgs struct {
	// The ID of this resource.
	Id    pulumix.Input[int]    `pulumi:"id"`
	Title pulumix.Input[string] `pulumi:"title"`
	Uid   pulumix.Input[string] `pulumi:"uid"`
	Url   pulumix.Input[string] `pulumi:"url"`
}

func (GetFoldersFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return i.ToGetFoldersFolderOutputWithContext(context.Background())
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFoldersFolderOutput)
}

func (i *GetFoldersFolderArgs) ToOutput(ctx context.Context) pulumix.Output[*GetFoldersFolderArgs] {
	return pulumix.Val(i)
}

type GetFoldersFolderOutput struct{ *pulumi.OutputState }

func (GetFoldersFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return o
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return o
}

func (o GetFoldersFolderOutput) ToOutput(ctx context.Context) pulumix.Output[GetFoldersFolder] {
	return pulumix.Output[GetFoldersFolder]{
		OutputState: o.OutputState,
	}
}

// The ID of this resource.
func (o GetFoldersFolderOutput) Id() pulumix.Output[int] {
	return pulumix.Apply[GetFoldersFolder](o, func(v GetFoldersFolder) int { return v.Id })
}

func (o GetFoldersFolderOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[GetFoldersFolder](o, func(v GetFoldersFolder) string { return v.Title })
}

func (o GetFoldersFolderOutput) Uid() pulumix.Output[string] {
	return pulumix.Apply[GetFoldersFolder](o, func(v GetFoldersFolder) string { return v.Uid })
}

func (o GetFoldersFolderOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[GetFoldersFolder](o, func(v GetFoldersFolder) string { return v.Url })
}

type GetRolePermission struct {
	Action string  `pulumi:"action"`
	Scope  *string `pulumi:"scope"`
}

type GetRolePermissionArgs struct {
	Action pulumix.Input[string]  `pulumi:"action"`
	Scope  pulumix.Input[*string] `pulumi:"scope"`
}

func (GetRolePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePermission)(nil)).Elem()
}

func (i GetRolePermissionArgs) ToGetRolePermissionOutput() GetRolePermissionOutput {
	return i.ToGetRolePermissionOutputWithContext(context.Background())
}

func (i GetRolePermissionArgs) ToGetRolePermissionOutputWithContext(ctx context.Context) GetRolePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePermissionOutput)
}

func (i *GetRolePermissionArgs) ToOutput(ctx context.Context) pulumix.Output[*GetRolePermissionArgs] {
	return pulumix.Val(i)
}

type GetRolePermissionOutput struct{ *pulumi.OutputState }

func (GetRolePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePermission)(nil)).Elem()
}

func (o GetRolePermissionOutput) ToGetRolePermissionOutput() GetRolePermissionOutput {
	return o
}

func (o GetRolePermissionOutput) ToGetRolePermissionOutputWithContext(ctx context.Context) GetRolePermissionOutput {
	return o
}

func (o GetRolePermissionOutput) ToOutput(ctx context.Context) pulumix.Output[GetRolePermission] {
	return pulumix.Output[GetRolePermission]{
		OutputState: o.OutputState,
	}
}

func (o GetRolePermissionOutput) Action() pulumix.Output[string] {
	return pulumix.Apply[GetRolePermission](o, func(v GetRolePermission) string { return v.Action })
}

func (o GetRolePermissionOutput) Scope() pulumix.Output[*string] {
	return pulumix.Apply[GetRolePermission](o, func(v GetRolePermission) *string { return v.Scope })
}

type GetSlosSlo struct {
	Alertings   []GetSlosSloAlerting  `pulumi:"alertings"`
	Description string                `pulumi:"description"`
	Labels      []GetSlosSloLabel     `pulumi:"labels"`
	Name        string                `pulumi:"name"`
	Objectives  []GetSlosSloObjective `pulumi:"objectives"`
	Queries     []GetSlosSloQuery     `pulumi:"queries"`
	Uuid        string                `pulumi:"uuid"`
}

type GetSlosSloArgs struct {
	Alertings   pulumix.Input[[]*GetSlosSloAlertingArgs]  `pulumi:"alertings"`
	Description pulumix.Input[string]                     `pulumi:"description"`
	Labels      pulumix.Input[[]*GetSlosSloLabelArgs]     `pulumi:"labels"`
	Name        pulumix.Input[string]                     `pulumi:"name"`
	Objectives  pulumix.Input[[]*GetSlosSloObjectiveArgs] `pulumi:"objectives"`
	Queries     pulumix.Input[[]*GetSlosSloQueryArgs]     `pulumi:"queries"`
	Uuid        pulumix.Input[string]                     `pulumi:"uuid"`
}

func (GetSlosSloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSlo)(nil)).Elem()
}

func (i GetSlosSloArgs) ToGetSlosSloOutput() GetSlosSloOutput {
	return i.ToGetSlosSloOutputWithContext(context.Background())
}

func (i GetSlosSloArgs) ToGetSlosSloOutputWithContext(ctx context.Context) GetSlosSloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloOutput)
}

func (i *GetSlosSloArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloArgs] {
	return pulumix.Val(i)
}

type GetSlosSloOutput struct{ *pulumi.OutputState }

func (GetSlosSloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSlo)(nil)).Elem()
}

func (o GetSlosSloOutput) ToGetSlosSloOutput() GetSlosSloOutput {
	return o
}

func (o GetSlosSloOutput) ToGetSlosSloOutputWithContext(ctx context.Context) GetSlosSloOutput {
	return o
}

func (o GetSlosSloOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSlo] {
	return pulumix.Output[GetSlosSlo]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloOutput) Alertings() pulumix.GArrayOutput[GetSlosSloAlerting, GetSlosSloAlertingOutput] {
	value := pulumix.Apply[GetSlosSlo](o, func(v GetSlosSlo) []GetSlosSloAlerting { return v.Alertings })
	return pulumix.GArrayOutput[GetSlosSloAlerting, GetSlosSloAlertingOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSlo](o, func(v GetSlosSlo) string { return v.Description })
}

func (o GetSlosSloOutput) Labels() pulumix.GArrayOutput[GetSlosSloLabel, GetSlosSloLabelOutput] {
	value := pulumix.Apply[GetSlosSlo](o, func(v GetSlosSlo) []GetSlosSloLabel { return v.Labels })
	return pulumix.GArrayOutput[GetSlosSloLabel, GetSlosSloLabelOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSlo](o, func(v GetSlosSlo) string { return v.Name })
}

func (o GetSlosSloOutput) Objectives() pulumix.GArrayOutput[GetSlosSloObjective, GetSlosSloObjectiveOutput] {
	value := pulumix.Apply[GetSlosSlo](o, func(v GetSlosSlo) []GetSlosSloObjective { return v.Objectives })
	return pulumix.GArrayOutput[GetSlosSloObjective, GetSlosSloObjectiveOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloOutput) Queries() pulumix.GArrayOutput[GetSlosSloQuery, GetSlosSloQueryOutput] {
	value := pulumix.Apply[GetSlosSlo](o, func(v GetSlosSlo) []GetSlosSloQuery { return v.Queries })
	return pulumix.GArrayOutput[GetSlosSloQuery, GetSlosSloQueryOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloOutput) Uuid() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSlo](o, func(v GetSlosSlo) string { return v.Uuid })
}

type GetSlosSloAlerting struct {
	Annotations []GetSlosSloAlertingAnnotation `pulumi:"annotations"`
	Fastburns   []GetSlosSloAlertingFastburn   `pulumi:"fastburns"`
	Labels      []GetSlosSloAlertingLabel      `pulumi:"labels"`
	Slowburns   []GetSlosSloAlertingSlowburn   `pulumi:"slowburns"`
}

type GetSlosSloAlertingArgs struct {
	Annotations pulumix.Input[[]*GetSlosSloAlertingAnnotationArgs] `pulumi:"annotations"`
	Fastburns   pulumix.Input[[]*GetSlosSloAlertingFastburnArgs]   `pulumi:"fastburns"`
	Labels      pulumix.Input[[]*GetSlosSloAlertingLabelArgs]      `pulumi:"labels"`
	Slowburns   pulumix.Input[[]*GetSlosSloAlertingSlowburnArgs]   `pulumi:"slowburns"`
}

func (GetSlosSloAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlerting)(nil)).Elem()
}

func (i GetSlosSloAlertingArgs) ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput {
	return i.ToGetSlosSloAlertingOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingArgs) ToGetSlosSloAlertingOutputWithContext(ctx context.Context) GetSlosSloAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingOutput)
}

func (i *GetSlosSloAlertingArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlerting)(nil)).Elem()
}

func (o GetSlosSloAlertingOutput) ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput {
	return o
}

func (o GetSlosSloAlertingOutput) ToGetSlosSloAlertingOutputWithContext(ctx context.Context) GetSlosSloAlertingOutput {
	return o
}

func (o GetSlosSloAlertingOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlerting] {
	return pulumix.Output[GetSlosSloAlerting]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingOutput) Annotations() pulumix.GArrayOutput[GetSlosSloAlertingAnnotation, GetSlosSloAlertingAnnotationOutput] {
	value := pulumix.Apply[GetSlosSloAlerting](o, func(v GetSlosSloAlerting) []GetSlosSloAlertingAnnotation { return v.Annotations })
	return pulumix.GArrayOutput[GetSlosSloAlertingAnnotation, GetSlosSloAlertingAnnotationOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloAlertingOutput) Fastburns() pulumix.GArrayOutput[GetSlosSloAlertingFastburn, GetSlosSloAlertingFastburnOutput] {
	value := pulumix.Apply[GetSlosSloAlerting](o, func(v GetSlosSloAlerting) []GetSlosSloAlertingFastburn { return v.Fastburns })
	return pulumix.GArrayOutput[GetSlosSloAlertingFastburn, GetSlosSloAlertingFastburnOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloAlertingOutput) Labels() pulumix.GArrayOutput[GetSlosSloAlertingLabel, GetSlosSloAlertingLabelOutput] {
	value := pulumix.Apply[GetSlosSloAlerting](o, func(v GetSlosSloAlerting) []GetSlosSloAlertingLabel { return v.Labels })
	return pulumix.GArrayOutput[GetSlosSloAlertingLabel, GetSlosSloAlertingLabelOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloAlertingOutput) Slowburns() pulumix.GArrayOutput[GetSlosSloAlertingSlowburn, GetSlosSloAlertingSlowburnOutput] {
	value := pulumix.Apply[GetSlosSloAlerting](o, func(v GetSlosSloAlerting) []GetSlosSloAlertingSlowburn { return v.Slowburns })
	return pulumix.GArrayOutput[GetSlosSloAlertingSlowburn, GetSlosSloAlertingSlowburnOutput]{OutputState: value.OutputState}
}

type GetSlosSloAlertingAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetSlosSloAlertingAnnotationArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetSlosSloAlertingAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingAnnotationArgs) ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput {
	return i.ToGetSlosSloAlertingAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAnnotationArgs) ToGetSlosSloAlertingAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAnnotationOutput)
}

func (i *GetSlosSloAlertingAnnotationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingAnnotationArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingAnnotationOutput) ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationOutput) ToGetSlosSloAlertingAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingAnnotation] {
	return pulumix.Output[GetSlosSloAlertingAnnotation]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingAnnotationOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingAnnotation](o, func(v GetSlosSloAlertingAnnotation) string { return v.Key })
}

func (o GetSlosSloAlertingAnnotationOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingAnnotation](o, func(v GetSlosSloAlertingAnnotation) string { return v.Value })
}

type GetSlosSloAlertingFastburn struct {
	Annotations []GetSlosSloAlertingFastburnAnnotation `pulumi:"annotations"`
	Labels      []GetSlosSloAlertingFastburnLabel      `pulumi:"labels"`
}

type GetSlosSloAlertingFastburnArgs struct {
	Annotations pulumix.Input[[]*GetSlosSloAlertingFastburnAnnotationArgs] `pulumi:"annotations"`
	Labels      pulumix.Input[[]*GetSlosSloAlertingFastburnLabelArgs]      `pulumi:"labels"`
}

func (GetSlosSloAlertingFastburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput {
	return i.ToGetSlosSloAlertingFastburnOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnOutput)
}

func (i *GetSlosSloAlertingFastburnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingFastburnArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingFastburnOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput {
	return o
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnOutput {
	return o
}

func (o GetSlosSloAlertingFastburnOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingFastburn] {
	return pulumix.Output[GetSlosSloAlertingFastburn]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingFastburnOutput) Annotations() pulumix.GArrayOutput[GetSlosSloAlertingFastburnAnnotation, GetSlosSloAlertingFastburnAnnotationOutput] {
	value := pulumix.Apply[GetSlosSloAlertingFastburn](o, func(v GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnAnnotation { return v.Annotations })
	return pulumix.GArrayOutput[GetSlosSloAlertingFastburnAnnotation, GetSlosSloAlertingFastburnAnnotationOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloAlertingFastburnOutput) Labels() pulumix.GArrayOutput[GetSlosSloAlertingFastburnLabel, GetSlosSloAlertingFastburnLabelOutput] {
	value := pulumix.Apply[GetSlosSloAlertingFastburn](o, func(v GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnLabel { return v.Labels })
	return pulumix.GArrayOutput[GetSlosSloAlertingFastburnLabel, GetSlosSloAlertingFastburnLabelOutput]{OutputState: value.OutputState}
}

type GetSlosSloAlertingFastburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetSlosSloAlertingFastburnAnnotationArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetSlosSloAlertingFastburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnAnnotationArgs) ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput {
	return i.ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnAnnotationArgs) ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnAnnotationOutput)
}

func (i *GetSlosSloAlertingFastburnAnnotationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingFastburnAnnotationArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingFastburnAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingFastburnAnnotation] {
	return pulumix.Output[GetSlosSloAlertingFastburnAnnotation]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingFastburnAnnotation](o, func(v GetSlosSloAlertingFastburnAnnotation) string { return v.Key })
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingFastburnAnnotation](o, func(v GetSlosSloAlertingFastburnAnnotation) string { return v.Value })
}

type GetSlosSloAlertingFastburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetSlosSloAlertingFastburnLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetSlosSloAlertingFastburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnLabelArgs) ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput {
	return i.ToGetSlosSloAlertingFastburnLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnLabelArgs) ToGetSlosSloAlertingFastburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnLabelOutput)
}

func (i *GetSlosSloAlertingFastburnLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingFastburnLabelArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingFastburnLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnLabelOutput) ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelOutput) ToGetSlosSloAlertingFastburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingFastburnLabel] {
	return pulumix.Output[GetSlosSloAlertingFastburnLabel]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingFastburnLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingFastburnLabel](o, func(v GetSlosSloAlertingFastburnLabel) string { return v.Key })
}

func (o GetSlosSloAlertingFastburnLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingFastburnLabel](o, func(v GetSlosSloAlertingFastburnLabel) string { return v.Value })
}

type GetSlosSloAlertingLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetSlosSloAlertingLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetSlosSloAlertingLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingLabelArgs) ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput {
	return i.ToGetSlosSloAlertingLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingLabelArgs) ToGetSlosSloAlertingLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingLabelOutput)
}

func (i *GetSlosSloAlertingLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingLabelArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingLabelOutput) ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput {
	return o
}

func (o GetSlosSloAlertingLabelOutput) ToGetSlosSloAlertingLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelOutput {
	return o
}

func (o GetSlosSloAlertingLabelOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingLabel] {
	return pulumix.Output[GetSlosSloAlertingLabel]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingLabel](o, func(v GetSlosSloAlertingLabel) string { return v.Key })
}

func (o GetSlosSloAlertingLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingLabel](o, func(v GetSlosSloAlertingLabel) string { return v.Value })
}

type GetSlosSloAlertingSlowburn struct {
	Annotations []GetSlosSloAlertingSlowburnAnnotation `pulumi:"annotations"`
	Labels      []GetSlosSloAlertingSlowburnLabel      `pulumi:"labels"`
}

type GetSlosSloAlertingSlowburnArgs struct {
	Annotations pulumix.Input[[]*GetSlosSloAlertingSlowburnAnnotationArgs] `pulumi:"annotations"`
	Labels      pulumix.Input[[]*GetSlosSloAlertingSlowburnLabelArgs]      `pulumi:"labels"`
}

func (GetSlosSloAlertingSlowburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput {
	return i.ToGetSlosSloAlertingSlowburnOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnOutput)
}

func (i *GetSlosSloAlertingSlowburnArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingSlowburnArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingSlowburnOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingSlowburn] {
	return pulumix.Output[GetSlosSloAlertingSlowburn]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingSlowburnOutput) Annotations() pulumix.GArrayOutput[GetSlosSloAlertingSlowburnAnnotation, GetSlosSloAlertingSlowburnAnnotationOutput] {
	value := pulumix.Apply[GetSlosSloAlertingSlowburn](o, func(v GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnAnnotation { return v.Annotations })
	return pulumix.GArrayOutput[GetSlosSloAlertingSlowburnAnnotation, GetSlosSloAlertingSlowburnAnnotationOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloAlertingSlowburnOutput) Labels() pulumix.GArrayOutput[GetSlosSloAlertingSlowburnLabel, GetSlosSloAlertingSlowburnLabelOutput] {
	value := pulumix.Apply[GetSlosSloAlertingSlowburn](o, func(v GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnLabel { return v.Labels })
	return pulumix.GArrayOutput[GetSlosSloAlertingSlowburnLabel, GetSlosSloAlertingSlowburnLabelOutput]{OutputState: value.OutputState}
}

type GetSlosSloAlertingSlowburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetSlosSloAlertingSlowburnAnnotationArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetSlosSloAlertingSlowburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnAnnotationArgs) ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput {
	return i.ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnAnnotationArgs) ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnAnnotationOutput)
}

func (i *GetSlosSloAlertingSlowburnAnnotationArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingSlowburnAnnotationArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingSlowburnAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingSlowburnAnnotation] {
	return pulumix.Output[GetSlosSloAlertingSlowburnAnnotation]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingSlowburnAnnotation](o, func(v GetSlosSloAlertingSlowburnAnnotation) string { return v.Key })
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingSlowburnAnnotation](o, func(v GetSlosSloAlertingSlowburnAnnotation) string { return v.Value })
}

type GetSlosSloAlertingSlowburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetSlosSloAlertingSlowburnLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetSlosSloAlertingSlowburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnLabelArgs) ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput {
	return i.ToGetSlosSloAlertingSlowburnLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnLabelArgs) ToGetSlosSloAlertingSlowburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnLabelOutput)
}

func (i *GetSlosSloAlertingSlowburnLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloAlertingSlowburnLabelArgs] {
	return pulumix.Val(i)
}

type GetSlosSloAlertingSlowburnLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnLabelOutput) ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelOutput) ToGetSlosSloAlertingSlowburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloAlertingSlowburnLabel] {
	return pulumix.Output[GetSlosSloAlertingSlowburnLabel]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloAlertingSlowburnLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingSlowburnLabel](o, func(v GetSlosSloAlertingSlowburnLabel) string { return v.Key })
}

func (o GetSlosSloAlertingSlowburnLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloAlertingSlowburnLabel](o, func(v GetSlosSloAlertingSlowburnLabel) string { return v.Value })
}

type GetSlosSloLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type GetSlosSloLabelArgs struct {
	Key   pulumix.Input[string] `pulumi:"key"`
	Value pulumix.Input[string] `pulumi:"value"`
}

func (GetSlosSloLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloLabel)(nil)).Elem()
}

func (i GetSlosSloLabelArgs) ToGetSlosSloLabelOutput() GetSlosSloLabelOutput {
	return i.ToGetSlosSloLabelOutputWithContext(context.Background())
}

func (i GetSlosSloLabelArgs) ToGetSlosSloLabelOutputWithContext(ctx context.Context) GetSlosSloLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloLabelOutput)
}

func (i *GetSlosSloLabelArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloLabelArgs] {
	return pulumix.Val(i)
}

type GetSlosSloLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloLabel)(nil)).Elem()
}

func (o GetSlosSloLabelOutput) ToGetSlosSloLabelOutput() GetSlosSloLabelOutput {
	return o
}

func (o GetSlosSloLabelOutput) ToGetSlosSloLabelOutputWithContext(ctx context.Context) GetSlosSloLabelOutput {
	return o
}

func (o GetSlosSloLabelOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloLabel] {
	return pulumix.Output[GetSlosSloLabel]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloLabelOutput) Key() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloLabel](o, func(v GetSlosSloLabel) string { return v.Key })
}

func (o GetSlosSloLabelOutput) Value() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloLabel](o, func(v GetSlosSloLabel) string { return v.Value })
}

type GetSlosSloObjective struct {
	Value  float64 `pulumi:"value"`
	Window string  `pulumi:"window"`
}

type GetSlosSloObjectiveArgs struct {
	Value  pulumix.Input[float64] `pulumi:"value"`
	Window pulumix.Input[string]  `pulumi:"window"`
}

func (GetSlosSloObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloObjective)(nil)).Elem()
}

func (i GetSlosSloObjectiveArgs) ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput {
	return i.ToGetSlosSloObjectiveOutputWithContext(context.Background())
}

func (i GetSlosSloObjectiveArgs) ToGetSlosSloObjectiveOutputWithContext(ctx context.Context) GetSlosSloObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloObjectiveOutput)
}

func (i *GetSlosSloObjectiveArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloObjectiveArgs] {
	return pulumix.Val(i)
}

type GetSlosSloObjectiveOutput struct{ *pulumi.OutputState }

func (GetSlosSloObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloObjective)(nil)).Elem()
}

func (o GetSlosSloObjectiveOutput) ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput {
	return o
}

func (o GetSlosSloObjectiveOutput) ToGetSlosSloObjectiveOutputWithContext(ctx context.Context) GetSlosSloObjectiveOutput {
	return o
}

func (o GetSlosSloObjectiveOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloObjective] {
	return pulumix.Output[GetSlosSloObjective]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloObjectiveOutput) Value() pulumix.Output[float64] {
	return pulumix.Apply[GetSlosSloObjective](o, func(v GetSlosSloObjective) float64 { return v.Value })
}

func (o GetSlosSloObjectiveOutput) Window() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloObjective](o, func(v GetSlosSloObjective) string { return v.Window })
}

type GetSlosSloQuery struct {
	Freeform *GetSlosSloQueryFreeform `pulumi:"freeform"`
	Ratio    *GetSlosSloQueryRatio    `pulumi:"ratio"`
	Type     string                   `pulumi:"type"`
}

type GetSlosSloQueryArgs struct {
	Freeform pulumix.Input[*GetSlosSloQueryFreeformArgs] `pulumi:"freeform"`
	Ratio    pulumix.Input[*GetSlosSloQueryRatioArgs]    `pulumi:"ratio"`
	Type     pulumix.Input[string]                       `pulumi:"type"`
}

func (GetSlosSloQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQuery)(nil)).Elem()
}

func (i GetSlosSloQueryArgs) ToGetSlosSloQueryOutput() GetSlosSloQueryOutput {
	return i.ToGetSlosSloQueryOutputWithContext(context.Background())
}

func (i GetSlosSloQueryArgs) ToGetSlosSloQueryOutputWithContext(ctx context.Context) GetSlosSloQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryOutput)
}

func (i *GetSlosSloQueryArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloQueryArgs] {
	return pulumix.Val(i)
}

type GetSlosSloQueryOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQuery)(nil)).Elem()
}

func (o GetSlosSloQueryOutput) ToGetSlosSloQueryOutput() GetSlosSloQueryOutput {
	return o
}

func (o GetSlosSloQueryOutput) ToGetSlosSloQueryOutputWithContext(ctx context.Context) GetSlosSloQueryOutput {
	return o
}

func (o GetSlosSloQueryOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloQuery] {
	return pulumix.Output[GetSlosSloQuery]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloQueryOutput) Freeform() pulumix.GPtrOutput[GetSlosSloQueryFreeform, GetSlosSloQueryFreeformOutput] {
	value := pulumix.Apply[GetSlosSloQuery](o, func(v GetSlosSloQuery) *GetSlosSloQueryFreeform { return v.Freeform })
	return pulumix.GPtrOutput[GetSlosSloQueryFreeform, GetSlosSloQueryFreeformOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloQueryOutput) Ratio() pulumix.GPtrOutput[GetSlosSloQueryRatio, GetSlosSloQueryRatioOutput] {
	value := pulumix.Apply[GetSlosSloQuery](o, func(v GetSlosSloQuery) *GetSlosSloQueryRatio { return v.Ratio })
	return pulumix.GPtrOutput[GetSlosSloQueryRatio, GetSlosSloQueryRatioOutput]{OutputState: value.OutputState}
}

func (o GetSlosSloQueryOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloQuery](o, func(v GetSlosSloQuery) string { return v.Type })
}

type GetSlosSloQueryFreeform struct {
	Query string `pulumi:"query"`
}

type GetSlosSloQueryFreeformArgs struct {
	Query pulumix.Input[string] `pulumi:"query"`
}

func (GetSlosSloQueryFreeformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryFreeform)(nil)).Elem()
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput {
	return i.ToGetSlosSloQueryFreeformOutputWithContext(context.Background())
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryFreeformOutput)
}

func (i *GetSlosSloQueryFreeformArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloQueryFreeformArgs] {
	return pulumix.Val(i)
}

type GetSlosSloQueryFreeformOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryFreeformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryFreeform)(nil)).Elem()
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput {
	return o
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformOutput {
	return o
}

func (o GetSlosSloQueryFreeformOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloQueryFreeform] {
	return pulumix.Output[GetSlosSloQueryFreeform]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloQueryFreeformOutput) Query() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloQueryFreeform](o, func(v GetSlosSloQueryFreeform) string { return v.Query })
}

type GetSlosSloQueryRatio struct {
	GroupByLabels []string `pulumi:"groupByLabels"`
	SuccessMetric string   `pulumi:"successMetric"`
	TotalMetric   string   `pulumi:"totalMetric"`
}

type GetSlosSloQueryRatioArgs struct {
	GroupByLabels pulumix.Input[[]string] `pulumi:"groupByLabels"`
	SuccessMetric pulumix.Input[string]   `pulumi:"successMetric"`
	TotalMetric   pulumix.Input[string]   `pulumi:"totalMetric"`
}

func (GetSlosSloQueryRatioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryRatio)(nil)).Elem()
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput {
	return i.ToGetSlosSloQueryRatioOutputWithContext(context.Background())
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioOutputWithContext(ctx context.Context) GetSlosSloQueryRatioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryRatioOutput)
}

func (i *GetSlosSloQueryRatioArgs) ToOutput(ctx context.Context) pulumix.Output[*GetSlosSloQueryRatioArgs] {
	return pulumix.Val(i)
}

type GetSlosSloQueryRatioOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryRatioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryRatio)(nil)).Elem()
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput {
	return o
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioOutputWithContext(ctx context.Context) GetSlosSloQueryRatioOutput {
	return o
}

func (o GetSlosSloQueryRatioOutput) ToOutput(ctx context.Context) pulumix.Output[GetSlosSloQueryRatio] {
	return pulumix.Output[GetSlosSloQueryRatio]{
		OutputState: o.OutputState,
	}
}

func (o GetSlosSloQueryRatioOutput) GroupByLabels() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetSlosSloQueryRatio](o, func(v GetSlosSloQueryRatio) []string { return v.GroupByLabels })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

func (o GetSlosSloQueryRatioOutput) SuccessMetric() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloQueryRatio](o, func(v GetSlosSloQueryRatio) string { return v.SuccessMetric })
}

func (o GetSlosSloQueryRatioOutput) TotalMetric() pulumix.Output[string] {
	return pulumix.Apply[GetSlosSloQueryRatio](o, func(v GetSlosSloQueryRatio) string { return v.TotalMetric })
}

type GetTeamPreference struct {
	HomeDashboardUid *string `pulumi:"homeDashboardUid"`
	Theme            *string `pulumi:"theme"`
	Timezone         *string `pulumi:"timezone"`
}

type GetTeamPreferenceArgs struct {
	HomeDashboardUid pulumix.Input[*string] `pulumi:"homeDashboardUid"`
	Theme            pulumix.Input[*string] `pulumi:"theme"`
	Timezone         pulumix.Input[*string] `pulumi:"timezone"`
}

func (GetTeamPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamPreference)(nil)).Elem()
}

func (i GetTeamPreferenceArgs) ToGetTeamPreferenceOutput() GetTeamPreferenceOutput {
	return i.ToGetTeamPreferenceOutputWithContext(context.Background())
}

func (i GetTeamPreferenceArgs) ToGetTeamPreferenceOutputWithContext(ctx context.Context) GetTeamPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamPreferenceOutput)
}

func (i *GetTeamPreferenceArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTeamPreferenceArgs] {
	return pulumix.Val(i)
}

type GetTeamPreferenceOutput struct{ *pulumi.OutputState }

func (GetTeamPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamPreference)(nil)).Elem()
}

func (o GetTeamPreferenceOutput) ToGetTeamPreferenceOutput() GetTeamPreferenceOutput {
	return o
}

func (o GetTeamPreferenceOutput) ToGetTeamPreferenceOutputWithContext(ctx context.Context) GetTeamPreferenceOutput {
	return o
}

func (o GetTeamPreferenceOutput) ToOutput(ctx context.Context) pulumix.Output[GetTeamPreference] {
	return pulumix.Output[GetTeamPreference]{
		OutputState: o.OutputState,
	}
}

func (o GetTeamPreferenceOutput) HomeDashboardUid() pulumix.Output[*string] {
	return pulumix.Apply[GetTeamPreference](o, func(v GetTeamPreference) *string { return v.HomeDashboardUid })
}

func (o GetTeamPreferenceOutput) Theme() pulumix.Output[*string] {
	return pulumix.Apply[GetTeamPreference](o, func(v GetTeamPreference) *string { return v.Theme })
}

func (o GetTeamPreferenceOutput) Timezone() pulumix.Output[*string] {
	return pulumix.Apply[GetTeamPreference](o, func(v GetTeamPreference) *string { return v.Timezone })
}

type GetTeamTeamSync struct {
	Groups []string `pulumi:"groups"`
}

type GetTeamTeamSyncArgs struct {
	Groups pulumix.Input[[]string] `pulumi:"groups"`
}

func (GetTeamTeamSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamTeamSync)(nil)).Elem()
}

func (i GetTeamTeamSyncArgs) ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput {
	return i.ToGetTeamTeamSyncOutputWithContext(context.Background())
}

func (i GetTeamTeamSyncArgs) ToGetTeamTeamSyncOutputWithContext(ctx context.Context) GetTeamTeamSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamTeamSyncOutput)
}

func (i *GetTeamTeamSyncArgs) ToOutput(ctx context.Context) pulumix.Output[*GetTeamTeamSyncArgs] {
	return pulumix.Val(i)
}

type GetTeamTeamSyncOutput struct{ *pulumi.OutputState }

func (GetTeamTeamSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamTeamSync)(nil)).Elem()
}

func (o GetTeamTeamSyncOutput) ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput {
	return o
}

func (o GetTeamTeamSyncOutput) ToGetTeamTeamSyncOutputWithContext(ctx context.Context) GetTeamTeamSyncOutput {
	return o
}

func (o GetTeamTeamSyncOutput) ToOutput(ctx context.Context) pulumix.Output[GetTeamTeamSync] {
	return pulumix.Output[GetTeamTeamSync]{
		OutputState: o.OutputState,
	}
}

func (o GetTeamTeamSyncOutput) Groups() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[GetTeamTeamSync](o, func(v GetTeamTeamSync) []string { return v.Groups })
	return pulumix.ArrayOutput[string]{OutputState: value.OutputState}
}

type GetUsersUser struct {
	Email string `pulumi:"email"`
	// The ID of this resource.
	Id      int    `pulumi:"id"`
	IsAdmin bool   `pulumi:"isAdmin"`
	Login   string `pulumi:"login"`
	Name    string `pulumi:"name"`
}

type GetUsersUserArgs struct {
	Email pulumix.Input[string] `pulumi:"email"`
	// The ID of this resource.
	Id      pulumix.Input[int]    `pulumi:"id"`
	IsAdmin pulumix.Input[bool]   `pulumi:"isAdmin"`
	Login   pulumix.Input[string] `pulumi:"login"`
	Name    pulumix.Input[string] `pulumi:"name"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

func (i *GetUsersUserArgs) ToOutput(ctx context.Context) pulumix.Output[*GetUsersUserArgs] {
	return pulumix.Val(i)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToOutput(ctx context.Context) pulumix.Output[GetUsersUser] {
	return pulumix.Output[GetUsersUser]{
		OutputState: o.OutputState,
	}
}

func (o GetUsersUserOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[GetUsersUser](o, func(v GetUsersUser) string { return v.Email })
}

// The ID of this resource.
func (o GetUsersUserOutput) Id() pulumix.Output[int] {
	return pulumix.Apply[GetUsersUser](o, func(v GetUsersUser) int { return v.Id })
}

func (o GetUsersUserOutput) IsAdmin() pulumix.Output[bool] {
	return pulumix.Apply[GetUsersUser](o, func(v GetUsersUser) bool { return v.IsAdmin })
}

func (o GetUsersUserOutput) Login() pulumix.Output[string] {
	return pulumix.Apply[GetUsersUser](o, func(v GetUsersUser) string { return v.Login })
}

func (o GetUsersUserOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[GetUsersUser](o, func(v GetUsersUser) string { return v.Name })
}

func init() {
	pulumi.RegisterOutputType(CloudAccessPolicyRealmOutput{})
	pulumi.RegisterOutputType(CloudAccessPolicyRealmLabelPolicyOutput{})
	pulumi.RegisterOutputType(ContactPointAlertmanagerOutput{})
	pulumi.RegisterOutputType(ContactPointDingdingOutput{})
	pulumi.RegisterOutputType(ContactPointDiscordOutput{})
	pulumi.RegisterOutputType(ContactPointEmailOutput{})
	pulumi.RegisterOutputType(ContactPointGooglechatOutput{})
	pulumi.RegisterOutputType(ContactPointKafkaOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyOutput{})
	pulumi.RegisterOutputType(ContactPointPagerdutyOutput{})
	pulumi.RegisterOutputType(ContactPointPushoverOutput{})
	pulumi.RegisterOutputType(ContactPointSensugoOutput{})
	pulumi.RegisterOutputType(ContactPointSlackOutput{})
	pulumi.RegisterOutputType(ContactPointTeamOutput{})
	pulumi.RegisterOutputType(ContactPointTelegramOutput{})
	pulumi.RegisterOutputType(ContactPointThreemaOutput{})
	pulumi.RegisterOutputType(ContactPointVictoropOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookOutput{})
	pulumi.RegisterOutputType(ContactPointWecomOutput{})
	pulumi.RegisterOutputType(DashboardPermissionPermissionOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionPermissionOutput{})
	pulumi.RegisterOutputType(MachineLearningHolidayCustomPeriodOutput{})
	pulumi.RegisterOutputType(MachineLearningOutlierDetectorAlgorithmOutput{})
	pulumi.RegisterOutputType(MachineLearningOutlierDetectorAlgorithmConfigOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalTimeOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteMsteamsOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteSlackOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteTelegramOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesEmailOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesMicrosoftTeamsOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesPhoneCallOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSlackOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSmsOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesTelegramOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesWebOutput{})
	pulumi.RegisterOutputType(OncallRouteMsteamsOutput{})
	pulumi.RegisterOutputType(OncallRouteSlackOutput{})
	pulumi.RegisterOutputType(OncallRouteTelegramOutput{})
	pulumi.RegisterOutputType(OncallScheduleSlackOutput{})
	pulumi.RegisterOutputType(PlaylistItemOutput{})
	pulumi.RegisterOutputType(ReportScheduleOutput{})
	pulumi.RegisterOutputType(ReportTimeRangeOutput{})
	pulumi.RegisterOutputType(RolePermissionOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataRelativeTimeRangeOutput{})
	pulumi.RegisterOutputType(SLOAlertingOutput{})
	pulumi.RegisterOutputType(SLOAlertingAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnLabelOutput{})
	pulumi.RegisterOutputType(SLOLabelOutput{})
	pulumi.RegisterOutputType(SLOObjectiveOutput{})
	pulumi.RegisterOutputType(SLOQueryOutput{})
	pulumi.RegisterOutputType(SLOQueryFreeformOutput{})
	pulumi.RegisterOutputType(SLOQueryRatioOutput{})
	pulumi.RegisterOutputType(ServiceAccountPermissionPermissionOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsPingOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTracerouteOutput{})
	pulumi.RegisterOutputType(TeamPreferencesOutput{})
	pulumi.RegisterOutputType(TeamTeamSyncOutput{})
	pulumi.RegisterOutputType(GetDashboardsDashboardOutput{})
	pulumi.RegisterOutputType(GetFoldersFolderOutput{})
	pulumi.RegisterOutputType(GetRolePermissionOutput{})
	pulumi.RegisterOutputType(GetSlosSloOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloObjectiveOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryFreeformOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryRatioOutput{})
	pulumi.RegisterOutputType(GetTeamPreferenceOutput{})
	pulumi.RegisterOutputType(GetTeamTeamSyncOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
}
