// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/oncall/latest/on-call-schedules/)
// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.LookupOncallSchedule(ctx, &grafana.LookupOncallScheduleArgs{
//				Name: "example_schedule",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOncallSchedule(ctx *pulumi.Context, args *LookupOncallScheduleArgs, opts ...pulumi.InvokeOption) (*LookupOncallScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOncallScheduleResult
	err := ctx.Invoke("grafana:index/getOncallSchedule:getOncallSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOncallSchedule.
type LookupOncallScheduleArgs struct {
	// The schedule name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getOncallSchedule.
type LookupOncallScheduleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The schedule name.
	Name string `pulumi:"name"`
	// The schedule type.
	Type string `pulumi:"type"`
}

func LookupOncallScheduleOutput(ctx *pulumi.Context, args LookupOncallScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupOncallScheduleResultOutput {
	outputResult := pulumix.ApplyErr[*LookupOncallScheduleArgs](args.ToOutput(), func(plainArgs *LookupOncallScheduleArgs) (*LookupOncallScheduleResult, error) {
		return LookupOncallSchedule(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupOncallScheduleResultOutput, *LookupOncallScheduleResult](outputResult)
}

// A collection of arguments for invoking getOncallSchedule.
type LookupOncallScheduleOutputArgs struct {
	// The schedule name.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupOncallScheduleOutputArgs) ToOutput() pulumix.Output[*LookupOncallScheduleArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupOncallScheduleArgs {
		return &LookupOncallScheduleArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupOncallScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupOncallScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOncallScheduleResult)(nil)).Elem()
}

func (o LookupOncallScheduleResultOutput) ToOutput(context.Context) pulumix.Output[*LookupOncallScheduleResult] {
	return pulumix.Output[*LookupOncallScheduleResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupOncallScheduleResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupOncallScheduleResult](o, func(v *LookupOncallScheduleResult) string { return v.Id })
}

func (o LookupOncallScheduleResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupOncallScheduleResult](o, func(v *LookupOncallScheduleResult) string { return v.Name })
}

func (o LookupOncallScheduleResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupOncallScheduleResult](o, func(v *LookupOncallScheduleResult) string { return v.Type })
}
