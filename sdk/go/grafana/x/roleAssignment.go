// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This resource is available only with Grafana Enterprise 9.2+.
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testRole, err := grafana.NewRole(ctx, "testRole", &grafana.RoleArgs{
//				Uid:     pulumi.String("testrole"),
//				Version: pulumi.Int(1),
//				Global:  pulumi.Bool(true),
//				Permissions: grafana.RolePermissionArray{
//					&grafana.RolePermissionArgs{
//						Action: pulumi.String("org.users:add"),
//						Scope:  pulumi.String("users:*"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			testTeam, err := grafana.NewTeam(ctx, "testTeam", nil)
//			if err != nil {
//				return err
//			}
//			testUser, err := grafana.NewUser(ctx, "testUser", &grafana.UserArgs{
//				Email:    pulumi.String("terraform_user@test.com"),
//				Login:    pulumi.String("terraform_user@test.com"),
//				Password: pulumi.String("password"),
//			})
//			if err != nil {
//				return err
//			}
//			testSa, err := grafana.NewServiceAccount(ctx, "testSa", &grafana.ServiceAccountArgs{
//				Role: pulumi.String("Viewer"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewRoleAssignment(ctx, "test", &grafana.RoleAssignmentArgs{
//				RoleUid: testRole.Uid,
//				Users: pulumi.IntArray{
//					testUser.ID(),
//				},
//				Teams: pulumi.StringArray{
//					testTeam.ID(),
//				},
//				ServiceAccounts: pulumi.StringArray{
//					testSa.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RoleAssignment struct {
	pulumi.CustomResourceState

	// Grafana RBAC role UID.
	RoleUid pulumix.Output[string] `pulumi:"roleUid"`
	// IDs of service accounts that the role should be assigned to.
	ServiceAccounts pulumix.ArrayOutput[string] `pulumi:"serviceAccounts"`
	// IDs of teams that the role should be assigned to.
	Teams pulumix.ArrayOutput[string] `pulumi:"teams"`
	// IDs of users that the role should be assigned to.
	Users pulumix.ArrayOutput[int] `pulumi:"users"`
}

// NewRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewRoleAssignment(ctx *pulumi.Context,
	name string, args *RoleAssignmentArgs, opts ...pulumi.ResourceOption) (*RoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleUid == nil {
		return nil, errors.New("invalid value for required argument 'RoleUid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleAssignment
	err := ctx.RegisterResource("grafana:index/roleAssignment:RoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleAssignment gets an existing RoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleAssignmentState, opts ...pulumi.ResourceOption) (*RoleAssignment, error) {
	var resource RoleAssignment
	err := ctx.ReadResource("grafana:index/roleAssignment:RoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleAssignment resources.
type roleAssignmentState struct {
	// Grafana RBAC role UID.
	RoleUid *string `pulumi:"roleUid"`
	// IDs of service accounts that the role should be assigned to.
	ServiceAccounts []string `pulumi:"serviceAccounts"`
	// IDs of teams that the role should be assigned to.
	Teams []string `pulumi:"teams"`
	// IDs of users that the role should be assigned to.
	Users []int `pulumi:"users"`
}

type RoleAssignmentState struct {
	// Grafana RBAC role UID.
	RoleUid pulumix.Input[*string]
	// IDs of service accounts that the role should be assigned to.
	ServiceAccounts pulumix.Input[[]string]
	// IDs of teams that the role should be assigned to.
	Teams pulumix.Input[[]string]
	// IDs of users that the role should be assigned to.
	Users pulumix.Input[[]int]
}

func (RoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentState)(nil)).Elem()
}

type roleAssignmentArgs struct {
	// Grafana RBAC role UID.
	RoleUid string `pulumi:"roleUid"`
	// IDs of service accounts that the role should be assigned to.
	ServiceAccounts []string `pulumi:"serviceAccounts"`
	// IDs of teams that the role should be assigned to.
	Teams []string `pulumi:"teams"`
	// IDs of users that the role should be assigned to.
	Users []int `pulumi:"users"`
}

// The set of arguments for constructing a RoleAssignment resource.
type RoleAssignmentArgs struct {
	// Grafana RBAC role UID.
	RoleUid pulumix.Input[string]
	// IDs of service accounts that the role should be assigned to.
	ServiceAccounts pulumix.Input[[]string]
	// IDs of teams that the role should be assigned to.
	Teams pulumix.Input[[]string]
	// IDs of users that the role should be assigned to.
	Users pulumix.Input[[]int]
}

func (RoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentArgs)(nil)).Elem()
}

type RoleAssignmentOutput struct{ *pulumi.OutputState }

func (RoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignment)(nil)).Elem()
}

func (o RoleAssignmentOutput) ToRoleAssignmentOutput() RoleAssignmentOutput {
	return o
}

func (o RoleAssignmentOutput) ToRoleAssignmentOutputWithContext(ctx context.Context) RoleAssignmentOutput {
	return o
}

func (o RoleAssignmentOutput) ToOutput(ctx context.Context) pulumix.Output[RoleAssignment] {
	return pulumix.Output[RoleAssignment]{
		OutputState: o.OutputState,
	}
}

// Grafana RBAC role UID.
func (o RoleAssignmentOutput) RoleUid() pulumix.Output[string] {
	value := pulumix.Apply[RoleAssignment](o, func(v RoleAssignment) pulumix.Output[string] { return v.RoleUid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// IDs of service accounts that the role should be assigned to.
func (o RoleAssignmentOutput) ServiceAccounts() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RoleAssignment](o, func(v RoleAssignment) pulumix.ArrayOutput[string] { return v.ServiceAccounts })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// IDs of teams that the role should be assigned to.
func (o RoleAssignmentOutput) Teams() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[RoleAssignment](o, func(v RoleAssignment) pulumix.ArrayOutput[string] { return v.Teams })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// IDs of users that the role should be assigned to.
func (o RoleAssignmentOutput) Users() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[RoleAssignment](o, func(v RoleAssignment) pulumix.ArrayOutput[int] { return v.Users })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(RoleAssignmentOutput{})
}
