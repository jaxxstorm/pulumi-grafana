// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This resource is available only with Grafana Enterprise 8.+.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewRole(ctx, "superUser", &grafana.RoleArgs{
//				Description: pulumi.String("My Super User description"),
//				Global:      pulumi.Bool(true),
//				Permissions: grafana.RolePermissionArray{
//					&grafana.RolePermissionArgs{
//						Action: pulumi.String("org.users:add"),
//						Scope:  pulumi.String("users:*"),
//					},
//					&grafana.RolePermissionArgs{
//						Action: pulumi.String("org.users:write"),
//						Scope:  pulumi.String("users:*"),
//					},
//					&grafana.RolePermissionArgs{
//						Action: pulumi.String("org.users:read"),
//						Scope:  pulumi.String("users:*"),
//					},
//				},
//				Uid:     pulumi.String("superuseruid"),
//				Version: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/role:Role role_name {{uid}}
//
// ```
type Role struct {
	pulumi.CustomResourceState

	// Description of the role.
	Description pulumix.Output[*string] `pulumi:"description"`
	// Display name of the role. Available with Grafana 8.5+.
	DisplayName pulumix.Output[*string] `pulumi:"displayName"`
	// Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
	Global pulumix.Output[*bool] `pulumi:"global"`
	// Group of the role. Available with Grafana 8.5+.
	Group pulumix.Output[*string] `pulumi:"group"`
	// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
	Hidden pulumix.Output[*bool] `pulumi:"hidden"`
	// Name of the role
	Name pulumix.Output[string] `pulumi:"name"`
	// Specific set of actions granted by the role.
	Permissions pulumix.GArrayOutput[RolePermission, RolePermissionOutput] `pulumi:"permissions"`
	// Unique identifier of the role. Used for assignments.
	Uid pulumix.Output[string] `pulumi:"uid"`
	// Version of the role. A role is updated only on version increase.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Role
	err := ctx.RegisterResource("grafana:index/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("grafana:index/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// Description of the role.
	Description *string `pulumi:"description"`
	// Display name of the role. Available with Grafana 8.5+.
	DisplayName *string `pulumi:"displayName"`
	// Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
	Global *bool `pulumi:"global"`
	// Group of the role. Available with Grafana 8.5+.
	Group *string `pulumi:"group"`
	// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
	Hidden *bool `pulumi:"hidden"`
	// Name of the role
	Name *string `pulumi:"name"`
	// Specific set of actions granted by the role.
	Permissions []RolePermission `pulumi:"permissions"`
	// Unique identifier of the role. Used for assignments.
	Uid *string `pulumi:"uid"`
	// Version of the role. A role is updated only on version increase.
	Version *int `pulumi:"version"`
}

type RoleState struct {
	// Description of the role.
	Description pulumix.Input[*string]
	// Display name of the role. Available with Grafana 8.5+.
	DisplayName pulumix.Input[*string]
	// Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
	Global pulumix.Input[*bool]
	// Group of the role. Available with Grafana 8.5+.
	Group pulumix.Input[*string]
	// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
	Hidden pulumix.Input[*bool]
	// Name of the role
	Name pulumix.Input[*string]
	// Specific set of actions granted by the role.
	Permissions pulumix.Input[[]*RolePermissionArgs]
	// Unique identifier of the role. Used for assignments.
	Uid pulumix.Input[*string]
	// Version of the role. A role is updated only on version increase.
	Version pulumix.Input[*int]
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// Description of the role.
	Description *string `pulumi:"description"`
	// Display name of the role. Available with Grafana 8.5+.
	DisplayName *string `pulumi:"displayName"`
	// Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
	Global *bool `pulumi:"global"`
	// Group of the role. Available with Grafana 8.5+.
	Group *string `pulumi:"group"`
	// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
	Hidden *bool `pulumi:"hidden"`
	// Name of the role
	Name *string `pulumi:"name"`
	// Specific set of actions granted by the role.
	Permissions []RolePermission `pulumi:"permissions"`
	// Unique identifier of the role. Used for assignments.
	Uid *string `pulumi:"uid"`
	// Version of the role. A role is updated only on version increase.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// Description of the role.
	Description pulumix.Input[*string]
	// Display name of the role. Available with Grafana 8.5+.
	DisplayName pulumix.Input[*string]
	// Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
	Global pulumix.Input[*bool]
	// Group of the role. Available with Grafana 8.5+.
	Group pulumix.Input[*string]
	// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
	Hidden pulumix.Input[*bool]
	// Name of the role
	Name pulumix.Input[*string]
	// Specific set of actions granted by the role.
	Permissions pulumix.Input[[]*RolePermissionArgs]
	// Unique identifier of the role. Used for assignments.
	Uid pulumix.Input[*string]
	// Version of the role. A role is updated only on version increase.
	Version pulumix.Input[int]
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

func (o RoleOutput) ToOutput(ctx context.Context) pulumix.Output[Role] {
	return pulumix.Output[Role]{
		OutputState: o.OutputState,
	}
}

// Description of the role.
func (o RoleOutput) Description() pulumix.Output[*string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*string] { return v.Description })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Display name of the role. Available with Grafana 8.5+.
func (o RoleOutput) DisplayName() pulumix.Output[*string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*string] { return v.DisplayName })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Boolean to state whether the role is available across all organizations or not. Defaults to `false`.
func (o RoleOutput) Global() pulumix.Output[*bool] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*bool] { return v.Global })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Group of the role. Available with Grafana 8.5+.
func (o RoleOutput) Group() pulumix.Output[*string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*string] { return v.Group })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+. Defaults to `false`.
func (o RoleOutput) Hidden() pulumix.Output[*bool] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[*bool] { return v.Hidden })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Name of the role
func (o RoleOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Specific set of actions granted by the role.
func (o RoleOutput) Permissions() pulumix.GArrayOutput[RolePermission, RolePermissionOutput] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.GArrayOutput[RolePermission, RolePermissionOutput] { return v.Permissions })
	unwrapped := pulumix.Flatten[[]RolePermission, pulumix.GArrayOutput[RolePermission, RolePermissionOutput]](value)
	return pulumix.GArrayOutput[RolePermission, RolePermissionOutput]{OutputState: unwrapped.OutputState}
}

// Unique identifier of the role. Used for assignments.
func (o RoleOutput) Uid() pulumix.Output[string] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[string] { return v.Uid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of the role. A role is updated only on version increase.
func (o RoleOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[Role](o, func(v Role) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(RoleOutput{})
}
