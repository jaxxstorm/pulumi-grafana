// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for retrieving a single library panel by name or uid.
func LookupLibraryPanel(ctx *pulumi.Context, args *LookupLibraryPanelArgs, opts ...pulumi.InvokeOption) (*LookupLibraryPanelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLibraryPanelResult
	err := ctx.Invoke("grafana:index/getLibraryPanel:getLibraryPanel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLibraryPanel.
type LookupLibraryPanelArgs struct {
	// Name of the library panel.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The unique identifier (UID) of the library panel.
	Uid *string `pulumi:"uid"`
}

// A collection of values returned by getLibraryPanel.
type LookupLibraryPanelResult struct {
	// Timestamp when the library panel was created.
	Created string `pulumi:"created"`
	// Numerical IDs of Grafana dashboards containing the library panel.
	DashboardIds []int `pulumi:"dashboardIds"`
	// Description of the library panel.
	Description string `pulumi:"description"`
	// ID of the folder where the library panel is stored.
	FolderId string `pulumi:"folderId"`
	// Name of the folder containing the library panel.
	FolderName string `pulumi:"folderName"`
	// Unique ID (UID) of the folder containing the library panel.
	FolderUid string `pulumi:"folderUid"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The JSON model for the library panel.
	ModelJson string `pulumi:"modelJson"`
	// Name of the library panel.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The numeric ID of the library panel computed by Grafana.
	PanelId int `pulumi:"panelId"`
	// Type of the library panel (eg. text).
	Type string `pulumi:"type"`
	// The unique identifier (UID) of the library panel.
	Uid *string `pulumi:"uid"`
	// Timestamp when the library panel was last modified.
	Updated string `pulumi:"updated"`
	// Version of the library panel.
	Version int `pulumi:"version"`
}

func LookupLibraryPanelOutput(ctx *pulumi.Context, args LookupLibraryPanelOutputArgs, opts ...pulumi.InvokeOption) LookupLibraryPanelResultOutput {
	outputResult := pulumix.ApplyErr[*LookupLibraryPanelArgs](args.ToOutput(), func(plainArgs *LookupLibraryPanelArgs) (*LookupLibraryPanelResult, error) {
		return LookupLibraryPanel(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupLibraryPanelResultOutput, *LookupLibraryPanelResult](outputResult)
}

// A collection of arguments for invoking getLibraryPanel.
type LookupLibraryPanelOutputArgs struct {
	// Name of the library panel.
	Name pulumix.Input[*string] `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string] `pulumi:"orgId"`
	// The unique identifier (UID) of the library panel.
	Uid pulumix.Input[*string] `pulumi:"uid"`
}

func (args LookupLibraryPanelOutputArgs) ToOutput() pulumix.Output[*LookupLibraryPanelArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny(),
		args.OrgId.ToOutput(context.Background()).AsAny(),
		args.Uid.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupLibraryPanelArgs {
		return &LookupLibraryPanelArgs{
			Name:  resolvedArgs[0].(*string),
			OrgId: resolvedArgs[1].(*string),
			Uid:   resolvedArgs[2].(*string),
		}
	})
}

type LookupLibraryPanelResultOutput struct{ *pulumi.OutputState }

func (LookupLibraryPanelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLibraryPanelResult)(nil)).Elem()
}

func (o LookupLibraryPanelResultOutput) ToOutput(context.Context) pulumix.Output[*LookupLibraryPanelResult] {
	return pulumix.Output[*LookupLibraryPanelResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupLibraryPanelResultOutput) Created() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.Created })
}

func (o LookupLibraryPanelResultOutput) DashboardIds() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) []int { return v.DashboardIds })
	return pulumix.ArrayOutput[int]{
		OutputState: value.OutputState,
	}
}

func (o LookupLibraryPanelResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.Description })
}

func (o LookupLibraryPanelResultOutput) FolderId() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.FolderId })
}

func (o LookupLibraryPanelResultOutput) FolderName() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.FolderName })
}

func (o LookupLibraryPanelResultOutput) FolderUid() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.FolderUid })
}

func (o LookupLibraryPanelResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.Id })
}

func (o LookupLibraryPanelResultOutput) ModelJson() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.ModelJson })
}

func (o LookupLibraryPanelResultOutput) Name() pulumix.Output[*string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) *string { return v.Name })
}

func (o LookupLibraryPanelResultOutput) OrgId() pulumix.Output[*string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) *string { return v.OrgId })
}

func (o LookupLibraryPanelResultOutput) PanelId() pulumix.Output[int] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) int { return v.PanelId })
}

func (o LookupLibraryPanelResultOutput) Type() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.Type })
}

func (o LookupLibraryPanelResultOutput) Uid() pulumix.Output[*string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) *string { return v.Uid })
}

func (o LookupLibraryPanelResultOutput) Updated() pulumix.Output[string] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) string { return v.Updated })
}

func (o LookupLibraryPanelResultOutput) Version() pulumix.Output[int] {
	return pulumix.Apply[*LookupLibraryPanelResult](o, func(v *LookupLibraryPanelResult) int { return v.Version })
}
