// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/user-management/server-user-management/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/user/)
//
// This data source uses Grafana's admin APIs for reading users which
// does not currently work with API Tokens. You must use basic auth.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := grafana.NewUser(ctx, "test", &grafana.UserArgs{
//				Email:    pulumi.String("test.datasource@example.com"),
//				Login:    pulumi.String("test-datasource"),
//				Password: pulumi.String("my-password"),
//				IsAdmin:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_ = grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{
//				UserId: test.UserId,
//			}, nil)
//			_ = grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{
//				Email: test.Email,
//			}, nil)
//			_ = test.Login.ApplyT(func(login *string) (grafana.GetUserResult, error) {
//				return grafana.LookupUserOutput(ctx, grafana.GetUserOutputArgs{
//					Login: login,
//				}, nil), nil
//			}).(grafana.GetUserResultOutput)
//			return nil
//		})
//	}
//
// ```
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("grafana:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	// The email address of the Grafana user. Defaults to ``.
	Email *string `pulumi:"email"`
	// The username for the Grafana user. Defaults to ``.
	Login *string `pulumi:"login"`
	// The numerical ID of the Grafana user. Defaults to `-1`.
	UserId *int `pulumi:"userId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	// The email address of the Grafana user. Defaults to ``.
	Email *string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the user is an admin.
	IsAdmin bool `pulumi:"isAdmin"`
	// The username for the Grafana user. Defaults to ``.
	Login *string `pulumi:"login"`
	// The display name for the Grafana user.
	Name string `pulumi:"name"`
	// The numerical ID of the Grafana user. Defaults to `-1`.
	UserId *int `pulumi:"userId"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	outputResult := pulumix.ApplyErr[*LookupUserArgs](args.ToOutput(), func(plainArgs *LookupUserArgs) (*LookupUserResult, error) {
		return LookupUser(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupUserResultOutput, *LookupUserResult](outputResult)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	// The email address of the Grafana user. Defaults to ``.
	Email pulumix.Input[*string] `pulumi:"email"`
	// The username for the Grafana user. Defaults to ``.
	Login pulumix.Input[*string] `pulumi:"login"`
	// The numerical ID of the Grafana user. Defaults to `-1`.
	UserId pulumix.Input[*int] `pulumi:"userId"`
}

func (args LookupUserOutputArgs) ToOutput() pulumix.Output[*LookupUserArgs] {
	allArgs := pulumix.All(
		args.Email.ToOutput(context.Background()).AsAny(),
		args.Login.ToOutput(context.Background()).AsAny(),
		args.UserId.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupUserArgs {
		return &LookupUserArgs{
			Email:  resolvedArgs[0].(*string),
			Login:  resolvedArgs[1].(*string),
			UserId: resolvedArgs[2].(*int),
		}
	})
}

type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToOutput(context.Context) pulumix.Output[*LookupUserResult] {
	return pulumix.Output[*LookupUserResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupUserResultOutput) Email() pulumix.Output[*string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *string { return v.Email })
}

func (o LookupUserResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Id })
}

func (o LookupUserResultOutput) IsAdmin() pulumix.Output[bool] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) bool { return v.IsAdmin })
}

func (o LookupUserResultOutput) Login() pulumix.Output[*string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *string { return v.Login })
}

func (o LookupUserResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) string { return v.Name })
}

func (o LookupUserResultOutput) UserId() pulumix.Output[*int] {
	return pulumix.Apply[*LookupUserResult](o, func(v *LookupUserResult) *int { return v.UserId })
}
