// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/oncall/latest/escalation-chains-and-routes/)
// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_policies/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewOncallEscalationChain(ctx, "default", nil, pulumi.Provider(grafana.Oncall))
//			if err != nil {
//				return err
//			}
//			alex, err := grafana.GetOncallUser(ctx, &grafana.GetOncallUserArgs{
//				Username: "alex",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallEscalation(ctx, "exampleNotifyStepOncallEscalation", &grafana.OncallEscalationArgs{
//				EscalationChainId: _default.ID(),
//				Type:              pulumi.String("notify_persons"),
//				PersonsToNotifies: pulumi.StringArray{
//					*pulumi.String(alex.Id),
//				},
//				Position: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallEscalation(ctx, "exampleNotifyStepIndex/oncallEscalationOncallEscalation", &grafana.OncallEscalationArgs{
//				EscalationChainId: _default.ID(),
//				Type:              pulumi.String("wait"),
//				Duration:          pulumi.Int(300),
//				Position:          pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallEscalation(ctx, "exampleNotifyStepGrafanaIndex/oncallEscalationOncallEscalation", &grafana.OncallEscalationArgs{
//				EscalationChainId: _default.ID(),
//				Type:              pulumi.String("notify_persons"),
//				Important:         pulumi.Bool(true),
//				PersonsToNotifies: pulumi.StringArray{
//					*pulumi.String(alex.Id),
//				},
//				Position: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/oncallEscalation:OncallEscalation escalation_name {{escalation_id}}
//
// ```
type OncallEscalation struct {
	pulumi.CustomResourceState

	// The ID of an Action for triggerAction type step.
	ActionToTrigger pulumix.Output[*string] `pulumi:"actionToTrigger"`
	// The duration of delay for wait type step.
	Duration pulumix.Output[*int] `pulumi:"duration"`
	// The ID of the escalation chain.
	EscalationChainId pulumix.Output[string] `pulumi:"escalationChainId"`
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify pulumix.Output[*string] `pulumi:"groupToNotify"`
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
	Important pulumix.Output[*bool] `pulumi:"important"`
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom pulumix.Output[*string] `pulumi:"notifyIfTimeFrom"`
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo pulumix.Output[*string] `pulumi:"notifyIfTimeTo"`
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule pulumix.Output[*string] `pulumi:"notifyOnCallFromSchedule"`
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies pulumix.ArrayOutput[string] `pulumi:"personsToNotifies"`
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes pulumix.ArrayOutput[string] `pulumi:"personsToNotifyNextEachTimes"`
	// The position of the escalation step (starts from 0).
	Position pulumix.Output[int] `pulumi:"position"`
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
	Type pulumix.Output[*string] `pulumi:"type"`
}

// NewOncallEscalation registers a new resource with the given unique name, arguments, and options.
func NewOncallEscalation(ctx *pulumi.Context,
	name string, args *OncallEscalationArgs, opts ...pulumi.ResourceOption) (*OncallEscalation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EscalationChainId == nil {
		return nil, errors.New("invalid value for required argument 'EscalationChainId'")
	}
	if args.Position == nil {
		return nil, errors.New("invalid value for required argument 'Position'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallEscalation
	err := ctx.RegisterResource("grafana:index/oncallEscalation:OncallEscalation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallEscalation gets an existing OncallEscalation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallEscalation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallEscalationState, opts ...pulumi.ResourceOption) (*OncallEscalation, error) {
	var resource OncallEscalation
	err := ctx.ReadResource("grafana:index/oncallEscalation:OncallEscalation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallEscalation resources.
type oncallEscalationState struct {
	// The ID of an Action for triggerAction type step.
	ActionToTrigger *string `pulumi:"actionToTrigger"`
	// The duration of delay for wait type step.
	Duration *int `pulumi:"duration"`
	// The ID of the escalation chain.
	EscalationChainId *string `pulumi:"escalationChainId"`
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify *string `pulumi:"groupToNotify"`
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
	Important *bool `pulumi:"important"`
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom *string `pulumi:"notifyIfTimeFrom"`
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo *string `pulumi:"notifyIfTimeTo"`
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule *string `pulumi:"notifyOnCallFromSchedule"`
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies []string `pulumi:"personsToNotifies"`
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes []string `pulumi:"personsToNotifyNextEachTimes"`
	// The position of the escalation step (starts from 0).
	Position *int `pulumi:"position"`
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
	Type *string `pulumi:"type"`
}

type OncallEscalationState struct {
	// The ID of an Action for triggerAction type step.
	ActionToTrigger pulumix.Input[*string]
	// The duration of delay for wait type step.
	Duration pulumix.Input[*int]
	// The ID of the escalation chain.
	EscalationChainId pulumix.Input[*string]
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify pulumix.Input[*string]
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
	Important pulumix.Input[*bool]
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom pulumix.Input[*string]
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo pulumix.Input[*string]
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule pulumix.Input[*string]
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies pulumix.Input[[]string]
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes pulumix.Input[[]string]
	// The position of the escalation step (starts from 0).
	Position pulumix.Input[*int]
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
	Type pulumix.Input[*string]
}

func (OncallEscalationState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallEscalationState)(nil)).Elem()
}

type oncallEscalationArgs struct {
	// The ID of an Action for triggerAction type step.
	ActionToTrigger *string `pulumi:"actionToTrigger"`
	// The duration of delay for wait type step.
	Duration *int `pulumi:"duration"`
	// The ID of the escalation chain.
	EscalationChainId string `pulumi:"escalationChainId"`
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify *string `pulumi:"groupToNotify"`
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
	Important *bool `pulumi:"important"`
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom *string `pulumi:"notifyIfTimeFrom"`
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo *string `pulumi:"notifyIfTimeTo"`
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule *string `pulumi:"notifyOnCallFromSchedule"`
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies []string `pulumi:"personsToNotifies"`
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes []string `pulumi:"personsToNotifyNextEachTimes"`
	// The position of the escalation step (starts from 0).
	Position int `pulumi:"position"`
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a OncallEscalation resource.
type OncallEscalationArgs struct {
	// The ID of an Action for triggerAction type step.
	ActionToTrigger pulumix.Input[*string]
	// The duration of delay for wait type step.
	Duration pulumix.Input[*int]
	// The ID of the escalation chain.
	EscalationChainId pulumix.Input[string]
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify pulumix.Input[*string]
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
	Important pulumix.Input[*bool]
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom pulumix.Input[*string]
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo pulumix.Input[*string]
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule pulumix.Input[*string]
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies pulumix.Input[[]string]
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes pulumix.Input[[]string]
	// The position of the escalation step (starts from 0).
	Position pulumix.Input[int]
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
	Type pulumix.Input[*string]
}

func (OncallEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallEscalationArgs)(nil)).Elem()
}

type OncallEscalationOutput struct{ *pulumi.OutputState }

func (OncallEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallEscalation)(nil)).Elem()
}

func (o OncallEscalationOutput) ToOncallEscalationOutput() OncallEscalationOutput {
	return o
}

func (o OncallEscalationOutput) ToOncallEscalationOutputWithContext(ctx context.Context) OncallEscalationOutput {
	return o
}

func (o OncallEscalationOutput) ToOutput(ctx context.Context) pulumix.Output[OncallEscalation] {
	return pulumix.Output[OncallEscalation]{
		OutputState: o.OutputState,
	}
}

// The ID of an Action for triggerAction type step.
func (o OncallEscalationOutput) ActionToTrigger() pulumix.Output[*string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*string] { return v.ActionToTrigger })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The duration of delay for wait type step.
func (o OncallEscalationOutput) Duration() pulumix.Output[*int] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*int] { return v.Duration })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

// The ID of the escalation chain.
func (o OncallEscalationOutput) EscalationChainId() pulumix.Output[string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[string] { return v.EscalationChainId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of a User Group for notify*user*group type step.
func (o OncallEscalationOutput) GroupToNotify() pulumix.Output[*string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*string] { return v.GroupToNotify })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*on*call*from*schedule and notify*user_group
func (o OncallEscalationOutput) Important() pulumix.Output[*bool] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*bool] { return v.Important })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
func (o OncallEscalationOutput) NotifyIfTimeFrom() pulumix.Output[*string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*string] { return v.NotifyIfTimeFrom })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
func (o OncallEscalationOutput) NotifyIfTimeTo() pulumix.Output[*string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*string] { return v.NotifyIfTimeTo })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// ID of a Schedule for notify*on*call*from*schedule type step.
func (o OncallEscalationOutput) NotifyOnCallFromSchedule() pulumix.Output[*string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*string] { return v.NotifyOnCallFromSchedule })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The list of ID's of users for notifyPersons type step.
func (o OncallEscalationOutput) PersonsToNotifies() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.ArrayOutput[string] { return v.PersonsToNotifies })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The list of ID's of users for notify*person*next*each*time type step.
func (o OncallEscalationOutput) PersonsToNotifyNextEachTimes() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.ArrayOutput[string] { return v.PersonsToNotifyNextEachTimes })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The position of the escalation step (starts from 0).
func (o OncallEscalationOutput) Position() pulumix.Output[int] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[int] { return v.Position })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*action, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat_escalation
func (o OncallEscalationOutput) Type() pulumix.Output[*string] {
	value := pulumix.Apply[OncallEscalation](o, func(v OncallEscalation) pulumix.Output[*string] { return v.Type })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(OncallEscalationOutput{})
}
