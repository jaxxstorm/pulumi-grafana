// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.GetOncallTeam(ctx, &grafana.GetOncallTeamArgs{
//				Name: "example_team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetOncallTeam(ctx *pulumi.Context, args *GetOncallTeamArgs, opts ...pulumi.InvokeOption) (*GetOncallTeamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOncallTeamResult
	err := ctx.Invoke("grafana:index/getOncallTeam:getOncallTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOncallTeam.
type GetOncallTeamArgs struct {
	// The team name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getOncallTeam.
type GetOncallTeamResult struct {
	AvatarUrl string `pulumi:"avatarUrl"`
	Email     string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The team name.
	Name string `pulumi:"name"`
}

func GetOncallTeamOutput(ctx *pulumi.Context, args GetOncallTeamOutputArgs, opts ...pulumi.InvokeOption) GetOncallTeamResultOutput {
	outputResult := pulumix.ApplyErr[*GetOncallTeamArgs](args.ToOutput(), func(plainArgs *GetOncallTeamArgs) (*GetOncallTeamResult, error) {
		return GetOncallTeam(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[GetOncallTeamResultOutput, *GetOncallTeamResult](outputResult)
}

// A collection of arguments for invoking getOncallTeam.
type GetOncallTeamOutputArgs struct {
	// The team name.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args GetOncallTeamOutputArgs) ToOutput() pulumix.Output[*GetOncallTeamArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *GetOncallTeamArgs {
		return &GetOncallTeamArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type GetOncallTeamResultOutput struct{ *pulumi.OutputState }

func (GetOncallTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOncallTeamResult)(nil)).Elem()
}

func (o GetOncallTeamResultOutput) ToOutput(context.Context) pulumix.Output[*GetOncallTeamResult] {
	return pulumix.Output[*GetOncallTeamResult]{
		OutputState: o.OutputState,
	}
}

func (o GetOncallTeamResultOutput) AvatarUrl() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallTeamResult](o, func(v *GetOncallTeamResult) string { return v.AvatarUrl })
}

func (o GetOncallTeamResultOutput) Email() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallTeamResult](o, func(v *GetOncallTeamResult) string { return v.Email })
}

func (o GetOncallTeamResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallTeamResult](o, func(v *GetOncallTeamResult) string { return v.Id })
}

func (o GetOncallTeamResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*GetOncallTeamResult](o, func(v *GetOncallTeamResult) string { return v.Name })
}
