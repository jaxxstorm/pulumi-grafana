// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := grafana.NewFolder(ctx, "test", &grafana.FolderArgs{
//				Title: pulumi.String("test-folder"),
//				Uid:   pulumi.String("test-ds-folder-uid"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = grafana.LookupFolderOutput(ctx, grafana.GetFolderOutputArgs{
//				Title: test.Title,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupFolder(ctx *pulumi.Context, args *LookupFolderArgs, opts ...pulumi.InvokeOption) (*LookupFolderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFolderResult
	err := ctx.Invoke("grafana:index/getFolder:getFolder", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFolder.
type LookupFolderArgs struct {
	// The name of the Grafana folder.
	Title string `pulumi:"title"`
}

// A collection of values returned by getFolder.
type LookupFolderResult struct {
	// The numerical ID of the Grafana folder.
	Id int `pulumi:"id"`
	// The name of the Grafana folder.
	Title string `pulumi:"title"`
	// The uid of the Grafana folder.
	Uid string `pulumi:"uid"`
	// The full URL of the folder.
	Url string `pulumi:"url"`
}

func LookupFolderOutput(ctx *pulumi.Context, args LookupFolderOutputArgs, opts ...pulumi.InvokeOption) LookupFolderResultOutput {
	outputResult := pulumix.ApplyErr[*LookupFolderArgs](args.ToOutput(), func(plainArgs *LookupFolderArgs) (*LookupFolderResult, error) {
		return LookupFolder(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupFolderResultOutput, *LookupFolderResult](outputResult)
}

// A collection of arguments for invoking getFolder.
type LookupFolderOutputArgs struct {
	// The name of the Grafana folder.
	Title pulumix.Input[string] `pulumi:"title"`
}

func (args LookupFolderOutputArgs) ToOutput() pulumix.Output[*LookupFolderArgs] {
	allArgs := pulumix.All(
		args.Title.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupFolderArgs {
		return &LookupFolderArgs{
			Title: resolvedArgs[0].(string),
		}
	})
}

type LookupFolderResultOutput struct{ *pulumi.OutputState }

func (LookupFolderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFolderResult)(nil)).Elem()
}

func (o LookupFolderResultOutput) ToOutput(context.Context) pulumix.Output[*LookupFolderResult] {
	return pulumix.Output[*LookupFolderResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupFolderResultOutput) Id() pulumix.Output[int] {
	return pulumix.Apply[*LookupFolderResult](o, func(v *LookupFolderResult) int { return v.Id })
}

func (o LookupFolderResultOutput) Title() pulumix.Output[string] {
	return pulumix.Apply[*LookupFolderResult](o, func(v *LookupFolderResult) string { return v.Title })
}

func (o LookupFolderResultOutput) Uid() pulumix.Output[string] {
	return pulumix.Apply[*LookupFolderResult](o, func(v *LookupFolderResult) string { return v.Uid })
}

func (o LookupFolderResultOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[*LookupFolderResult](o, func(v *LookupFolderResult) string { return v.Url })
}
