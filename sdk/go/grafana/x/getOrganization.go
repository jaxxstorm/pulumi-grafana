// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/org/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := grafana.NewOrganization(ctx, "test", &grafana.OrganizationArgs{
//				AdminUser:   pulumi.String("admin"),
//				CreateUsers: pulumi.Bool(true),
//				Viewers: pulumi.StringArray{
//					pulumi.String("viewer-01@example.com"),
//					pulumi.String("viewer-02@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = grafana.LookupOrganizationOutput(ctx, grafana.GetOrganizationOutputArgs{
//				Name: test.Name,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupOrganization(ctx *pulumi.Context, args *LookupOrganizationArgs, opts ...pulumi.InvokeOption) (*LookupOrganizationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOrganizationResult
	err := ctx.Invoke("grafana:index/getOrganization:getOrganization", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOrganization.
type LookupOrganizationArgs struct {
	// The name of the Organization.
	Name string `pulumi:"name"`
}

// A collection of values returned by getOrganization.
type LookupOrganizationResult struct {
	// A list of email addresses corresponding to users given admin access to the organization.
	Admins []string `pulumi:"admins"`
	// A list of email addresses corresponding to users given editor access to the organization.
	Editors []string `pulumi:"editors"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the Organization.
	Name string `pulumi:"name"`
	// A list of email addresses corresponding to users given viewer access to the organization.
	Viewers []string `pulumi:"viewers"`
}

func LookupOrganizationOutput(ctx *pulumi.Context, args LookupOrganizationOutputArgs, opts ...pulumi.InvokeOption) LookupOrganizationResultOutput {
	outputResult := pulumix.ApplyErr[*LookupOrganizationArgs](args.ToOutput(), func(plainArgs *LookupOrganizationArgs) (*LookupOrganizationResult, error) {
		return LookupOrganization(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupOrganizationResultOutput, *LookupOrganizationResult](outputResult)
}

// A collection of arguments for invoking getOrganization.
type LookupOrganizationOutputArgs struct {
	// The name of the Organization.
	Name pulumix.Input[string] `pulumi:"name"`
}

func (args LookupOrganizationOutputArgs) ToOutput() pulumix.Output[*LookupOrganizationArgs] {
	allArgs := pulumix.All(
		args.Name.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupOrganizationArgs {
		return &LookupOrganizationArgs{
			Name: resolvedArgs[0].(string),
		}
	})
}

type LookupOrganizationResultOutput struct{ *pulumi.OutputState }

func (LookupOrganizationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrganizationResult)(nil)).Elem()
}

func (o LookupOrganizationResultOutput) ToOutput(context.Context) pulumix.Output[*LookupOrganizationResult] {
	return pulumix.Output[*LookupOrganizationResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupOrganizationResultOutput) Admins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupOrganizationResult](o, func(v *LookupOrganizationResult) []string { return v.Admins })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupOrganizationResultOutput) Editors() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupOrganizationResult](o, func(v *LookupOrganizationResult) []string { return v.Editors })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}

func (o LookupOrganizationResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupOrganizationResult](o, func(v *LookupOrganizationResult) string { return v.Id })
}

func (o LookupOrganizationResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupOrganizationResult](o, func(v *LookupOrganizationResult) string { return v.Name })
}

func (o LookupOrganizationResultOutput) Viewers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*LookupOrganizationResult](o, func(v *LookupOrganizationResult) []string { return v.Viewers })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
