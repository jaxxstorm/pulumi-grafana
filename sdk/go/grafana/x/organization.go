// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/org/)
//
// This resource represents an instance-scoped resource and uses Grafana's admin APIs.
// It does not work with API tokens or service accounts which are org-scoped.
// You must use basic auth.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewOrganization(ctx, "test", &grafana.OrganizationArgs{
//				AdminUser: pulumi.String("admin"),
//				Admins: pulumi.StringArray{
//					pulumi.String("admin@example.com"),
//				},
//				CreateUsers: pulumi.Bool(true),
//				Editors: pulumi.StringArray{
//					pulumi.String("editor-01@example.com"),
//					pulumi.String("editor-02@example.com"),
//				},
//				Viewers: pulumi.StringArray{
//					pulumi.String("viewer-01@example.com"),
//					pulumi.String("viewer-02@example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/organization:Organization org_name {{org_id}}
//
// ```
type Organization struct {
	pulumi.CustomResourceState

	// The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
	// admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
	// this parameter keeps Terraform from removing it from organizations.
	AdminUser pulumix.Output[*string] `pulumi:"adminUser"`
	// A list of email addresses corresponding to users who should be given admin
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Admins pulumix.ArrayOutput[string] `pulumi:"admins"`
	// Whether or not to create Grafana users specified in the organization's
	// membership if they don't already exist in Grafana. If unspecified, this
	// parameter defaults to true, creating placeholder users with the name, login,
	// and email set to the email of the user, and a random password. Setting this
	// option to false will cause an error to be thrown for any users that do not
	// already exist in Grafana.
	// Defaults to `true`.
	CreateUsers pulumix.Output[*bool] `pulumi:"createUsers"`
	// A list of email addresses corresponding to users who should be given editor
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Editors pulumix.ArrayOutput[string] `pulumi:"editors"`
	// The display name for the Grafana organization created.
	Name pulumix.Output[string] `pulumi:"name"`
	// The organization id assigned to this organization by Grafana.
	OrgId pulumix.Output[int] `pulumi:"orgId"`
	// A list of email addresses corresponding to users who should be given viewer
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Viewers pulumix.ArrayOutput[string] `pulumi:"viewers"`
}

// NewOrganization registers a new resource with the given unique name, arguments, and options.
func NewOrganization(ctx *pulumi.Context,
	name string, args *OrganizationArgs, opts ...pulumi.ResourceOption) (*Organization, error) {
	if args == nil {
		args = &OrganizationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Organization
	err := ctx.RegisterResource("grafana:index/organization:Organization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganization gets an existing Organization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationState, opts ...pulumi.ResourceOption) (*Organization, error) {
	var resource Organization
	err := ctx.ReadResource("grafana:index/organization:Organization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Organization resources.
type organizationState struct {
	// The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
	// admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
	// this parameter keeps Terraform from removing it from organizations.
	AdminUser *string `pulumi:"adminUser"`
	// A list of email addresses corresponding to users who should be given admin
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Admins []string `pulumi:"admins"`
	// Whether or not to create Grafana users specified in the organization's
	// membership if they don't already exist in Grafana. If unspecified, this
	// parameter defaults to true, creating placeholder users with the name, login,
	// and email set to the email of the user, and a random password. Setting this
	// option to false will cause an error to be thrown for any users that do not
	// already exist in Grafana.
	// Defaults to `true`.
	CreateUsers *bool `pulumi:"createUsers"`
	// A list of email addresses corresponding to users who should be given editor
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Editors []string `pulumi:"editors"`
	// The display name for the Grafana organization created.
	Name *string `pulumi:"name"`
	// The organization id assigned to this organization by Grafana.
	OrgId *int `pulumi:"orgId"`
	// A list of email addresses corresponding to users who should be given viewer
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Viewers []string `pulumi:"viewers"`
}

type OrganizationState struct {
	// The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
	// admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
	// this parameter keeps Terraform from removing it from organizations.
	AdminUser pulumix.Input[*string]
	// A list of email addresses corresponding to users who should be given admin
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Admins pulumix.Input[[]string]
	// Whether or not to create Grafana users specified in the organization's
	// membership if they don't already exist in Grafana. If unspecified, this
	// parameter defaults to true, creating placeholder users with the name, login,
	// and email set to the email of the user, and a random password. Setting this
	// option to false will cause an error to be thrown for any users that do not
	// already exist in Grafana.
	// Defaults to `true`.
	CreateUsers pulumix.Input[*bool]
	// A list of email addresses corresponding to users who should be given editor
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Editors pulumix.Input[[]string]
	// The display name for the Grafana organization created.
	Name pulumix.Input[*string]
	// The organization id assigned to this organization by Grafana.
	OrgId pulumix.Input[*int]
	// A list of email addresses corresponding to users who should be given viewer
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Viewers pulumix.Input[[]string]
}

func (OrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationState)(nil)).Elem()
}

type organizationArgs struct {
	// The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
	// admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
	// this parameter keeps Terraform from removing it from organizations.
	AdminUser *string `pulumi:"adminUser"`
	// A list of email addresses corresponding to users who should be given admin
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Admins []string `pulumi:"admins"`
	// Whether or not to create Grafana users specified in the organization's
	// membership if they don't already exist in Grafana. If unspecified, this
	// parameter defaults to true, creating placeholder users with the name, login,
	// and email set to the email of the user, and a random password. Setting this
	// option to false will cause an error to be thrown for any users that do not
	// already exist in Grafana.
	// Defaults to `true`.
	CreateUsers *bool `pulumi:"createUsers"`
	// A list of email addresses corresponding to users who should be given editor
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Editors []string `pulumi:"editors"`
	// The display name for the Grafana organization created.
	Name *string `pulumi:"name"`
	// A list of email addresses corresponding to users who should be given viewer
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Viewers []string `pulumi:"viewers"`
}

// The set of arguments for constructing a Organization resource.
type OrganizationArgs struct {
	// The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
	// admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
	// this parameter keeps Terraform from removing it from organizations.
	AdminUser pulumix.Input[*string]
	// A list of email addresses corresponding to users who should be given admin
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Admins pulumix.Input[[]string]
	// Whether or not to create Grafana users specified in the organization's
	// membership if they don't already exist in Grafana. If unspecified, this
	// parameter defaults to true, creating placeholder users with the name, login,
	// and email set to the email of the user, and a random password. Setting this
	// option to false will cause an error to be thrown for any users that do not
	// already exist in Grafana.
	// Defaults to `true`.
	CreateUsers pulumix.Input[*bool]
	// A list of email addresses corresponding to users who should be given editor
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Editors pulumix.Input[[]string]
	// The display name for the Grafana organization created.
	Name pulumix.Input[*string]
	// A list of email addresses corresponding to users who should be given viewer
	// access to the organization. Note: users specified here must already exist in
	// Grafana unless 'create_users' is set to true.
	Viewers pulumix.Input[[]string]
}

func (OrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationArgs)(nil)).Elem()
}

type OrganizationOutput struct{ *pulumi.OutputState }

func (OrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Organization)(nil)).Elem()
}

func (o OrganizationOutput) ToOrganizationOutput() OrganizationOutput {
	return o
}

func (o OrganizationOutput) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return o
}

func (o OrganizationOutput) ToOutput(ctx context.Context) pulumix.Output[Organization] {
	return pulumix.Output[Organization]{
		OutputState: o.OutputState,
	}
}

// The login name of the configured default admin user for the Grafana installation. If unset, this value defaults to
// admin, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and
// this parameter keeps Terraform from removing it from organizations.
func (o OrganizationOutput) AdminUser() pulumix.Output[*string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[*string] { return v.AdminUser })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// A list of email addresses corresponding to users who should be given admin
// access to the organization. Note: users specified here must already exist in
// Grafana unless 'create_users' is set to true.
func (o OrganizationOutput) Admins() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.ArrayOutput[string] { return v.Admins })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// Whether or not to create Grafana users specified in the organization's
// membership if they don't already exist in Grafana. If unspecified, this
// parameter defaults to true, creating placeholder users with the name, login,
// and email set to the email of the user, and a random password. Setting this
// option to false will cause an error to be thrown for any users that do not
// already exist in Grafana.
// Defaults to `true`.
func (o OrganizationOutput) CreateUsers() pulumix.Output[*bool] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[*bool] { return v.CreateUsers })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// A list of email addresses corresponding to users who should be given editor
// access to the organization. Note: users specified here must already exist in
// Grafana unless 'create_users' is set to true.
func (o OrganizationOutput) Editors() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.ArrayOutput[string] { return v.Editors })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

// The display name for the Grafana organization created.
func (o OrganizationOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The organization id assigned to this organization by Grafana.
func (o OrganizationOutput) OrgId() pulumix.Output[int] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.Output[int] { return v.OrgId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// A list of email addresses corresponding to users who should be given viewer
// access to the organization. Note: users specified here must already exist in
// Grafana unless 'create_users' is set to true.
func (o OrganizationOutput) Viewers() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[Organization](o, func(v Organization) pulumix.ArrayOutput[string] { return v.Viewers })
	unwrapped := pulumix.Flatten[[]string, pulumix.ArrayOutput[string]](value)
	return pulumix.ArrayOutput[string]{OutputState: unwrapped.OutputState}
}

func init() {
	pulumi.RegisterOutputType(OrganizationOutput{})
}
