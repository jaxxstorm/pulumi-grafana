// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Besides the public probes run by Grafana Labs, you can also install your
// own private probes. These are only accessible to you and only write data to
// your Grafana Cloud account. Private probes are instances of the open source
// Grafana Synthetic Monitoring Agent.
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/synthetic-monitoring/private-probes/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewSyntheticMonitoringProbe(ctx, "main", &grafana.SyntheticMonitoringProbeArgs{
//				Labels: pulumi.StringMap{
//					"type": pulumi.String("mountain"),
//				},
//				Latitude:  pulumi.Float64(27.98606),
//				Longitude: pulumi.Float64(86.92262),
//				Region:    pulumi.String("APAC"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe probe {{probe-id}}
//
// ```
//
// ```sh
//
//	$ pulumi import grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe probe {{probe-id}}:{{auth_token}}
//
// ```
type SyntheticMonitoringProbe struct {
	pulumi.CustomResourceState

	// The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.
	AuthToken pulumix.Output[string] `pulumi:"authToken"`
	// Custom labels to be included with collected metrics and logs.
	Labels pulumix.MapOutput[string] `pulumi:"labels"`
	// Latitude coordinates.
	Latitude pulumix.Output[float64] `pulumi:"latitude"`
	// Longitude coordinates.
	Longitude pulumix.Output[float64] `pulumi:"longitude"`
	// Name of the probe.
	Name pulumix.Output[string] `pulumi:"name"`
	// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
	Public pulumix.Output[*bool] `pulumi:"public"`
	// Region of the probe.
	Region pulumix.Output[string] `pulumi:"region"`
	// The tenant ID of the probe.
	TenantId pulumix.Output[int] `pulumi:"tenantId"`
}

// NewSyntheticMonitoringProbe registers a new resource with the given unique name, arguments, and options.
func NewSyntheticMonitoringProbe(ctx *pulumi.Context,
	name string, args *SyntheticMonitoringProbeArgs, opts ...pulumi.ResourceOption) (*SyntheticMonitoringProbe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Latitude == nil {
		return nil, errors.New("invalid value for required argument 'Latitude'")
	}
	if args.Longitude == nil {
		return nil, errors.New("invalid value for required argument 'Longitude'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticMonitoringProbe
	err := ctx.RegisterResource("grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticMonitoringProbe gets an existing SyntheticMonitoringProbe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticMonitoringProbe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticMonitoringProbeState, opts ...pulumi.ResourceOption) (*SyntheticMonitoringProbe, error) {
	var resource SyntheticMonitoringProbe
	err := ctx.ReadResource("grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticMonitoringProbe resources.
type syntheticMonitoringProbeState struct {
	// The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.
	AuthToken *string `pulumi:"authToken"`
	// Custom labels to be included with collected metrics and logs.
	Labels map[string]string `pulumi:"labels"`
	// Latitude coordinates.
	Latitude *float64 `pulumi:"latitude"`
	// Longitude coordinates.
	Longitude *float64 `pulumi:"longitude"`
	// Name of the probe.
	Name *string `pulumi:"name"`
	// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
	Public *bool `pulumi:"public"`
	// Region of the probe.
	Region *string `pulumi:"region"`
	// The tenant ID of the probe.
	TenantId *int `pulumi:"tenantId"`
}

type SyntheticMonitoringProbeState struct {
	// The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.
	AuthToken pulumix.Input[*string]
	// Custom labels to be included with collected metrics and logs.
	Labels pulumix.Input[map[string]string]
	// Latitude coordinates.
	Latitude pulumix.Input[*float64]
	// Longitude coordinates.
	Longitude pulumix.Input[*float64]
	// Name of the probe.
	Name pulumix.Input[*string]
	// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
	Public pulumix.Input[*bool]
	// Region of the probe.
	Region pulumix.Input[*string]
	// The tenant ID of the probe.
	TenantId pulumix.Input[*int]
}

func (SyntheticMonitoringProbeState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringProbeState)(nil)).Elem()
}

type syntheticMonitoringProbeArgs struct {
	// Custom labels to be included with collected metrics and logs.
	Labels map[string]string `pulumi:"labels"`
	// Latitude coordinates.
	Latitude float64 `pulumi:"latitude"`
	// Longitude coordinates.
	Longitude float64 `pulumi:"longitude"`
	// Name of the probe.
	Name *string `pulumi:"name"`
	// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
	Public *bool `pulumi:"public"`
	// Region of the probe.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a SyntheticMonitoringProbe resource.
type SyntheticMonitoringProbeArgs struct {
	// Custom labels to be included with collected metrics and logs.
	Labels pulumix.Input[map[string]string]
	// Latitude coordinates.
	Latitude pulumix.Input[float64]
	// Longitude coordinates.
	Longitude pulumix.Input[float64]
	// Name of the probe.
	Name pulumix.Input[*string]
	// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
	Public pulumix.Input[*bool]
	// Region of the probe.
	Region pulumix.Input[string]
}

func (SyntheticMonitoringProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringProbeArgs)(nil)).Elem()
}

type SyntheticMonitoringProbeOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringProbe)(nil)).Elem()
}

func (o SyntheticMonitoringProbeOutput) ToSyntheticMonitoringProbeOutput() SyntheticMonitoringProbeOutput {
	return o
}

func (o SyntheticMonitoringProbeOutput) ToSyntheticMonitoringProbeOutputWithContext(ctx context.Context) SyntheticMonitoringProbeOutput {
	return o
}

func (o SyntheticMonitoringProbeOutput) ToOutput(ctx context.Context) pulumix.Output[SyntheticMonitoringProbe] {
	return pulumix.Output[SyntheticMonitoringProbe]{
		OutputState: o.OutputState,
	}
}

// The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.
func (o SyntheticMonitoringProbeOutput) AuthToken() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.Output[string] { return v.AuthToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Custom labels to be included with collected metrics and logs.
func (o SyntheticMonitoringProbeOutput) Labels() pulumix.MapOutput[string] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.MapOutput[string] { return v.Labels })
	unwrapped := pulumix.Flatten[map[string]string, pulumix.MapOutput[string]](value)
	return pulumix.MapOutput[string]{OutputState: unwrapped.OutputState}
}

// Latitude coordinates.
func (o SyntheticMonitoringProbeOutput) Latitude() pulumix.Output[float64] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.Output[float64] { return v.Latitude })
	return pulumix.Flatten[float64, pulumix.Output[float64]](value)
}

// Longitude coordinates.
func (o SyntheticMonitoringProbeOutput) Longitude() pulumix.Output[float64] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.Output[float64] { return v.Longitude })
	return pulumix.Flatten[float64, pulumix.Output[float64]](value)
}

// Name of the probe.
func (o SyntheticMonitoringProbeOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`. Defaults to `false`.
func (o SyntheticMonitoringProbeOutput) Public() pulumix.Output[*bool] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.Output[*bool] { return v.Public })
	return pulumix.Flatten[*bool, pulumix.Output[*bool]](value)
}

// Region of the probe.
func (o SyntheticMonitoringProbeOutput) Region() pulumix.Output[string] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.Output[string] { return v.Region })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The tenant ID of the probe.
func (o SyntheticMonitoringProbeOutput) TenantId() pulumix.Output[int] {
	value := pulumix.Apply[SyntheticMonitoringProbe](o, func(v SyntheticMonitoringProbe) pulumix.Output[int] { return v.TenantId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(SyntheticMonitoringProbeOutput{})
}
