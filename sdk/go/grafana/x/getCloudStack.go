// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Data source for Grafana Stack
func LookupCloudStack(ctx *pulumi.Context, args *LookupCloudStackArgs, opts ...pulumi.InvokeOption) (*LookupCloudStackResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCloudStackResult
	err := ctx.Invoke("grafana:index/getCloudStack:getCloudStack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudStack.
type LookupCloudStackArgs struct {
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug string `pulumi:"slug"`
}

// A collection of values returned by getCloudStack.
type LookupCloudStackResult struct {
	// Name of the Alertmanager instance configured for this stack.
	AlertmanagerName string `pulumi:"alertmanagerName"`
	// Status of the Alertmanager instance configured for this stack.
	AlertmanagerStatus string `pulumi:"alertmanagerStatus"`
	// Base URL of the Alertmanager instance configured for this stack.
	AlertmanagerUrl string `pulumi:"alertmanagerUrl"`
	// User ID of the Alertmanager instance configured for this stack.
	AlertmanagerUserId int `pulumi:"alertmanagerUserId"`
	// Description of stack.
	Description    string `pulumi:"description"`
	GraphiteName   string `pulumi:"graphiteName"`
	GraphiteStatus string `pulumi:"graphiteStatus"`
	GraphiteUrl    string `pulumi:"graphiteUrl"`
	GraphiteUserId int    `pulumi:"graphiteUserId"`
	// The stack id assigned to this stack by Grafana.
	Id         string `pulumi:"id"`
	LogsName   string `pulumi:"logsName"`
	LogsStatus string `pulumi:"logsStatus"`
	LogsUrl    string `pulumi:"logsUrl"`
	LogsUserId int    `pulumi:"logsUserId"`
	// Name of stack. Conventionally matches the url of the instance (e.g. “\n\n.grafana.net”).
	Name string `pulumi:"name"`
	// Organization id to assign to this stack.
	OrgId int `pulumi:"orgId"`
	// Organization name to assign to this stack.
	OrgName string `pulumi:"orgName"`
	// Organization slug to assign to this stack.
	OrgSlug string `pulumi:"orgSlug"`
	// Prometheus name for this instance.
	PrometheusName string `pulumi:"prometheusName"`
	// Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
	PrometheusRemoteEndpoint string `pulumi:"prometheusRemoteEndpoint"`
	// Use this URL to send prometheus metrics to Grafana cloud
	PrometheusRemoteWriteEndpoint string `pulumi:"prometheusRemoteWriteEndpoint"`
	// Prometheus status for this instance.
	PrometheusStatus string `pulumi:"prometheusStatus"`
	// Prometheus url for this instance.
	PrometheusUrl string `pulumi:"prometheusUrl"`
	// Prometheus user ID. Used for e.g. remote_write.
	PrometheusUserId int `pulumi:"prometheusUserId"`
	// The region this stack is deployed to.
	RegionSlug string `pulumi:"regionSlug"`
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug string `pulumi:"slug"`
	// Status of the stack.
	Status       string `pulumi:"status"`
	TracesName   string `pulumi:"tracesName"`
	TracesStatus string `pulumi:"tracesStatus"`
	// Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
	TracesUrl    string `pulumi:"tracesUrl"`
	TracesUserId int    `pulumi:"tracesUserId"`
	// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
	Url string `pulumi:"url"`
}

func LookupCloudStackOutput(ctx *pulumi.Context, args LookupCloudStackOutputArgs, opts ...pulumi.InvokeOption) LookupCloudStackResultOutput {
	outputResult := pulumix.ApplyErr[*LookupCloudStackArgs](args.ToOutput(), func(plainArgs *LookupCloudStackArgs) (*LookupCloudStackResult, error) {
		return LookupCloudStack(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupCloudStackResultOutput, *LookupCloudStackResult](outputResult)
}

// A collection of arguments for invoking getCloudStack.
type LookupCloudStackOutputArgs struct {
	// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
	// available at “https://\n\n.grafana.net".
	Slug pulumix.Input[string] `pulumi:"slug"`
}

func (args LookupCloudStackOutputArgs) ToOutput() pulumix.Output[*LookupCloudStackArgs] {
	allArgs := pulumix.All(
		args.Slug.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupCloudStackArgs {
		return &LookupCloudStackArgs{
			Slug: resolvedArgs[0].(string),
		}
	})
}

type LookupCloudStackResultOutput struct{ *pulumi.OutputState }

func (LookupCloudStackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudStackResult)(nil)).Elem()
}

func (o LookupCloudStackResultOutput) ToOutput(context.Context) pulumix.Output[*LookupCloudStackResult] {
	return pulumix.Output[*LookupCloudStackResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCloudStackResultOutput) AlertmanagerName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.AlertmanagerName })
}

func (o LookupCloudStackResultOutput) AlertmanagerStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.AlertmanagerStatus })
}

func (o LookupCloudStackResultOutput) AlertmanagerUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.AlertmanagerUrl })
}

func (o LookupCloudStackResultOutput) AlertmanagerUserId() pulumix.Output[int] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) int { return v.AlertmanagerUserId })
}

func (o LookupCloudStackResultOutput) Description() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.Description })
}

func (o LookupCloudStackResultOutput) GraphiteName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.GraphiteName })
}

func (o LookupCloudStackResultOutput) GraphiteStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.GraphiteStatus })
}

func (o LookupCloudStackResultOutput) GraphiteUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.GraphiteUrl })
}

func (o LookupCloudStackResultOutput) GraphiteUserId() pulumix.Output[int] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) int { return v.GraphiteUserId })
}

func (o LookupCloudStackResultOutput) Id() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.Id })
}

func (o LookupCloudStackResultOutput) LogsName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.LogsName })
}

func (o LookupCloudStackResultOutput) LogsStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.LogsStatus })
}

func (o LookupCloudStackResultOutput) LogsUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.LogsUrl })
}

func (o LookupCloudStackResultOutput) LogsUserId() pulumix.Output[int] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) int { return v.LogsUserId })
}

func (o LookupCloudStackResultOutput) Name() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.Name })
}

func (o LookupCloudStackResultOutput) OrgId() pulumix.Output[int] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) int { return v.OrgId })
}

func (o LookupCloudStackResultOutput) OrgName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.OrgName })
}

func (o LookupCloudStackResultOutput) OrgSlug() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.OrgSlug })
}

func (o LookupCloudStackResultOutput) PrometheusName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.PrometheusName })
}

func (o LookupCloudStackResultOutput) PrometheusRemoteEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.PrometheusRemoteEndpoint })
}

func (o LookupCloudStackResultOutput) PrometheusRemoteWriteEndpoint() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.PrometheusRemoteWriteEndpoint })
}

func (o LookupCloudStackResultOutput) PrometheusStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.PrometheusStatus })
}

func (o LookupCloudStackResultOutput) PrometheusUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.PrometheusUrl })
}

func (o LookupCloudStackResultOutput) PrometheusUserId() pulumix.Output[int] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) int { return v.PrometheusUserId })
}

func (o LookupCloudStackResultOutput) RegionSlug() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.RegionSlug })
}

func (o LookupCloudStackResultOutput) Slug() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.Slug })
}

func (o LookupCloudStackResultOutput) Status() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.Status })
}

func (o LookupCloudStackResultOutput) TracesName() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.TracesName })
}

func (o LookupCloudStackResultOutput) TracesStatus() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.TracesStatus })
}

func (o LookupCloudStackResultOutput) TracesUrl() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.TracesUrl })
}

func (o LookupCloudStackResultOutput) TracesUserId() pulumix.Output[int] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) int { return v.TracesUserId })
}

func (o LookupCloudStackResultOutput) Url() pulumix.Output[string] {
	return pulumix.Apply[*LookupCloudStackResult](o, func(v *LookupCloudStackResult) string { return v.Url })
}
