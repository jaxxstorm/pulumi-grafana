// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages Grafana library panels.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/manage-library-panels/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/library_element/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"title":   "updated name",
//				"id":      12,
//				"version": 35,
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = grafana.NewLibraryPanel(ctx, "test", &grafana.LibraryPanelArgs{
//				ModelJson: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/libraryPanel:LibraryPanel panel_name {{library_panel_slug}}
//
// ```
type LibraryPanel struct {
	pulumi.CustomResourceState

	// Timestamp when the library panel was created.
	Created pulumix.Output[string] `pulumi:"created"`
	// Numerical IDs of Grafana dashboards containing the library panel.
	DashboardIds pulumix.ArrayOutput[int] `pulumi:"dashboardIds"`
	// Description of the library panel.
	Description pulumix.Output[string] `pulumi:"description"`
	// ID of the folder where the library panel is stored.
	FolderId pulumix.Output[*string] `pulumi:"folderId"`
	// Name of the folder containing the library panel.
	FolderName pulumix.Output[string] `pulumi:"folderName"`
	// Unique ID (UID) of the folder containing the library panel.
	FolderUid pulumix.Output[string] `pulumi:"folderUid"`
	// The JSON model for the library panel.
	ModelJson pulumix.Output[string] `pulumi:"modelJson"`
	// Name of the library panel.
	Name pulumix.Output[string] `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Output[*string] `pulumi:"orgId"`
	// The numeric ID of the library panel computed by Grafana.
	PanelId pulumix.Output[int] `pulumi:"panelId"`
	// Type of the library panel (eg. text).
	Type pulumix.Output[string] `pulumi:"type"`
	// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
	Uid pulumix.Output[string] `pulumi:"uid"`
	// Timestamp when the library panel was last modified.
	Updated pulumix.Output[string] `pulumi:"updated"`
	// Version of the library panel.
	Version pulumix.Output[int] `pulumi:"version"`
}

// NewLibraryPanel registers a new resource with the given unique name, arguments, and options.
func NewLibraryPanel(ctx *pulumi.Context,
	name string, args *LibraryPanelArgs, opts ...pulumi.ResourceOption) (*LibraryPanel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelJson == nil {
		return nil, errors.New("invalid value for required argument 'ModelJson'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LibraryPanel
	err := ctx.RegisterResource("grafana:index/libraryPanel:LibraryPanel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLibraryPanel gets an existing LibraryPanel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLibraryPanel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LibraryPanelState, opts ...pulumi.ResourceOption) (*LibraryPanel, error) {
	var resource LibraryPanel
	err := ctx.ReadResource("grafana:index/libraryPanel:LibraryPanel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LibraryPanel resources.
type libraryPanelState struct {
	// Timestamp when the library panel was created.
	Created *string `pulumi:"created"`
	// Numerical IDs of Grafana dashboards containing the library panel.
	DashboardIds []int `pulumi:"dashboardIds"`
	// Description of the library panel.
	Description *string `pulumi:"description"`
	// ID of the folder where the library panel is stored.
	FolderId *string `pulumi:"folderId"`
	// Name of the folder containing the library panel.
	FolderName *string `pulumi:"folderName"`
	// Unique ID (UID) of the folder containing the library panel.
	FolderUid *string `pulumi:"folderUid"`
	// The JSON model for the library panel.
	ModelJson *string `pulumi:"modelJson"`
	// Name of the library panel.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The numeric ID of the library panel computed by Grafana.
	PanelId *int `pulumi:"panelId"`
	// Type of the library panel (eg. text).
	Type *string `pulumi:"type"`
	// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
	Uid *string `pulumi:"uid"`
	// Timestamp when the library panel was last modified.
	Updated *string `pulumi:"updated"`
	// Version of the library panel.
	Version *int `pulumi:"version"`
}

type LibraryPanelState struct {
	// Timestamp when the library panel was created.
	Created pulumix.Input[*string]
	// Numerical IDs of Grafana dashboards containing the library panel.
	DashboardIds pulumix.Input[[]int]
	// Description of the library panel.
	Description pulumix.Input[*string]
	// ID of the folder where the library panel is stored.
	FolderId pulumix.Input[*string]
	// Name of the folder containing the library panel.
	FolderName pulumix.Input[*string]
	// Unique ID (UID) of the folder containing the library panel.
	FolderUid pulumix.Input[*string]
	// The JSON model for the library panel.
	ModelJson pulumix.Input[*string]
	// Name of the library panel.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The numeric ID of the library panel computed by Grafana.
	PanelId pulumix.Input[*int]
	// Type of the library panel (eg. text).
	Type pulumix.Input[*string]
	// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
	Uid pulumix.Input[*string]
	// Timestamp when the library panel was last modified.
	Updated pulumix.Input[*string]
	// Version of the library panel.
	Version pulumix.Input[*int]
}

func (LibraryPanelState) ElementType() reflect.Type {
	return reflect.TypeOf((*libraryPanelState)(nil)).Elem()
}

type libraryPanelArgs struct {
	// ID of the folder where the library panel is stored.
	FolderId *string `pulumi:"folderId"`
	// The JSON model for the library panel.
	ModelJson string `pulumi:"modelJson"`
	// Name of the library panel.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
	Uid *string `pulumi:"uid"`
}

// The set of arguments for constructing a LibraryPanel resource.
type LibraryPanelArgs struct {
	// ID of the folder where the library panel is stored.
	FolderId pulumix.Input[*string]
	// The JSON model for the library panel.
	ModelJson pulumix.Input[string]
	// Name of the library panel.
	Name pulumix.Input[*string]
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumix.Input[*string]
	// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
	Uid pulumix.Input[*string]
}

func (LibraryPanelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*libraryPanelArgs)(nil)).Elem()
}

type LibraryPanelOutput struct{ *pulumi.OutputState }

func (LibraryPanelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LibraryPanel)(nil)).Elem()
}

func (o LibraryPanelOutput) ToLibraryPanelOutput() LibraryPanelOutput {
	return o
}

func (o LibraryPanelOutput) ToLibraryPanelOutputWithContext(ctx context.Context) LibraryPanelOutput {
	return o
}

func (o LibraryPanelOutput) ToOutput(ctx context.Context) pulumix.Output[LibraryPanel] {
	return pulumix.Output[LibraryPanel]{
		OutputState: o.OutputState,
	}
}

// Timestamp when the library panel was created.
func (o LibraryPanelOutput) Created() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.Created })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Numerical IDs of Grafana dashboards containing the library panel.
func (o LibraryPanelOutput) DashboardIds() pulumix.ArrayOutput[int] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.ArrayOutput[int] { return v.DashboardIds })
	unwrapped := pulumix.Flatten[[]int, pulumix.ArrayOutput[int]](value)
	return pulumix.ArrayOutput[int]{OutputState: unwrapped.OutputState}
}

// Description of the library panel.
func (o LibraryPanelOutput) Description() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.Description })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// ID of the folder where the library panel is stored.
func (o LibraryPanelOutput) FolderId() pulumix.Output[*string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[*string] { return v.FolderId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// Name of the folder containing the library panel.
func (o LibraryPanelOutput) FolderName() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.FolderName })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Unique ID (UID) of the folder containing the library panel.
func (o LibraryPanelOutput) FolderUid() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.FolderUid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The JSON model for the library panel.
func (o LibraryPanelOutput) ModelJson() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.ModelJson })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Name of the library panel.
func (o LibraryPanelOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o LibraryPanelOutput) OrgId() pulumix.Output[*string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[*string] { return v.OrgId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

// The numeric ID of the library panel computed by Grafana.
func (o LibraryPanelOutput) PanelId() pulumix.Output[int] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[int] { return v.PanelId })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

// Type of the library panel (eg. text).
func (o LibraryPanelOutput) Type() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.Type })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. It’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.
func (o LibraryPanelOutput) Uid() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.Uid })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Timestamp when the library panel was last modified.
func (o LibraryPanelOutput) Updated() pulumix.Output[string] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[string] { return v.Updated })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Version of the library panel.
func (o LibraryPanelOutput) Version() pulumix.Output[int] {
	value := pulumix.Apply[LibraryPanel](o, func(v LibraryPanel) pulumix.Output[int] { return v.Version })
	return pulumix.Flatten[int, pulumix.Output[int]](value)
}

func init() {
	pulumi.RegisterOutputType(LibraryPanelOutput{})
}
