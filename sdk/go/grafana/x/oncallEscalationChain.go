// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_chains/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewOncallEscalationChain(ctx, "default", nil, pulumi.Provider(grafana.Oncall))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import grafana:index/oncallEscalationChain:OncallEscalationChain escalation_chain_name {{escalation_chain_id}}
//
// ```
type OncallEscalationChain struct {
	pulumi.CustomResourceState

	// The name of the escalation chain.
	Name pulumix.Output[string] `pulumi:"name"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Output[*string] `pulumi:"teamId"`
}

// NewOncallEscalationChain registers a new resource with the given unique name, arguments, and options.
func NewOncallEscalationChain(ctx *pulumi.Context,
	name string, args *OncallEscalationChainArgs, opts ...pulumi.ResourceOption) (*OncallEscalationChain, error) {
	if args == nil {
		args = &OncallEscalationChainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallEscalationChain
	err := ctx.RegisterResource("grafana:index/oncallEscalationChain:OncallEscalationChain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallEscalationChain gets an existing OncallEscalationChain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallEscalationChain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallEscalationChainState, opts ...pulumi.ResourceOption) (*OncallEscalationChain, error) {
	var resource OncallEscalationChain
	err := ctx.ReadResource("grafana:index/oncallEscalationChain:OncallEscalationChain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallEscalationChain resources.
type oncallEscalationChainState struct {
	// The name of the escalation chain.
	Name *string `pulumi:"name"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
}

type OncallEscalationChainState struct {
	// The name of the escalation chain.
	Name pulumix.Input[*string]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
}

func (OncallEscalationChainState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallEscalationChainState)(nil)).Elem()
}

type oncallEscalationChainArgs struct {
	// The name of the escalation chain.
	Name *string `pulumi:"name"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId *string `pulumi:"teamId"`
}

// The set of arguments for constructing a OncallEscalationChain resource.
type OncallEscalationChainArgs struct {
	// The name of the escalation chain.
	Name pulumix.Input[*string]
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
	TeamId pulumix.Input[*string]
}

func (OncallEscalationChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallEscalationChainArgs)(nil)).Elem()
}

type OncallEscalationChainOutput struct{ *pulumi.OutputState }

func (OncallEscalationChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallEscalationChain)(nil)).Elem()
}

func (o OncallEscalationChainOutput) ToOncallEscalationChainOutput() OncallEscalationChainOutput {
	return o
}

func (o OncallEscalationChainOutput) ToOncallEscalationChainOutputWithContext(ctx context.Context) OncallEscalationChainOutput {
	return o
}

func (o OncallEscalationChainOutput) ToOutput(ctx context.Context) pulumix.Output[OncallEscalationChain] {
	return pulumix.Output[OncallEscalationChain]{
		OutputState: o.OutputState,
	}
}

// The name of the escalation chain.
func (o OncallEscalationChainOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[OncallEscalationChain](o, func(v OncallEscalationChain) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `getOncallTeam` datasource.
func (o OncallEscalationChainOutput) TeamId() pulumix.Output[*string] {
	value := pulumix.Apply[OncallEscalationChain](o, func(v OncallEscalationChain) pulumix.Output[*string] { return v.TeamId })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(OncallEscalationChainOutput{})
}
