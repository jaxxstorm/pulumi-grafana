// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// **Note:** This resource is available only with Grafana 9.1+.
//
// Manages service account tokens of a Grafana Cloud stack using the Cloud API
// This can be used to bootstrap a management service account token for a new stack
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cloudSa, err := grafana.NewCloudStackServiceAccount(ctx, "cloudSa", &grafana.CloudStackServiceAccountArgs{
//				StackSlug:  pulumi.String("<your stack slug>"),
//				Role:       pulumi.String("Admin"),
//				IsDisabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := grafana.NewCloudStackServiceAccountToken(ctx, "foo", &grafana.CloudStackServiceAccountTokenArgs{
//				ServiceAccountId: cloudSa.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("serviceAccountTokenFooKey", foo.Key)
//			return nil
//		})
//	}
//
// ```
type CloudStackServiceAccountToken struct {
	pulumi.CustomResourceState

	Expiration       pulumix.Output[string] `pulumi:"expiration"`
	HasExpired       pulumix.Output[bool]   `pulumi:"hasExpired"`
	Key              pulumix.Output[string] `pulumi:"key"`
	Name             pulumix.Output[string] `pulumi:"name"`
	SecondsToLive    pulumix.Output[*int]   `pulumi:"secondsToLive"`
	ServiceAccountId pulumix.Output[string] `pulumi:"serviceAccountId"`
	StackSlug        pulumix.Output[string] `pulumi:"stackSlug"`
}

// NewCloudStackServiceAccountToken registers a new resource with the given unique name, arguments, and options.
func NewCloudStackServiceAccountToken(ctx *pulumi.Context,
	name string, args *CloudStackServiceAccountTokenArgs, opts ...pulumi.ResourceOption) (*CloudStackServiceAccountToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceAccountId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountId'")
	}
	if args.StackSlug == nil {
		return nil, errors.New("invalid value for required argument 'StackSlug'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudStackServiceAccountToken
	err := ctx.RegisterResource("grafana:index/cloudStackServiceAccountToken:CloudStackServiceAccountToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudStackServiceAccountToken gets an existing CloudStackServiceAccountToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudStackServiceAccountToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudStackServiceAccountTokenState, opts ...pulumi.ResourceOption) (*CloudStackServiceAccountToken, error) {
	var resource CloudStackServiceAccountToken
	err := ctx.ReadResource("grafana:index/cloudStackServiceAccountToken:CloudStackServiceAccountToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudStackServiceAccountToken resources.
type cloudStackServiceAccountTokenState struct {
	Expiration       *string `pulumi:"expiration"`
	HasExpired       *bool   `pulumi:"hasExpired"`
	Key              *string `pulumi:"key"`
	Name             *string `pulumi:"name"`
	SecondsToLive    *int    `pulumi:"secondsToLive"`
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	StackSlug        *string `pulumi:"stackSlug"`
}

type CloudStackServiceAccountTokenState struct {
	Expiration       pulumix.Input[*string]
	HasExpired       pulumix.Input[*bool]
	Key              pulumix.Input[*string]
	Name             pulumix.Input[*string]
	SecondsToLive    pulumix.Input[*int]
	ServiceAccountId pulumix.Input[*string]
	StackSlug        pulumix.Input[*string]
}

func (CloudStackServiceAccountTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackServiceAccountTokenState)(nil)).Elem()
}

type cloudStackServiceAccountTokenArgs struct {
	Name             *string `pulumi:"name"`
	SecondsToLive    *int    `pulumi:"secondsToLive"`
	ServiceAccountId string  `pulumi:"serviceAccountId"`
	StackSlug        string  `pulumi:"stackSlug"`
}

// The set of arguments for constructing a CloudStackServiceAccountToken resource.
type CloudStackServiceAccountTokenArgs struct {
	Name             pulumix.Input[*string]
	SecondsToLive    pulumix.Input[*int]
	ServiceAccountId pulumix.Input[string]
	StackSlug        pulumix.Input[string]
}

func (CloudStackServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudStackServiceAccountTokenArgs)(nil)).Elem()
}

type CloudStackServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (CloudStackServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudStackServiceAccountToken)(nil)).Elem()
}

func (o CloudStackServiceAccountTokenOutput) ToCloudStackServiceAccountTokenOutput() CloudStackServiceAccountTokenOutput {
	return o
}

func (o CloudStackServiceAccountTokenOutput) ToCloudStackServiceAccountTokenOutputWithContext(ctx context.Context) CloudStackServiceAccountTokenOutput {
	return o
}

func (o CloudStackServiceAccountTokenOutput) ToOutput(ctx context.Context) pulumix.Output[CloudStackServiceAccountToken] {
	return pulumix.Output[CloudStackServiceAccountToken]{
		OutputState: o.OutputState,
	}
}

func (o CloudStackServiceAccountTokenOutput) Expiration() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackServiceAccountToken](o, func(v CloudStackServiceAccountToken) pulumix.Output[string] { return v.Expiration })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackServiceAccountTokenOutput) HasExpired() pulumix.Output[bool] {
	value := pulumix.Apply[CloudStackServiceAccountToken](o, func(v CloudStackServiceAccountToken) pulumix.Output[bool] { return v.HasExpired })
	return pulumix.Flatten[bool, pulumix.Output[bool]](value)
}

func (o CloudStackServiceAccountTokenOutput) Key() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackServiceAccountToken](o, func(v CloudStackServiceAccountToken) pulumix.Output[string] { return v.Key })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackServiceAccountTokenOutput) Name() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackServiceAccountToken](o, func(v CloudStackServiceAccountToken) pulumix.Output[string] { return v.Name })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackServiceAccountTokenOutput) SecondsToLive() pulumix.Output[*int] {
	value := pulumix.Apply[CloudStackServiceAccountToken](o, func(v CloudStackServiceAccountToken) pulumix.Output[*int] { return v.SecondsToLive })
	return pulumix.Flatten[*int, pulumix.Output[*int]](value)
}

func (o CloudStackServiceAccountTokenOutput) ServiceAccountId() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackServiceAccountToken](o, func(v CloudStackServiceAccountToken) pulumix.Output[string] { return v.ServiceAccountId })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func (o CloudStackServiceAccountTokenOutput) StackSlug() pulumix.Output[string] {
	value := pulumix.Apply[CloudStackServiceAccountToken](o, func(v CloudStackServiceAccountToken) pulumix.Output[string] { return v.StackSlug })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

func init() {
	pulumi.RegisterOutputType(CloudStackServiceAccountTokenOutput{})
}
